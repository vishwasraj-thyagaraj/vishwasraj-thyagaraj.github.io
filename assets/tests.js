'use strict';

define('dummy/tests/app.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | app');

  QUnit.test('app.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app.js should pass ESLint\n\n');
  });

  QUnit.test('components/code-snippet/component.js', function (assert) {
    assert.expect(1);
    assert.ok(false, 'components/code-snippet/component.js should pass ESLint\n\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\n12:6 - Unexpected console statement. (no-console)\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\n14:6 - Unexpected console statement. (no-console)');
  });

  QUnit.test('components/fields/date-field/component.js', function (assert) {
    assert.expect(1);
    assert.ok(false, 'components/fields/date-field/component.js should pass ESLint\n\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');
  });

  QUnit.test('components/sample-form/component.js', function (assert) {
    assert.expect(1);
    assert.ok(false, 'components/sample-form/component.js should pass ESLint\n\n49:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n51:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n72:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n98:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n112:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n119:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n123:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\n146:8 - \'hljs\' is not defined. (no-undef)\n147:7 - \'hljs\' is not defined. (no-undef)\n179:7 - \'hljs\' is not defined. (no-undef)');
  });

  QUnit.test('constants/autocomplete-fields/multiple-with-create.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/autocomplete-fields/multiple-with-create.js should pass ESLint\n\n');
  });

  QUnit.test('constants/autocomplete-fields/multiple.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/autocomplete-fields/multiple.js should pass ESLint\n\n');
  });

  QUnit.test('constants/autocomplete-fields/single-with-create.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/autocomplete-fields/single-with-create.js should pass ESLint\n\n');
  });

  QUnit.test('constants/autocomplete-fields/single.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/autocomplete-fields/single.js should pass ESLint\n\n');
  });

  QUnit.test('constants/date-picker-fields/date-field.js', function (assert) {
    assert.expect(1);
    assert.ok(false, 'constants/date-picker-fields/date-field.js should pass ESLint\n\n12:14 - \'moment\' is not defined. (no-undef)\n13:14 - \'moment\' is not defined. (no-undef)');
  });

  QUnit.test('constants/date-picker-fields/date-range-field.js', function (assert) {
    assert.expect(1);
    assert.ok(false, 'constants/date-picker-fields/date-range-field.js should pass ESLint\n\n15:14 - \'moment\' is not defined. (no-undef)\n16:14 - \'moment\' is not defined. (no-undef)\n19:13 - \'moment\' is not defined. (no-undef)\n20:11 - \'moment\' is not defined. (no-undef)');
  });

  QUnit.test('constants/date-picker-fields/date-time-field.js', function (assert) {
    assert.expect(1);
    assert.ok(false, 'constants/date-picker-fields/date-time-field.js should pass ESLint\n\n12:17 - \'moment\' is not defined. (no-undef)\n13:15 - \'moment\' is not defined. (no-undef)');
  });

  QUnit.test('constants/dependent-fields/checkbox-dependent-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/dependent-fields/checkbox-dependent-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/dependent-fields/dropdown-dependent-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/dependent-fields/dropdown-dependent-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/dependent-fields/nested-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/dependent-fields/nested-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/dependent-fields/radio-dependent-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/dependent-fields/radio-dependent-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/normal-fields/checkbox-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/normal-fields/checkbox-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/normal-fields/checkbox-group-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/normal-fields/checkbox-group-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/normal-fields/input-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/normal-fields/input-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/normal-fields/radio-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/normal-fields/radio-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/normal-fields/textarea-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/normal-fields/textarea-field.js should pass ESLint\n\n');
  });

  QUnit.test('constants/select-fields/multiple.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/select-fields/multiple.js should pass ESLint\n\n');
  });

  QUnit.test('constants/select-fields/single.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'constants/select-fields/single.js should pass ESLint\n\n');
  });

  QUnit.test('models/date-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'models/date-field.js should pass ESLint\n\n');
  });

  QUnit.test('models/user.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'models/user.js should pass ESLint\n\n');
  });

  QUnit.test('resolver.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'resolver.js should pass ESLint\n\n');
  });

  QUnit.test('router.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'router.js should pass ESLint\n\n');
  });

  QUnit.test('serializers/contact.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'serializers/contact.js should pass ESLint\n\n');
  });

  QUnit.test('serializers/form.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'serializers/form.js should pass ESLint\n\n');
  });

  QUnit.test('services/ember-form-for/config.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'services/ember-form-for/config.js should pass ESLint\n\n');
  });
});
define("dummy/tests/helpers/create-auto-complete-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.autoComplete = autoComplete;

  function autoComplete(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _autoComplete(testScope, options);

    var schema = {
      name: 'PinCode List',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _autoComplete(testScope, options) {
    var field = {
      id: 'pincode_id',
      type: 'auto_complete',
      label: 'Area Code',
      name: 'country',
      placeholder: 'Search...',
      position: 1,
      editable: true,
      custom: false,
      inputType: 'auto-complete',
      fieldOptions: {},
      fields: [],
      link: 'url/search',
      optionValuePath: 'id',
      optionLabelPath: 'id'
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-checkbox-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.checkbox = checkbox;

  function checkbox(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _checkbox(testScope, options);

    var schema = {
      name: 'Gender Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _checkbox(testScope, options) {
    var field = {
      id: 'gender_id',
      type: 'checkbox',
      label: 'Male ?',
      hint: 'Enter_gender',
      name: 'your_gender',
      position: 1,
      editable: true,
      custom: false,
      inputType: 'checkbox-field',
      fieldOptions: {},
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-checkbox-group-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.checkboxGroup = checkboxGroup;

  function checkboxGroup(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _checkboxGroup(testScope, options);

    var schema = {
      name: "Programming Langugages",
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _checkboxGroup(testScope, options) {
    var field = {
      id: "known_programming_langugages_id",
      type: "multi_select_checkbox",
      label: "Known Programming Langugages",
      hint: "select_intermediate_level_of_proficiency",
      name: "known_programming_langugages",
      position: 1,
      editable: true,
      custom: false,
      inputType: "checkbox-group",
      fieldOptions: {},
      fields: [],
      optionLabelPath: "value",
      optionValuePath: "value",
      getChoices: [{
        id: "c_id",
        value: "C",
        position: 1,
        parentChoiceIds: null
      }, {
        id: "java_id",
        value: "Java",
        position: 2,
        parentChoiceIds: null
      }, {
        id: "go_id",
        value: "Go",
        position: 3,
        parentChoiceIds: null
      }]
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-date-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.date = date;

  function date(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _date(testScope, options);

    var schema = {
      name: 'DOB Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _date(testScope, options) {
    var field = {
      id: 'date_of_birth_id',
      type: 'date_time',
      label: 'Date of Birth',
      name: 'DOB',
      position: 1,
      editable: true,
      custom: false,
      inputType: 'datetime-field',
      fieldOptions: {
        placeholder: {
          date: '00/00/0000'
        }
      },
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-date-time-split-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dateTimeSplit = dateTimeSplit;

  function dateTimeSplit(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _dateTimeSplit(testScope, options);

    var schema = {
      name: 'DOB Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _dateTimeSplit(testScope, options) {
    var field = {
      id: 'date_of_birth_id',
      type: 'date_time_split',
      label: 'Date And Time of Birth',
      name: 'DOB',
      position: 1,
      editable: true,
      custom: false,
      inputType: 'date-time-split-field',
      fieldOptions: {
        placeholder: {
          date: '00/00/0000',
          time: '00:00 AM'
        }
      },
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-dependent-dropdown-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dependentDropdown = dependentDropdown;

  function dependentDropdown(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _dependentDropdown(testScope, options);

    var schema = {
      name: 'Dependent Dropdown Test Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _dependentDropdown(testScope, options) {
    var field = {
      id: "country_id",
      name: "Country",
      label: "Country",
      type: 'dependent_dropdown',
      placeholder: 'Choose a Country',
      position: 1,
      editable: true,
      custom: false,
      getChoices: [{
        id: "usa_id",
        value: "USA",
        position: 1,
        parentChoiceIds: null
      }, {
        id: "india_id",
        value: "India",
        position: 2,
        parentChoiceIds: null
      }],
      inputType: 'dependent-dropdown',
      fieldOptions: {
        dependent: true
      },
      optionValuePath: 'id',
      optionLabelPath: 'value',
      fields: [{
        id: "states_id",
        name: "States",
        label: "States",
        type: 'dependent_dropdown',
        placeholder: 'Choose a State',
        position: 1,
        editable: true,
        custom: false,
        getChoices: [{
          id: "new_york_id",
          value: "New York",
          position: 1,
          parentChoiceIds: ['usa_id']
        }, {
          id: "new_jersey_id",
          value: "New Jersey",
          position: 3,
          parentChoiceIds: ['usa_id']
        }, {
          id: "punjab_id",
          value: "Punjab",
          position: 2,
          parentChoiceIds: ['india_id']
        }, {
          id: "himachal_pradesh_id",
          value: "Himachal Pradesh",
          position: 4,
          parentChoiceIds: ['india_id']
        }],
        inputType: 'dependent-dropdown',
        fieldOptions: {
          dependent: true
        },
        fields: [],
        optionValuePath: 'id',
        optionLabelPath: 'value'
      }]
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-email-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.email = email;

  function email(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _email(testScope, options);

    var schema = {
      name: 'Email Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _email(testScope, options) {
    var field = {
      id: 'email_id',
      type: 'email',
      label: 'Email Address',
      hint: 'personal_email',
      name: 'Email',
      position: 1,
      editable: true,
      custom: false,
      placeholder: 'abc@xyz.com',
      inputType: 'email-field',
      fieldOptions: {},
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-field", ["exports", "dummy/tests/helpers/create-auto-complete-field", "dummy/tests/helpers/create-date-field", "dummy/tests/helpers/create-date-time-split-field", "dummy/tests/helpers/create-email-field", "dummy/tests/helpers/create-number-field", "dummy/tests/helpers/create-text-field", "dummy/tests/helpers/create-textarea-field", "dummy/tests/helpers/create-url-field", "dummy/tests/helpers/create-dependent-dropdown-field", "dummy/tests/helpers/create-group-field", "dummy/tests/helpers/create-checkbox-field", "dummy/tests/helpers/create-multi-select-dropdown-field", "dummy/tests/helpers/create-power-select-field", "dummy/tests/helpers/create-radio-group-field", "dummy/tests/helpers/create-static-rich-text-field", "dummy/tests/helpers/render-form"], function (_exports, _createAutoCompleteField, _createDateField, _createDateTimeSplitField, _createEmailField, _createNumberField, _createTextField, _createTextareaField, _createUrlField, _createDependentDropdownField, _createGroupField, _createCheckboxField, _createMultiSelectDropdownField, _createPowerSelectField, _createRadioGroupField, _createStaticRichTextField, _renderForm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "autoComplete", {
    enumerable: true,
    get: function get() {
      return _createAutoCompleteField.autoComplete;
    }
  });
  Object.defineProperty(_exports, "date", {
    enumerable: true,
    get: function get() {
      return _createDateField.date;
    }
  });
  Object.defineProperty(_exports, "dateTimeSplit", {
    enumerable: true,
    get: function get() {
      return _createDateTimeSplitField.dateTimeSplit;
    }
  });
  Object.defineProperty(_exports, "email", {
    enumerable: true,
    get: function get() {
      return _createEmailField.email;
    }
  });
  Object.defineProperty(_exports, "number", {
    enumerable: true,
    get: function get() {
      return _createNumberField.number;
    }
  });
  Object.defineProperty(_exports, "text", {
    enumerable: true,
    get: function get() {
      return _createTextField.text;
    }
  });
  Object.defineProperty(_exports, "textarea", {
    enumerable: true,
    get: function get() {
      return _createTextareaField.textarea;
    }
  });
  Object.defineProperty(_exports, "url", {
    enumerable: true,
    get: function get() {
      return _createUrlField.url;
    }
  });
  Object.defineProperty(_exports, "dependentDropdown", {
    enumerable: true,
    get: function get() {
      return _createDependentDropdownField.dependentDropdown;
    }
  });
  Object.defineProperty(_exports, "group", {
    enumerable: true,
    get: function get() {
      return _createGroupField.group;
    }
  });
  Object.defineProperty(_exports, "checkbox", {
    enumerable: true,
    get: function get() {
      return _createCheckboxField.checkbox;
    }
  });
  Object.defineProperty(_exports, "multiSelectDropdown", {
    enumerable: true,
    get: function get() {
      return _createMultiSelectDropdownField.multiSelectDropdown;
    }
  });
  Object.defineProperty(_exports, "dropdown", {
    enumerable: true,
    get: function get() {
      return _createPowerSelectField.dropdown;
    }
  });
  Object.defineProperty(_exports, "radioGroup", {
    enumerable: true,
    get: function get() {
      return _createRadioGroupField.radioGroup;
    }
  });
  Object.defineProperty(_exports, "staticRichText", {
    enumerable: true,
    get: function get() {
      return _createStaticRichTextField.staticRichText;
    }
  });
  Object.defineProperty(_exports, "renderForm", {
    enumerable: true,
    get: function get() {
      return _renderForm.renderForm;
    }
  });
});
define("dummy/tests/helpers/create-formula-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createFormulaField = createFormulaField;
  _exports.default = void 0;

  function createFormulaField(testScope, type) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var model = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    testScope.model = model;

    if (type === 'number-field') {
      return _numberFormulaField(testScope, options);
    }

    if (type === 'text-field') {
      return _textFormulaField(testScope, options);
    }

    if (type === 'checkbox-field') {
      return _checkboxFormulaField(testScope, options);
    }

    if (type === 'radio-field') {
      return _radioFormulaField(testScope, options);
    }

    if (type === 'power-select-field') {
      return _powerSelectFormulaField(testScope, options);
    }
  }

  function _getFieldMap() {
    return {
      section: {
        single: 'nested-section',
        dependent: 'nested-section'
      },
      dropdown: {
        single: 'power-select-field',
        dependent: 'power-select-dependent-field'
      },
      dependent_dropdown: {
        single: 'dependent-dropdown',
        dependent: 'dependent-dropdown'
      },
      text: {
        single: 'text-field',
        dependent: 'text-field'
      },
      checkbox: {
        single: 'checkbox-field',
        dependent: 'checkbox-dependent-field'
      },
      number: {
        single: 'number-field',
        dependent: 'number-field'
      },
      paragraph: {
        single: 'textarea-field',
        dependent: 'textarea-field'
      },
      radio: {
        single: 'radio-field',
        dependent: 'radio-dependent-field'
      },
      date: {
        single: 'datetime-field',
        dependent: 'datetime-field'
      },
      date_time: {
        single: 'datetime-field',
        dependent: 'datetime-field'
      },
      auto_complete: {
        single: 'auto-complete',
        dependent: 'auto-complete'
      },
      email: {
        single: 'email-field',
        dependent: 'email-field'
      },
      phone_number: {
        single: 'text-field',
        dependent: 'text-field'
      },
      url: {
        single: 'url-field',
        dependent: 'url-field'
      },
      decimal: {
        single: 'number-field',
        dependent: 'number-field'
      },
      multi_select_dropdown: {
        single: 'multi-select-dropdown-field',
        dependent: 'multi-select-dropdown-field'
      },
      date_time_split: {
        single: 'date-time-split-field',
        dependent: 'date-time-split-field'
      },
      group_field: {
        single: 'group-field',
        dependent: 'group-field'
      },
      formula: {
        single: 'formula-field',
        dependent: 'formula-field'
      }
    };
  }

  function _numberFormulaField(testScope, options) {
    testScope.schema = {
      name: 'Number Formula Form',
      fields: [{
        id: 'revenue_from_product_a_id',
        parent: null,
        type: 'number',
        label: 'Product A',
        name: 'revenue_from_product_a',
        position: 1,
        editable: true,
        custom: false,
        inputType: 'number-field',
        evalservType: 'number',
        fieldOptions: {},
        fields: []
      }, {
        id: 'revenue_from_product_b_id',
        parent: null,
        type: 'number',
        label: 'Product B',
        name: 'revenue_from_product_b',
        position: 2,
        editable: true,
        custom: false,
        inputType: 'number-field',
        evalservType: 'number',
        fieldOptions: {},
        fields: []
      }, {
        id: 'total_revenue_id',
        parent: null,
        type: 'number',
        label: 'total revenue',
        name: 'total_revenue',
        position: 3,
        editable: false,
        custom: false,
        inputType: 'formula-field',
        evalservType: 'number',
        fieldOptions: {
          formula: true,
          expr: "#{revenue_from_product_a}+#{revenue_from_product_b}",
          field_value_path: 'name',
          expression_field_ids: 'revenue_from_product_a_id,revenue_from_product_b_id',
          evaluate_on_operand_data_update: true
        },
        fields: [],
        fieldMap: _getFieldMap()
      }]
    };
    var i = 0;

    for (var _i = 0, _Object$entries = Object.entries(options); _i < _Object$entries.length; _i++) {
      var option = _Object$entries[_i];
      Object.assign(testScope.schema.fields[i], option);
      i += 1;
    }
  }

  function _textFormulaField(testScope) {
    testScope.schema = {
      name: 'Text Formula Form',
      fields: [{
        id: 'first_name_id',
        parent: null,
        type: 'text',
        label: 'First Name',
        name: 'first_name',
        position: 1,
        editable: true,
        custom: false,
        inputType: 'text-field',
        evalservType: 'text',
        fieldOptions: {},
        fields: []
      }, {
        id: 'last_name_id',
        parent: null,
        type: 'text',
        label: 'Last Name',
        name: 'last_name',
        position: 2,
        editable: true,
        custom: false,
        inputType: 'text-field',
        evalservType: 'text',
        fieldOptions: {},
        fields: []
      }, {
        id: 'full_name_id',
        parent: null,
        type: 'text',
        label: 'Full Name',
        name: 'full_name',
        position: 3,
        editable: false,
        custom: false,
        inputType: 'formula-field',
        evalservType: 'text',
        fieldOptions: {
          formula: true,
          expr: "#{first_name}+#{last_name}",
          field_value_path: 'name',
          expression_field_ids: 'first_name_id,last_name_id',
          evaluate_on_operand_data_update: true
        },
        fields: [],
        fieldMap: _getFieldMap()
      }]
    };
  }

  function _checkboxFormulaField(testScope) {
    testScope.schema = {
      name: 'Checkbox Formula Form',
      fields: [{
        id: 'age_id',
        parent: null,
        type: 'checkbox',
        label: 'Above 18',
        name: 'age',
        position: 1,
        editable: true,
        custom: false,
        inputType: 'checkbox-field',
        evalservType: 'boolean',
        fieldOptions: {},
        fields: []
      }, {
        id: 'licence_id',
        parent: null,
        type: 'checkbox',
        label: 'Have a licence ?',
        name: 'licence',
        position: 2,
        editable: true,
        custom: false,
        inputType: 'checkbox-field',
        evalservType: 'boolean',
        fieldOptions: {},
        fields: []
      }, {
        id: 'drive_id',
        parent: null,
        type: 'checkbox',
        label: 'Can drive',
        name: 'drive',
        position: 3,
        editable: false,
        custom: false,
        inputType: 'formula-field',
        evalservType: 'boolean',
        fieldOptions: {
          formula: true,
          expr: "#{age}&&#{licence}",
          field_value_path: 'name',
          expression_field_ids: 'age_id,licence_id',
          evaluate_on_operand_data_update: true
        },
        fields: [],
        fieldMap: _getFieldMap()
      }]
    };
  }

  function _radioFormulaField(testScope) {
    testScope.schema = {
      name: 'Radio Formula Form',
      fields: [{
        id: 'licence_id',
        type: 'radio',
        label: 'Do you have a driving licence ?',
        name: 'licence',
        position: 1,
        optionValuePath: '',
        optionLabelPath: 'value',
        editable: true,
        custom: false,
        inputType: 'radio-field',
        fieldOptions: {},
        evalservType: 'text',
        choices: Ember.A([{
          id: "can_drive_id",
          value: "Yes",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "cannot_drive_id",
          value: "No",
          position: 2,
          parentChoiceIds: null
        }]),
        getChoices: [{
          id: "can_drive_id",
          value: "Yes",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "cannot_drive_id",
          value: "No",
          position: 2,
          parentChoiceIds: null
        }],
        fields: []
      }, {
        id: 'age_id',
        type: 'radio',
        label: 'Are you older than 18 years ?',
        name: 'age',
        position: 2,
        optionValuePath: 'value',
        optionLabelPath: 'value',
        editable: true,
        custom: false,
        inputType: 'radio-field',
        evalservType: 'text',
        fieldOptions: {},
        choices: Ember.A([{
          id: "above_18_id",
          value: "Yes",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "below_18_id",
          value: "No",
          position: 2,
          parentChoiceIds: null
        }]),
        getChoices: [{
          id: "above_18_id",
          value: "Yes",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "below_18_id",
          value: "No",
          position: 2,
          parentChoiceIds: null
        }],
        fields: []
      }, {
        id: 'drive_id',
        type: 'radio',
        label: 'Can drive',
        name: 'drive',
        position: 3,
        optionValuePath: 'value',
        optionLabelPath: 'value',
        editable: false,
        custom: false,
        inputType: 'formula-field',
        evalservType: 'boolean',
        fields: [],
        fieldMap: _getFieldMap(),
        fieldOptions: {
          formula: true,
          expr: "((#{licence} == 'Yes') && (#{age} == 'Yes'))",
          field_value_path: 'name',
          expression_field_ids: 'age_id,licence_id',
          evaluate_on_operand_data_update: true
        },
        choices: Ember.A([{
          id: "true_id",
          value: true,
          position: 1,
          parentChoiceIds: null
        }, {
          id: "false_id",
          value: false,
          position: 2,
          parentChoiceIds: null
        }]),
        getChoices: [{
          id: "true_id",
          value: true,
          position: 1,
          parentChoiceIds: null
        }, {
          id: "false_id",
          value: false,
          position: 2,
          parentChoiceIds: null
        }]
      }]
    };
  }

  function _powerSelectFormulaField(testScope) {
    testScope.schema = {
      name: 'PowerSelect Formula Form',
      fields: [{
        id: 'country_id',
        type: 'dropdown',
        label: 'Country',
        name: 'country',
        position: 1,
        optionValuePath: '',
        optionLabelPath: 'value',
        editable: true,
        custom: false,
        inputType: 'power-select-field',
        fieldOptions: {},
        evalservType: 'text',
        choices: Ember.A([{
          id: "india_id",
          value: "INDIA",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "china_id",
          value: "CHINA",
          position: 2,
          parentChoiceIds: null
        }]),
        getChoices: [{
          id: "india_id",
          value: "INDIA",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "china_id",
          value: "CHINA",
          position: 2,
          parentChoiceIds: null
        }],
        fields: []
      }, {
        id: 'state_id',
        type: 'dropdown',
        label: 'State',
        name: 'state',
        position: 1,
        optionValuePath: 'value',
        optionLabelPath: 'value',
        editable: true,
        custom: false,
        inputType: 'power-select-field',
        fieldOptions: {},
        evalservType: 'text',
        choices: Ember.A([{
          id: "kerala_id",
          value: "KERALA",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "tamil_nadu_id",
          value: "TAMIL NADU",
          position: 2,
          parentChoiceIds: null
        }]),
        getChoices: [{
          id: "kerala_id",
          value: "KERALA",
          position: 1,
          parentChoiceIds: null
        }, {
          id: "tamil_nadu_id",
          value: "TAMIL NADU",
          position: 2,
          parentChoiceIds: null
        }],
        fields: []
      }, {
        id: 'address_id',
        type: 'text',
        label: 'Address',
        name: 'address',
        position: 3,
        optionValuePath: 'value',
        optionLabelPath: 'value',
        editable: false,
        custom: false,
        inputType: 'formula-field',
        evalservType: 'text',
        fields: [],
        fieldMap: _getFieldMap(),
        fieldOptions: {
          formula: true,
          expr: "concat((concat(#{country}, ' ')), #{state})",
          field_value_path: 'name',
          expression_field_ids: 'country_id,state_id',
          evaluate_on_operand_data_update: true
        }
      }]
    };
  }

  var _default = Ember.Helper.helper(createFormulaField);

  _exports.default = _default;
});
define("dummy/tests/helpers/create-group-field", ["exports", "dummy/tests/helpers/field-map"], function (_exports, _fieldMap) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.group = group;

  function group(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _group(testScope, options);

    var schema = {
      name: 'Email Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _group(testScope, options) {
    var field = {
      id: 'email_id',
      type: 'group_field',
      label: 'Email Address',
      name: 'Email',
      position: 1,
      editable: true,
      custom: false,
      placeholder: 'groupmail@xyz.com',
      inputType: 'group-field',
      fieldOptions: {
        group_type: 'email',
        max_items: 3
      },
      fields: []
    };
    field.fieldMap = (0, _fieldMap.default)();
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-multi-select-dropdown-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.multiSelectDropdown = multiSelectDropdown;

  function multiSelectDropdown(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _multiSelectDropdown(testScope, options);

    var schema = {
      name: 'Known Programming Langugages',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _multiSelectDropdown(testScope, options) {
    var field = {
      id: 'langugages_id',
      parent: null,
      type: 'multi_select_dropdown',
      label: 'Known Programming Langugages',
      name: 'langugages',
      position: 1,
      editable: true,
      custom: false,
      placeholder: 'select known programming langugages',
      getChoices: [{
        id: 'c_id',
        name: 'C',
        position: 1
      }, {
        id: 'java_id',
        name: 'Java',
        position: 2
      }, {
        id: 'python_id',
        name: 'Ruby on Rails',
        position: 3
      }],
      inputType: 'multi-select-dropdown-field',
      fields: [],
      optionValuePath: 'id',
      optionLabelPath: 'name'
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-number-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.number = number;

  function number(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _number(testScope, options);

    var schema = {
      name: 'Income Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _number(testScope, options) {
    var field = {
      id: 'income_id',
      type: 'number',
      label: 'Net Income',
      name: 'income',
      hint: 'enter_annual_income',
      position: 1,
      editable: true,
      custom: false,
      placeholder: "income in '\u20B9'",
      inputType: 'number-field',
      fieldOptions: {},
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-power-select-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dropdown = dropdown;

  function dropdown(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _dropdown(testScope, options);

    var schema = {
      name: 'States',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _dropdown(testScope, options) {
    var field = {
      id: 'states_id',
      type: 'dropdown',
      label: 'Indian states',
      name: 'states',
      position: 1,
      optionValuePath: 'id',
      optionLabelPath: 'value',
      editable: true,
      custom: false,
      placeholder: "Select State of Residance",
      inputType: 'power-select-field',
      fieldOptions: {},
      getChoices: [{
        id: "kerala_id",
        value: "Kerala",
        position: 1,
        parentChoiceIds: null
      }, {
        id: "tamil_nadu_id",
        value: "Tamil Nadu",
        position: 2,
        parentChoiceIds: null
      }, {
        id: "karnataka_id",
        value: "Karnataka",
        position: 3,
        parentChoiceIds: null
      }],
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-radio-group-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.radioGroup = radioGroup;

  function radioGroup(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _radioGroup(testScope, options);

    var schema = {
      name: 'Color Picker',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _radioGroup(testScope, options) {
    var field = {
      id: 'favourite_color_id',
      type: 'radio',
      label: 'Pick your favourite color',
      hint: 'most_favourite_color',
      name: 'colors',
      position: 1,
      optionValuePath: 'value',
      optionLabelPath: 'value',
      editable: true,
      custom: false,
      inputType: 'radio-field',
      fieldOptions: {},
      getChoices: [{
        id: "red_id",
        value: "Red",
        hexValue: "#FF0000",
        position: 1,
        parentChoiceIds: null
      }, {
        id: "green_id",
        value: "Green",
        hexValue: "#00FF00",
        position: 2,
        parentChoiceIds: null
      }, {
        id: "blue_id",
        value: "Blue",
        hexValue: "#0000FF",
        position: 3,
        parentChoiceIds: null
      }],
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-static-rich-text-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.staticRichText = staticRichText;

  function staticRichText(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _staticRichText(testScope, options);

    var schema = {
      name: 'staticRichText Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _staticRichText(testScope, options) {
    var field = {
      id: "1729",
      name: "guidelines",
      label: "",
      type: "static_rich_text",
      custom: false,
      visible: true,
      inputType: "static-rich-text-field",
      position: 1,
      deleted: false,
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-text-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.text = text;

  function text(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _text(testScope, options);

    var schema = {
      name: 'Name Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _text(testScope, options) {
    var field = {
      id: 'name_id',
      type: 'text',
      label: 'First Name',
      hint: 'enter_in_captial_letters',
      name: 'name',
      position: 1,
      editable: true,
      custom: false,
      placeholder: "FirstName",
      inputType: 'text-field',
      fieldOptions: {},
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-textarea-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.textarea = textarea;

  function textarea(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _textarea(testScope, options);

    var schema = {
      name: 'Movie Review Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _textarea(testScope, options) {
    var field = {
      id: 'review_id',
      type: 'paragraph',
      label: 'Your review',
      hint: 'movie_review',
      name: 'review',
      position: 1,
      editable: true,
      custom: false,
      placeholder: "How was the movie",
      inputType: 'textarea-field',
      fieldOptions: {},
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/create-url-field", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.url = url;

  function url(testScope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var field = _url(testScope, options);

    var schema = {
      name: 'Url Form',
      fields: [field]
    };
    testScope.schema = schema;
    testScope.model = model;
  }

  function _url(testScope, options) {
    var field = {
      id: 'url_id',
      type: 'url',
      label: 'URL to validate',
      hint: "valid_url",
      name: 'url',
      position: 1,
      editable: true,
      custom: false,
      placeholder: "http://www.domain.com",
      inputType: 'url-field',
      fieldOptions: {},
      fields: []
    };
    Object.assign(field, options);
    return field;
  }
});
define("dummy/tests/helpers/destroy-app", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = destroyApp;

  function destroyApp(application) {
    Ember.run(application, 'destroy');
  }
});
define("dummy/tests/helpers/ember-cli-clipboard", ["exports", "ember-cli-clipboard/test-support"], function (_exports, _testSupport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.triggerSuccess = triggerSuccess;
  _exports.triggerError = triggerError;
  _exports.default = _default;

  var getOwnerFromContext = function getOwnerFromContext(c) {
    return c.container || c.owner;
  };
  /* === Legacy Integration Test Helpers === */

  /**
   * Fires `success` action for an instance of a copy-button component
   * @function triggerSuccess
   * @param {Object} context - integration test’s this context
   * @param {String} selector - css selector of the copy-button instance
   * @returns {Void}
   */


  function triggerSuccess(context, selector) {
    var owner = getOwnerFromContext(context);
    (0, _testSupport._fireComponentAction)(owner, selector, 'success');
  }
  /**
   * Fires `error` action for an instance of a copy-button component
   * @function triggerError
   * @param {Object} context - integration test’s this context
   * @param {String} selector - css selector of the copy-button instance
   * @returns {Void}
   */


  function triggerError(context, selector) {
    var owner = getOwnerFromContext(context);
    (0, _testSupport._fireComponentAction)(owner, selector, 'error');
  }
  /* === Register Legacy Acceptance Test Helpers === */


  function _default() {
    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector) {
      var owner = app.__container__;
      (0, _testSupport._fireComponentAction)(owner, selector, 'success');
    });
    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector) {
      var owner = app.__container__;
      (0, _testSupport._fireComponentAction)(owner, selector, 'error');
    });
  }
});
define("dummy/tests/helpers/ember-power-calendar", ["exports", "ember-power-calendar/test-support"], function (_exports, _testSupport) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _default() {
    Ember.Test.registerAsyncHelper('calendarCenter', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(app, selector, newCenter) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", (0, _testSupport.calendarCenter)(selector, newCenter));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }());
    Ember.Test.registerAsyncHelper('calendarSelect', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(app, selector, selected) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", (0, _testSupport.calendarSelect)(selector, selected));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
      };
    }());
  }
});
define("dummy/tests/helpers/ember-power-select", ["exports", "ember-power-select/test-support/helpers"], function (_exports, _helpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = deprecatedRegisterHelpers;
  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;

  function deprecateHelper(fn, name) {
    return function () {
      (true && !(false) && Ember.deprecate("DEPRECATED `import { ".concat(name, " } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { ").concat(name, " } from 'ember-power-select/test-support/helpers';`"), false, {
        until: '1.11.0',
        id: "ember-power-select-test-support-".concat(name)
      }));
      return fn.apply(void 0, arguments);
    };
  }

  var findContains = deprecateHelper(_helpers.findContains, 'findContains');
  _exports.findContains = findContains;
  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');
  _exports.nativeMouseDown = nativeMouseDown;
  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');
  _exports.nativeMouseUp = nativeMouseUp;
  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');
  _exports.triggerKeydown = triggerKeydown;
  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');
  _exports.typeInSearch = typeInSearch;
  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');
  _exports.clickTrigger = clickTrigger;
  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');
  _exports.nativeTouch = nativeTouch;
  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');
  _exports.touchTrigger = touchTrigger;
  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');
  _exports.selectChoose = selectChoose;

  function deprecatedRegisterHelpers() {
    (true && !(false) && Ember.deprecate("DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`", false, {
      until: '1.11.0',
      id: 'ember-power-select-test-support-register-helpers'
    }));
    return (0, _helpers.default)();
  }
});
define("dummy/tests/helpers/ember-test-selectors", ["exports", "ember-test-selectors"], function (_exports, _emberTestSelectors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var deprecate = Ember.deprecate;
  var message = 'Importing testSelector() from "<appname>/tests/helpers/ember-test-selectors" is deprecated. ' + 'Please import testSelector() from "ember-test-selectors" instead.';
  deprecate(message, false, {
    id: 'ember-test-selectors.test-selector-import',
    until: '0.2.0',
    url: 'https://github.com/simplabs/ember-test-selectors#usage'
  });
  var _default = _emberTestSelectors.default;
  _exports.default = _default;
});
define("dummy/tests/helpers/field-map", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = fieldMap;

  function fieldMap() {
    return {
      section: {
        single: 'nested-section',
        dependent: 'nested-section'
      },
      dropdown: {
        single: 'power-select-field',
        dependent: 'power-select-dependent-field'
      },
      dependent_dropdown: {
        single: 'dependent-dropdown',
        dependent: 'dependent-dropdown'
      },
      text: {
        single: 'text-field',
        dependent: 'text-field'
      },
      checkbox: {
        single: 'checkbox-field',
        dependent: 'checkbox-dependent-field'
      },
      number: {
        single: 'number-field',
        dependent: 'number-field'
      },
      paragraph: {
        single: 'textarea-field',
        dependent: 'textarea-field'
      },
      radio: {
        single: 'radio-field',
        dependent: 'radio-dependent-field'
      },
      date: {
        single: 'datetime-field',
        dependent: 'datetime-field'
      },
      date_time: {
        single: 'datetime-field',
        dependent: 'datetime-field'
      },
      auto_complete: {
        single: 'auto-complete',
        dependent: 'auto-complete'
      },
      email: {
        single: 'email-field',
        dependent: 'email-field'
      },
      phone_number: {
        single: 'text-field',
        dependent: 'text-field'
      },
      url: {
        single: 'url-field',
        dependent: 'url-field'
      },
      decimal: {
        single: 'number-field',
        dependent: 'number-field'
      },
      multi_select_dropdown: {
        single: 'multi-select-dropdown-field',
        dependent: 'multi-select-dropdown-field'
      },
      date_time_split: {
        single: 'date-time-split-field',
        dependent: 'date-time-split-field'
      },
      group_field: {
        single: 'group-field',
        dependent: 'group-field'
      },
      formula: {
        single: 'formula-field',
        dependent: 'formula-field'
      },
      multi_select_checkbox: {
        single: 'checkbox-group',
        dependent: 'checkbox-group'
      },
      static_rich_text: {
        single: 'static-rich-text-field',
        dependent: 'static-rich-text-field'
      },
      date_range: {
        single: 'date-range-field',
        dependent: 'date-range-field'
      }
    };
  }
});
define("dummy/tests/helpers/module-for-acceptance", ["exports", "qunit", "dummy/tests/helpers/start-app", "dummy/tests/helpers/destroy-app"], function (_exports, _qunit, _startApp, _destroyApp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _default;

  function _default(name) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _qunit.module)(name, {
      beforeEach: function beforeEach() {
        this.application = (0, _startApp.default)();

        if (options.beforeEach) {
          return options.beforeEach.apply(this, arguments);
        }
      },
      afterEach: function afterEach() {
        var _this = this;

        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);
        return Ember.RSVP.resolve(afterEach).then(function () {
          return (0, _destroyApp.default)(_this.application);
        });
      }
    });
  }
});
define("dummy/tests/helpers/render-form", ["exports", "@ember/test-helpers"], function (_exports, _testHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.renderForm = renderForm;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function renderForm() {
    return _renderForm.apply(this, arguments);
  }

  function _renderForm() {
    _renderForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _testHelpers.render)(Ember.HTMLBars.template({
                "id": "LrqDkHYb",
                "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"  \"]],\"hasEval\":false}",
                "meta": {}
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _renderForm.apply(this, arguments);
  }
});
define("dummy/tests/helpers/start-app", ["exports", "dummy/app", "dummy/config/environment"], function (_exports, _app, _environment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = startApp;

  function startApp(attrs) {
    var attributes = Ember.merge({}, _environment.default.APP);
    attributes.autoboot = true;
    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;

    return Ember.run(function () {
      var application = _app.default.create(attributes);

      application.setupForTesting();
      application.injectTestHelpers();
      return application;
    });
  }
});
define("dummy/tests/helpers/string-helper-methods", ["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getTextWithoutSpaces = getTextWithoutSpaces;

  function getTextWithoutSpaces(text) {
    return text.replace(/\s/g, '');
  }
});
define("dummy/tests/integration/components/dependent-dropdown/component-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Integration | Component | dependent dropdown', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
  });
});
define("dummy/tests/integration/components/dynamic-fields-for/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/pages/components/dynamic-fields-for", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, _dynamicFieldsFor, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | dynamic fields for', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Nested Field is rendered as a child of a parent id 1', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.setProperties(this, {
                  object: {
                    'name': 'Nested field name'
                  },
                  schema: {
                    parent: '1',
                    label: 'Field 1'
                  },
                  propertyName: 'name'
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "elVQVouZ",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"dynamic-fields-for\",null,[[\"object\",\"schema\",\"propertyName\"],[[20,[\"object\"]],[20,[\"schema\"]],[20,[\"propertyName\"]]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFieldsFor.default.sectionTitle).textContent.trim(), 'Field 1', 'Header title is set properly');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Nested Field is rendered as a parent itself', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.setProperties(this, {
                  object: {
                    'name': 'Nested field name'
                  },
                  schema: {
                    parent: null,
                    label: 'Field 1'
                  },
                  propertyName: 'name'
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "elVQVouZ",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"dynamic-fields-for\",null,[[\"object\",\"schema\",\"propertyName\"],[[20,[\"object\"]],[20,[\"schema\"]],[20,[\"propertyName\"]]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFieldsFor.default.sectionTitle).textContent.trim(), 'Field 1', 'Header title is set properly');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Default field: \'propertyName\' is computed properly when \'fieldClass\' meta is blank', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.setProperties(this, {
                  model: {
                    customField: {}
                  },
                  schema: {
                    name: 'Some Form',
                    fields: [{
                      parent: null,
                      label: 'First Name',
                      name: 'first_name',
                      type: 'text',
                      inputType: 'text-field',
                      custom: false,
                      fields: []
                    }]
                  }
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name="firstName"] input'), 'Mithun');
                assert.equal(Ember.get(this, 'model.firstName'), 'Mithun', 'Data is present inside \'firstName\' property');

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Default field: \'propertyName\' is computed properly when \'fieldClass\' meta is present', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                Ember.setProperties(this, {
                  model: {
                    customField: {}
                  },
                  schema: {
                    name: 'Some Form',
                    fields: [{
                      parent: null,
                      label: 'First Name',
                      name: 'first_name',
                      type: 'text',
                      inputType: 'text-field',
                      custom: false,
                      fieldClass: 'details',
                      fields: []
                    }]
                  }
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name="details.firstName"] input'), 'Mithun');
                assert.equal(Ember.get(this, 'model.details.firstName'), 'Mithun', 'Data is present inside \'details.firstName\' property');

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Default field: \'propertyName\' is computed properly when app overrides \'fieldClass\' meta using \'fieldScopeMap\'', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                Ember.setProperties(this, {
                  fieldScopeMap: {
                    details: 'apps_scope'
                  },
                  model: {
                    customField: {}
                  },
                  schema: {
                    name: 'Some Form',
                    fields: [{
                      parent: null,
                      label: 'First Name',
                      name: 'first_name',
                      type: 'text',
                      inputType: 'text-field',
                      custom: false,
                      fieldClass: 'details',
                      fields: []
                    }]
                  }
                });
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "nR6sAdUb",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldScopeMap\"],[[20,[\"model\"]],[20,[\"schema\"]],[20,[\"fieldScopeMap\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name="apps_scope.firstName"] input'), 'Mithun');
                assert.equal(Ember.get(this, 'model.apps_scope.firstName'), 'Mithun', 'Data is present inside \'apps_scope.firstName\' property');

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Default field: \'propertyName\' is computed properly for fields inside sections', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                Ember.setProperties(this, {
                  fieldScopeMap: {
                    details: 'apps_scope'
                  },
                  model: {
                    customField: {}
                  },
                  schema: {
                    name: 'Some Form',
                    fields: [{
                      parent: null,
                      label: 'Section',
                      name: 'section',
                      type: 'section',
                      inputType: 'nested-section',
                      fieldClass: 'my-section',
                      fields: [{
                        parent: null,
                        label: 'First Name',
                        name: 'first_name',
                        type: 'text',
                        inputType: 'text-field',
                        custom: false,
                        fieldClass: 'details',
                        fields: []
                      }]
                    }]
                  }
                });
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "nR6sAdUb",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldScopeMap\"],[[20,[\"model\"]],[20,[\"schema\"]],[20,[\"fieldScopeMap\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name="apps_scope.firstName"] input'), 'Mithun');
                assert.equal(Ember.get(this, 'model.apps_scope.firstName'), 'Mithun', 'Data is present inside \'apps_scope.firstName\' property');

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Custom field: \'propertyName\' is computed properly', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                Ember.setProperties(this, {
                  model: {
                    customField: {}
                  },
                  schema: {
                    name: 'Some Form',
                    fields: [{
                      parent: null,
                      label: 'First Name',
                      name: 'first_name',
                      type: 'text',
                      inputType: 'text-field',
                      custom: true,
                      fieldClass: 'details',
                      fields: []
                    }]
                  }
                });
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.first_name"] input'), 'Mithun');
                assert.equal(Ember.get(this, 'model.customField.first_name'), 'Mithun', 'Data is present inside \'customField.first_name\' property');

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Default field: Apps can override \'fieldClass\' to blank using \'fieldScopeMap\'', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                Ember.setProperties(this, {
                  fieldScopeMap: {
                    details: ''
                  },
                  model: {
                    customField: {}
                  },
                  schema: {
                    name: 'Some Form',
                    fields: [{
                      parent: null,
                      label: 'Section',
                      name: 'section',
                      type: 'section',
                      inputType: 'nested-section',
                      fieldClass: 'my-section',
                      fields: [{
                        parent: null,
                        label: 'First Name',
                        name: 'first_name',
                        type: 'text',
                        inputType: 'text-field',
                        custom: false,
                        fieldClass: 'details',
                        fields: []
                      }]
                    }]
                  }
                });
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "nR6sAdUb",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldScopeMap\"],[[20,[\"model\"]],[20,[\"schema\"]],[20,[\"fieldScopeMap\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name="firstName"] input'), 'Mithun');
                assert.equal(Ember.get(this, 'model.firstName'), 'Mithun', 'Data is present inside \'firstName\' property');

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }()); // TODO:: Template's each iteration has to be tested for validating if the property name and the value are shown properly.
  });
});
define("dummy/tests/integration/components/dynamic-form-for/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/pages/components/dynamic-form-for"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _dynamicFormFor) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | dynamic form', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Passing schema and other requisites renders the components', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.setProperties(this, {
                  model: {
                    'name': 'Some name'
                  },
                  schema: {
                    fields: [{
                      id: 1,
                      parent: null,
                      type: 'text',
                      label: 'Name',
                      name: 'name',
                      position: 1,
                      inputType: 'text-field',
                      fields: []
                    }]
                  }
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFormFor.default.nameFieldLabel).textContent.trim(), 'Name');
                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFormFor.default.nameFieldInput).value.trim(), 'Some name');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Checking if save action works', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.setProperties(this, {
                  model: {
                    'name': 'Some name',
                    save: function save() {
                      assert.ok('Save method is fired');
                    }
                  },
                  schema: {
                    fields: [{
                      id: 1,
                      parent: null,
                      type: 'text',
                      label: 'Name',
                      name: 'name',
                      position: 1,
                      inputType: 'text-field',
                      fields: []
                    }]
                  }
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "CdTseZD1",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n        \"],[1,[19,1,[\"submit\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.click)(_dynamicFormFor.default.submit);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Checking if reset action works', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.setProperties(this, {
                  model: {
                    'name': 'Some name',
                    rollback: function rollback() {
                      assert.ok('Rollback works');
                    }
                  },
                  schema: {
                    fields: [{
                      id: 1,
                      parent: null,
                      type: 'text',
                      label: 'Name',
                      name: 'name',
                      position: 1,
                      inputType: 'text-field',
                      fields: []
                    }]
                  }
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "0l5frW9F",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n        \"],[1,[19,1,[\"reset\"]],false],[0,\"\\n        \"],[1,[19,1,[\"submit\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)(_dynamicFormFor.default.nameFieldInput, 'Changing data in the text box');
                (0, _emberNativeDomHelpers.click)(_dynamicFormFor.default.reset);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Checking if user added update action works', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                Ember.setProperties(this, {
                  model: {
                    'name': 'Some name'
                  },
                  schema: {
                    fields: [{
                      id: 1,
                      parent: null,
                      type: 'text',
                      label: 'Name',
                      name: 'name',
                      position: 1,
                      inputType: 'text-field',
                      fields: []
                    }]
                  },
                  update: function update() {
                    assert.ok(true, 'External update action is fired');
                  }
                });
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "pyPZwLJa",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"update\"],[[20,[\"model\"]],[20,[\"schema\"]],[20,[\"update\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n        \"],[1,[19,1,[\"reset\"]],false],[0,\"\\n        \"],[1,[19,1,[\"submit\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.fillIn)(_dynamicFormFor.default.nameFieldInput, 'Changing data in the text box');

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Unsupported field types are not rendered', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(2);
                Ember.setProperties(this, {
                  model: {},
                  schema: {
                    fields: [{
                      id: 1,
                      parent: null,
                      type: 'unhandled-type',
                      label: 'Name',
                      name: 'name',
                      position: 1,
                      inputType: undefined,
                      fields: []
                    }]
                  }
                });
                _context5.next = 4;
                return this.render(Ember.HTMLBars.template({
                  "id": "3Z414sDl",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"update\",\"validations\"],[[20,[\"model\"]],[20,[\"schema\"]],[20,[\"update\"]],[20,[\"validations\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n        \"],[1,[19,1,[\"reset\"]],false],[0,\"\\n        \"],[1,[19,1,[\"submit\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[0]["attributes"]["label"].value, "Cancel", "Cancel button renders properly");
                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[1].innerText, "Submit", "Submit button renders properly");

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Form submit and reset button renders with default text', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(2);
                Ember.setProperties(this, {
                  model: {},
                  schema: {
                    fields: [{
                      id: 1,
                      parent: null,
                      type: 'text',
                      label: 'Name',
                      name: 'name',
                      position: 1,
                      inputType: 'text-field',
                      fields: []
                    }]
                  }
                });
                _context6.next = 4;
                return this.render(Ember.HTMLBars.template({
                  "id": "0l5frW9F",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n        \"],[1,[19,1,[\"reset\"]],false],[0,\"\\n        \"],[1,[19,1,[\"submit\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[0].innerText, "Cancel", "Cancel button text renders properly");
                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[1].innerText, "Submit", "Submit button text renders properly");

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Form submit and reset button renders with custom text', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(2);
                Ember.setProperties(this, {
                  model: {},
                  schema: {
                    fields: [{
                      id: 1,
                      parent: null,
                      type: 'text',
                      label: 'Name',
                      name: 'name',
                      position: 1,
                      inputType: 'text-field',
                      fields: []
                    }]
                  }
                });
                _context7.next = 4;
                return this.render(Ember.HTMLBars.template({
                  "id": "kiG5k3Nv",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n        \"],[1,[25,\"component\",[[19,1,[\"reset\"]]],[[\"label\"],[\"Reset\"]]],false],[0,\"\\n        \"],[1,[25,\"component\",[[19,1,[\"submit\"]]],[[\"default\"],[\"Save Form\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[0].innerText, "Reset", "Cancel button text renders properly");
                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[1].innerText, "Save Form", "Submit button text renders properly");

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }()); // TODO:: Validations are expected in a different format. Need to write for that (ember-cp-validations)
  });
});
define("dummy/tests/integration/components/fields-for/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | fields for', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "vnhA6Q8H",
                  "block": "{\"symbols\":[],\"statements\":[[1,[18,\"fields-for\"],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
                assert.equal(this.$().text().trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "RCF+Jknq",
                  "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"fields-for\",null,null,{\"statements\":[[0,\"        template block text\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                assert.equal(this.$().text().trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-controls/auto-complete-multiple-with-create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form controls/auto complete multiple with create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.set(this, 'object', {});
                Ember.set(this, 'propertyName', 'someProperty');
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "/Virtj02",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/auto-complete-multiple-with-create\",null,[[\"object\",\"propertyName\"],[[20,[\"object\"]],[20,[\"propertyName\"]]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(this.$().text().trim(), '');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-controls/auto-complete/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form controls/auto complete', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Component renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.set(this, 'object', {});
                Ember.set(this, 'propertyName', 'something');
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ed/5cc4l",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/auto-complete\",null,[[\"object\",\"propertyName\"],[[20,[\"object\"]],[20,[\"propertyName\"]]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(this.$().text().trim(), '');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-controls/date-field/component-test", ["qunit"], function (_qunit) {
  "use strict";

  (0, _qunit.module)('Integration | Component | form controls/date field', function () {});
});
define("dummy/tests/integration/components/form-controls/date-range-field/component-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleForComponent)('form-controls/date-range-field', 'Integration | Component | form controls/date range field', {
    integration: true
  });
  (0, _emberQunit.test)('it renders', function (assert) {
    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });
    this.render(Ember.HTMLBars.template({
      "id": "RLqEQdBT",
      "block": "{\"symbols\":[],\"statements\":[[1,[18,\"form-controls/date-range-field\"],false]],\"hasEval\":false}",
      "meta": {}
    }));
    assert.equal(this.$().text().trim(), ''); // Template block usage:

    this.render(Ember.HTMLBars.template({
      "id": "VC/sjV93",
      "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"form-controls/date-range-field\",null,null,{\"statements\":[[0,\"      template block text\\n\"]],\"parameters\":[]},null],[0,\"  \"]],\"hasEval\":false}",
      "meta": {}
    }));
    assert.equal(this.$().text().trim(), 'template block text');
  });
});
define("dummy/tests/integration/components/form-controls/date-time-split/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form controls/date time split', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('date-time-split: the control renders when update actions are passed for both date and time', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.run(function () {
                  Ember.set(_this, 'actions', {
                    'updateDate': {},
                    'updateTime': {}
                  });
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "QNg9emwy",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/date-time-split\",null,[[\"updateDate\",\"updateTime\"],[[25,\"action\",[[19,0,[]],\"updateDate\"],null],[25,\"action\",[[19,0,[]],\"updateTime\"],null]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(this.$().text().trim(), '');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-controls/dependent-selects/power-select/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form controls/dependent selects/power select', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.run(function () {
                  Ember.set(_this, 'actions', {
                    updateNestedIds: function updateNestedIds() {}
                  });
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "4OtQNKTp",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/dependent-selects/power-select\",null,[[\"updateNestedIds\"],[[25,\"action\",[[19,0,[]],\"updateNestedIds\"],null]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(this.$().text().trim(), '');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-controls/multi-select-dropdown/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form controls/multi select dropdown', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2mPye3lI",
                  "block": "{\"symbols\":[],\"statements\":[[1,[18,\"form-controls/multi-select-dropdown\"],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
                assert.equal(this.$().text().trim(), '');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-controls/power-select/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form controls/power select', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Component renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "6OYQGf4O",
                  "block": "{\"symbols\":[],\"statements\":[[1,[18,\"form-controls/power-select\"],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
                assert.equal(this.$().text().trim(), '');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-controls/time-picker-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form controls/time picker field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('time-control: it renders when update action is passed to the control', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.run(function () {
                  Ember.set(_this, 'actions', {
                    'update': {}
                  });
                });
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "YYl51Wq9",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/time-picker-field\",null,[[\"update\"],[[25,\"action\",[[19,0,[]],\"update\"],null]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.find)('.time-control')['innerText'], '');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('time-control: it renders the time when value is provided', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Ember.run(function () {
                  Ember.set(_this2, 'value', '11:15 PM');
                  Ember.set(_this2, 'actions', {
                    'update': {}
                  });
                });
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "fIVq+AL5",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/time-picker-field\",null,[[\"selectedValue\",\"update\"],[[20,[\"value\"]],[25,\"action\",[[19,0,[]],\"update\"],null]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.find)('.time-control')['innerText'], '11:15 PM');

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('time-control: the control gets disabled when \'disabled\' property is set to true', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                Ember.run(function () {
                  Ember.set(_this3, 'disabled', true);
                  Ember.set(_this3, 'actions', {
                    'update': {}
                  });
                });
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "h0VqFj14",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/time-picker-field\",null,[[\"disabled\",\"update\"],[[20,[\"disabled\"]],[25,\"action\",[[19,0,[]],\"update\"],null]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.find)('.time-control .ember-power-select-trigger')['attributes']['aria-disabled'].value, 'true');

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-errors/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form errors', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Component renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "rk0TBUW1",
                  "block": "{\"symbols\":[],\"statements\":[[1,[18,\"form-errors\"],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
                assert.equal(this.$().text().trim(), '');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-field/component-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Integration | Component | form field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/custom/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  }
                });

                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return _createField.default.renderForm();

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 2:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 when clicked dropdown is shown for searching", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  }
                });

                this.model = {
                  customField: {}
                };
                _context4.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context4.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "Type to search", "default search message 'Type to search' appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' check create option is shown when searching for non-existing keyword", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context6.next = 6;
                return _createField.default.renderForm();

              case 6:
                _context6.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context6.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "ABCD"...', "choice 1 'Add \"ABCD\"...'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 7:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionValuePath='value' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context8.next = 6;
                return _createField.default.renderForm();

              case 6:
                _context8.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context8.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 10:
                return _context8.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(_this2.model.customField.country, "INDIA");

                        case 3:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionValuePath='shortCode' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=CHN&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'shortCode'
                });

                this.model = {
                  customField: {}
                };
                _context10.next = 6;
                return _createField.default.renderForm();

              case 6:
                _context10.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context10.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('CHN');

              case 10:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);

                        case 2:
                          assert.equal(_this3.model.customField.country, "CHN");

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionValuePath='id' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'id'
                });

                this.model = {
                  customField: {}
                };
                _context12.next = 6;
                return _createField.default.renderForm();

              case 6:
                _context12.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context12.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context12.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);

                        case 2:
                          assert.equal(_this4.model.customField.country, "country_3");

                        case 3:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 optionValuePath='' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this5.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: ''
                });

                this.model = {
                  customField: {}
                };
                _context14.next = 6;
                return _createField.default.renderForm();

              case 6:
                _context14.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context14.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context14.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[5]);

                        case 2:
                          assert.deepEqual(_this5.model.customField.country, {
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          });

                        case 3:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 11:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x7) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 optionLabelPath='value' add a new option", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');
                  request.ok(_this6.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context16.next = 6;
                return _createField.default.renderForm();

              case 6:
                _context16.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context16.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');

              case 10:
                return _context16.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          _context15.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                          assert.equal(_this6.model.customField.country.value, "UNITED KINGDOM", "check 'UNITED KINGDOM' is selected");

                        case 4:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }))));

              case 11:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x8) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this7.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    custom_creatable_text: 'Create "${term}" choice'
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context18.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context18.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context18.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context18.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                  return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create "ABCD" choice', "Custom createable text shown is: 'Create \"ABCD\" choice'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 7:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }))));

              case 11:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x9) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST10 passing optionTargetPath to render choices and optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice", /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this8.countriesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    custom_creatable_text: 'Create "${term}" choice'
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  customField: {}
                };
                _context20.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context20.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context20.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context20.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                  return regeneratorRuntime.wrap(function _callee19$(_context19) {
                    while (1) {
                      switch (_context19.prev = _context19.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create "ABCD" choice', "Custom createable text shown is: 'Create \"ABCD\" choice'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 7:
                        case "end":
                          return _context19.stop();
                      }
                    }
                  }, _callee19);
                }))));

              case 11:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x10) {
        return _ref19.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/custom/edit/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/create-field", "ember-test-helpers/wait", "ember-cli-fake-server"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _emberPowerSelect, _createField, _wait, _emberCliFakeServer) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 3
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: "JAPAN"
                  }
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "JAPAN", "Field renderd with value 'JAPAN'");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'shortCode'
                });

                this.model = {
                  customField: {
                    country: {
                      id: 'country_1',
                      value: 'INDIA',
                      shortCode: 'IND',
                      position: 5
                    }
                  }
                };
                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "IND", "Field renderd with value 'IND'");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: {
                      id: 'country_5',
                      value: 'UNITED STATES',
                      shortCode: 'USA',
                      position: 5
                    }
                  }
                };
                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionLabelPath='value' Check field gets renderd with new option which is not already present in choice list ", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: {
                      value: 'UNITED'
                    }
                  }
                };
                _context8.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED", "Field renderd with value 'UNITED'");

                        case 1:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionLabelPath='value' optionValuePath='value' Checking if field gets renderd with model value and then try selecting another option ", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: {
                      value: 'UNITED STATES'
                    }
                  }
                };
                _context11.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                return _context11.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");
                          _context10.next = 3;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 3:
                          _context10.next = 5;
                          return (0, _emberPowerSelect.typeInSearch)('UNITED');

                        case 5:
                          return _context10.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                            return regeneratorRuntime.wrap(function _callee9$(_context9) {
                              while (1) {
                                switch (_context9.prev = _context9.next) {
                                  case 0:
                                    _context9.next = 2;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 2:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED", "Field renderd with value 'UNITED KINGDOM'");
                                    assert.equal(_this.model.customField.country.value, "UNITED", "check 'UNITED KINGDOM' is selected");

                                  case 4:
                                  case "end":
                                    return _context9.stop();
                                }
                              }
                            }, _callee9);
                          }))));

                        case 6:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }))));

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6  optionLabelPath='value' optionValuePath='value' optionTargetPath: 'countries' Checking if field gets renderd with model value and then try selecting another option ", /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this2.countriesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  customField: {
                    country: {
                      value: 'UNITED STATES'
                    }
                  }
                };
                _context14.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                return _context14.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");
                          _context13.next = 3;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 3:
                          _context13.next = 5;
                          return (0, _emberPowerSelect.typeInSearch)('UNITED');

                        case 5:
                          return _context13.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                            return regeneratorRuntime.wrap(function _callee12$(_context12) {
                              while (1) {
                                switch (_context12.prev = _context12.next) {
                                  case 0:
                                    _context12.next = 2;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 2:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED", "Field renderd with value 'UNITED KINGDOM'");
                                    assert.equal(_this2.model.customField.country.value, "UNITED", "check 'UNITED KINGDOM' is selected");

                                  case 4:
                                  case "end":
                                    return _context12.stop();
                                }
                              }
                            }, _callee12);
                          }))));

                        case 6:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 7:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x6) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  }
                });

                _context2.next = 4;
                return _createField.default.renderForm();

              case 4:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 2:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 when clicked dropdown is shown for searching", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  }
                });

                _context4.next = 4;
                return _createField.default.renderForm();

              case 4:
                _context4.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "Type to search", "default search message 'Type to search' appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' check create option is shown when searching for non-existing keyword", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context6.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context6.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context6.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "ABCD"...', "choice 1 'Add \"ABCD\"...'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 7:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionValuePath='value' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context8.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context8.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context8.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 9:
                return _context8.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(_this2.model.country, "INDIA");

                        case 3:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionValuePath='shortCode' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=CHN&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'shortCode'
                });

                _context10.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context10.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context10.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('CHN');

              case 9:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);

                        case 2:
                          assert.equal(_this3.model.country, "CHN");

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 10:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionValuePath='id' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'id'
                });

                _context12.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context12.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context12.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context12.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);

                        case 2:
                          assert.equal(_this4.model.country, "country_3");

                        case 3:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 10:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 optionValuePath='' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this5.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: ''
                });

                _context14.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context14.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context14.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context14.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[5]);

                        case 2:
                          assert.deepEqual(_this5.model.country, {
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          });

                        case 3:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 10:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x7) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 optionLabelPath='value' add a new option", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');
                  request.ok(_this6.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context16.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context16.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context16.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');

              case 9:
                return _context16.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          _context15.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                          assert.equal(_this6.model.country.value, "UNITED KINGDOM", "check 'UNITED KINGDOM' is selected");

                        case 4:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }))));

              case 10:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x8) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9 passing optionTargetPath to render choices and optionLabelPath='value' and check for add a new option", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');
                  request.ok(_this7.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value',
                  optionTargetPath: 'countries'
                });

                _context18.next = 5;
                return _createField.default.renderForm();

              case 5:
                _context18.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context18.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');

              case 9:
                return _context18.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                  return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          _context17.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                          assert.equal(_this7.model.country.value, "UNITED KINGDOM", "check 'UNITED KINGDOM' is selected");

                        case 4:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }))));

              case 10:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x9) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/create-field", "ember-cli-fake-server"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers, _emberPowerSelect, _createField, _emberCliFakeServer) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 3
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: "JAPAN"
                };
                _context2.next = 5;
                return _createField.default.renderForm();

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "JAPAN", "Field renderd with value 'JAPAN'");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'shortCode'
                });

                this.model = {
                  country: {
                    id: 'country_1',
                    value: 'INDIA',
                    shortCode: 'IND',
                    position: 5
                  }
                };
                _context4.next = 5;
                return _createField.default.renderForm();

              case 5:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "IND", "Field renderd with value 'IND'");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: {
                    id: 'country_5',
                    value: 'UNITED STATES',
                    shortCode: 'USA',
                    position: 5
                  }
                };
                _context6.next = 5;
                return _createField.default.renderForm();

              case 5:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionLabelPath='value' Check field gets renderd with new option which is not already present in choice list", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: {
                    value: 'UNITED'
                  }
                };
                _context8.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED", "Field renderd with value 'UNITED'");

                        case 1:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionLabelPath='value' optionValuePath='value' Checking if field gets renderd with model value and then try selecting another option", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: 'UNITED STATES'
                };
                _context11.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                return _context11.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");
                          _context10.next = 3;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 3:
                          _context10.next = 5;
                          return (0, _emberPowerSelect.typeInSearch)('UNITED');

                        case 5:
                          return _context10.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                            return regeneratorRuntime.wrap(function _callee9$(_context9) {
                              while (1) {
                                switch (_context9.prev = _context9.next) {
                                  case 0:
                                    _context9.next = 2;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 2:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED", "Field renderd with value 'UNITED KINGDOM'");
                                    assert.equal(_this.model.country.value, "UNITED", "check 'UNITED KINGDOM' is selected");

                                  case 4:
                                  case "end":
                                    return _context9.stop();
                                }
                              }
                            }, _callee9);
                          }))));

                        case 6:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }))));

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionLabelPath='value' optionValuePath='value' optionTargetPath: 'countries' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this2.countriesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  country: 'UNITED STATES'
                };
                _context14.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                return _context14.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");
                          _context13.next = 3;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 3:
                          _context13.next = 5;
                          return (0, _emberPowerSelect.typeInSearch)('UNITED');

                        case 5:
                          return _context13.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                            return regeneratorRuntime.wrap(function _callee12$(_context12) {
                              while (1) {
                                switch (_context12.prev = _context12.next) {
                                  case 0:
                                    _context12.next = 2;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 2:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED", "Field renderd with value 'UNITED KINGDOM'");
                                    assert.equal(_this2.model.country.value, "UNITED", "check 'UNITED KINGDOM' is selected");

                                  case 4:
                                  case "end":
                                    return _context12.stop();
                                }
                              }
                            }, _callee12);
                          }))));

                        case 6:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 7:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x6) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/create/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-create | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    multiple: true,
                    creatable: true
                  }
                });

                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 2:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    multiple: true,
                    custom_creatable_text: 'Create "${term}" choice'
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context4.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context4.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context4.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create "ABCD" choice', "Custom createable text shown is: 'Create \"ABCD\" choice'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 7:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionValuePath='value' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context6.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context6.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context6.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 10:
                return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(_this2.model.customField.country, "INDIA");

                        case 3:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionValuePath='shortCode' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=CHN&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'shortCode'
                });

                this.model = {
                  customField: {}
                };
                _context8.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context8.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context8.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('CHN');

              case 10:
                return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);

                        case 2:
                          assert.equal(_this3.model.customField.country, "CHN");

                        case 3:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionValuePath='id' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'id'
                });

                this.model = {
                  customField: {}
                };
                _context10.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context10.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context10.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context10.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);

                        case 2:
                          assert.equal(_this4.model.customField.country, "country_3");

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionValuePath='' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this5.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: ''
                });

                this.model = {
                  customField: {}
                };
                _context12.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context12.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context12.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context12.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[5]);

                        case 2:
                          assert.deepEqual(_this5.model.customField.country, {
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          });

                        case 3:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 optionLabelPath='value' add a new option", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');
                  request.ok(_this6.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context14.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context14.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context14.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');

              case 10:
                return _context14.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(_this6.model.customField.country.value, "UNITED KINGDOM", "check 'UNITED KINGDOM' is selected");

                        case 3:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 11:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x7) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this7.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    custom_creatable_text: 'Create "${term}" choice'
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context16.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context16.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context16.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context16.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create "ABCD" choice', "Custom createable text shown is: 'Create \"ABCD\" choice'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 7:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }))));

              case 11:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x8) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9 Selecting multiple values with creatable as true and removing one choice/value ", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this8.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context21.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context21.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context21.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 10:
                return _context21.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
                  return regeneratorRuntime.wrap(function _callee20$(_context20) {
                    while (1) {
                      switch (_context20.prev = _context20.next) {
                        case 0:
                          _context20.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          return _context20.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                            return regeneratorRuntime.wrap(function _callee19$(_context19) {
                              while (1) {
                                switch (_context19.prev = _context19.next) {
                                  case 0:
                                    _context19.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                                      request.ok(_this8.choicesList);
                                    });
                                    _context19.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('UNITED');

                                  case 5:
                                    return _context19.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                                      return regeneratorRuntime.wrap(function _callee18$(_context18) {
                                        while (1) {
                                          switch (_context18.prev = _context18.next) {
                                            case 0:
                                              _context18.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this8.model.customField.country, ["INDIA", "UNITED"], "check 'INDIA' and 'UNITED' is selected");
                                              _context18.next = 5;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                            case 5:
                                              return _context18.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                                                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                                                  while (1) {
                                                    switch (_context17.prev = _context17.next) {
                                                      case 0:
                                                        assert.deepEqual(_this8.model.customField.country, ["UNITED"], "check 'UNITED' is remaining in model");

                                                      case 1:
                                                      case "end":
                                                        return _context17.stop();
                                                    }
                                                  }
                                                }, _callee17);
                                              }))));

                                            case 6:
                                            case "end":
                                              return _context18.stop();
                                          }
                                        }
                                      }, _callee18);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context19.stop();
                                }
                              }
                            }, _callee19);
                          }))));

                        case 3:
                        case "end":
                          return _context20.stop();
                      }
                    }
                  }, _callee20);
                }))));

              case 11:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x9) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST10 Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty ", /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this9.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context24.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context24.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context24.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('UNITED');

              case 10:
                return _context24.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
                  return regeneratorRuntime.wrap(function _callee23$(_context23) {
                    while (1) {
                      switch (_context23.prev = _context23.next) {
                        case 0:
                          _context23.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this9.model.customField.country, ["UNITED"], "check 'UNITED' is remaining in model");
                          _context23.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context23.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
                            return regeneratorRuntime.wrap(function _callee22$(_context22) {
                              while (1) {
                                switch (_context22.prev = _context22.next) {
                                  case 0:
                                    assert.deepEqual(_this9.model.customField.country, [], "check nothing is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context22.stop();
                                }
                              }
                            }, _callee22);
                          }))));

                        case 6:
                        case "end":
                          return _context23.stop();
                      }
                    }
                  }, _callee23);
                }))));

              case 11:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      return function (_x10) {
        return _ref22.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST11 passing optionTargetPath to render choices and Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty ", /*#__PURE__*/function () {
      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this10.countriesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  customField: {}
                };
                _context27.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context27.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context27.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('UNITED');

              case 10:
                return _context27.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
                  return regeneratorRuntime.wrap(function _callee26$(_context26) {
                    while (1) {
                      switch (_context26.prev = _context26.next) {
                        case 0:
                          _context26.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this10.model.customField.country, ["UNITED"], "check 'UNITED' is remaining in model");
                          _context26.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context26.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
                            return regeneratorRuntime.wrap(function _callee25$(_context25) {
                              while (1) {
                                switch (_context25.prev = _context25.next) {
                                  case 0:
                                    assert.deepEqual(_this10.model.customField.country, [], "check nothing is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context25.stop();
                                }
                              }
                            }, _callee25);
                          }))));

                        case 6:
                        case "end":
                          return _context26.stop();
                      }
                    }
                  }, _callee26);
                }))));

              case 11:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      return function (_x11) {
        return _ref25.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/edit/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "ember-cli-fake-server"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _createField, _emberCliFakeServer) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-create | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 3
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 creatable='true' multiple='true' passing one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: ['UNITED STATES']
                  }
                };
                _context2.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.customField.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context2.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.deepEqual(_this.model.customField.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 creatable='true' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this2.countriesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  customField: {
                    country: ['UNITED STATES']
                  }
                };
                _context4.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.customField.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context4.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.deepEqual(_this2.model.customField.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/create/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "ember-test-helpers/wait", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _wait, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-create | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: true
                  }
                });

                _context2.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 2:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    multiple: true,
                    custom_creatable_text: 'Create "${term}" choice'
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context4.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context4.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create "ABCD" choice', "Custom createable text shown is: 'Create \"ABCD\" choice'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 7:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 Selecting multiple values with creatable as true and removing one choice/value ", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context9.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context9.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context9.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 9:
                return _context9.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                              while (1) {
                                switch (_context7.prev = _context7.next) {
                                  case 0:
                                    _context7.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                                      request.ok(_this2.choicesList);
                                    });
                                    _context7.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('UNITED');

                                  case 5:
                                    return _context7.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                                      return regeneratorRuntime.wrap(function _callee6$(_context6) {
                                        while (1) {
                                          switch (_context6.prev = _context6.next) {
                                            case 0:
                                              _context6.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this2.model.country, ["INDIA", "UNITED"], "check 'INDIA' and 'UNITED' is in model");
                                              _context6.next = 5;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                            case 5:
                                              return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                                                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                                  while (1) {
                                                    switch (_context5.prev = _context5.next) {
                                                      case 0:
                                                        assert.deepEqual(_this2.model.country, ["UNITED"], "check 'UNITED' is remaining in model");

                                                      case 1:
                                                      case "end":
                                                        return _context5.stop();
                                                    }
                                                  }
                                                }, _callee5);
                                              }))));

                                            case 6:
                                            case "end":
                                              return _context6.stop();
                                          }
                                        }
                                      }, _callee6);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context7.stop();
                                }
                              }
                            }, _callee7);
                          }))));

                        case 3:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }))));

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty ", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context12.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context12.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context12.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('UNITED');

              case 9:
                return _context12.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this3.model.country, ["UNITED"], "check 'UNITED' is remaining in model");
                          _context11.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context11.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                            return regeneratorRuntime.wrap(function _callee10$(_context10) {
                              while (1) {
                                switch (_context10.prev = _context10.next) {
                                  case 0:
                                    assert.deepEqual(_this3.model.country, [], "check nothing is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context10.stop();
                                }
                              }
                            }, _callee10);
                          }))));

                        case 6:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 10:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x4) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 passing optionTargetPath to render choices and Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty ", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value',
                  optionTargetPath: 'countries'
                });

                _context15.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context15.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context15.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('UNITED');

              case 9:
                return _context15.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          _context14.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this4.model.country, ["UNITED"], "check 'UNITED' is remaining in model");
                          _context14.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context14.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                            return regeneratorRuntime.wrap(function _callee13$(_context13) {
                              while (1) {
                                switch (_context13.prev = _context13.next) {
                                  case 0:
                                    assert.deepEqual(_this4.model.country, [], "check nothing is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context13.stop();
                                }
                              }
                            }, _callee13);
                          }))));

                        case 6:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))));

              case 10:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x5) {
        return _ref13.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/edit/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "ember-cli-fake-server"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _createField, _emberCliFakeServer) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 3
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 creatable='true' multiple='true' passing one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: ['UNITED STATES']
                };
                _context2.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context2.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.deepEqual(_this.model.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 creatable='true' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this2.countriesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  country: ['UNITED STATES']
                };
                _context4.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context4.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.deepEqual(_this2.model.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/create/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  }
                });

                this.model = {
                  customField: {}
                };
                _context.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                assert.equal(this.model.customField.country, undefined, "no value set on model");

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 when clicked dropdown is shown for searching", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(4);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  }
                });

                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context2.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "Type to search", "default search message 'Type to search' appears");
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                assert.equal(this.model.customField.country, undefined, "no value set on model");

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context4.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context4.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context4.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JAPAN", "choice 5 is 'JAPAN'");
                          assert.equal(_this.model.customField.country, undefined, "no value set on model");

                        case 7:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionLabelPath: 'shortCode'
                });

                this.model = {
                  customField: {}
                };
                _context6.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context6.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context6.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "IND", "choice 1 is 'IND'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "USA", "choice 2 is 'USA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHN", "choice 3 is 'CHN'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "LKA", "choice 4 is 'LKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JPN", "choice 5 is 'JPN'");
                          assert.equal(_this2.model.customField.country, undefined, "no value set on model");

                        case 7:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionValuePath='shortCode' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionValuePath: 'shortCode',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context8.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context8.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context8.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);
                          assert.equal(_this3.model.customField.country, "CHN");

                        case 2:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionValuePath='id' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionValuePath: 'id',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context10.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context10.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context10.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context10.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);
                          assert.equal(_this4.model.customField.country, "country_3");

                        case 2:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x6) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 Selecting one value with creatable as false and removing the selected choice and checking whether model  is empty ", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this5.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context13.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context13.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context13.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 10:
                return _context13.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          _context12.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this5.model.customField.country, ["INDIA"], "check 'INDIA' is in model");
                          _context12.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context12.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                            return regeneratorRuntime.wrap(function _callee11$(_context11) {
                              while (1) {
                                switch (_context11.prev = _context11.next) {
                                  case 0:
                                    assert.deepEqual(_this5.model.customField.country, [], "check nothing is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context11.stop();
                                }
                              }
                            }, _callee11);
                          }))));

                        case 6:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12);
                }))));

              case 11:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x7) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 Selecting multiple values with creatable as false and removing one choice/value ", /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this6.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context18.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context18.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context18.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 10:
                return _context18.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                  return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          _context17.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          return _context17.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                            return regeneratorRuntime.wrap(function _callee16$(_context16) {
                              while (1) {
                                switch (_context16.prev = _context16.next) {
                                  case 0:
                                    _context16.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query field is populated');
                                      request.ok(_this6.choicesList);
                                    });
                                    _context16.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');

                                  case 5:
                                    return _context16.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                                      return regeneratorRuntime.wrap(function _callee15$(_context15) {
                                        while (1) {
                                          switch (_context15.prev = _context15.next) {
                                            case 0:
                                              _context15.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this6.model.customField.country, ["INDIA", "UNITED STATES"], "check 'INDIA' and 'UNITED STATES' is selected");
                                              _context15.next = 5;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                            case 5:
                                              return _context15.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                                                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                                                  while (1) {
                                                    switch (_context14.prev = _context14.next) {
                                                      case 0:
                                                        assert.deepEqual(_this6.model.customField.country, ["UNITED STATES"], "check 'UNITED STATES' is remaining in model");

                                                      case 1:
                                                      case "end":
                                                        return _context14.stop();
                                                    }
                                                  }
                                                }, _callee14);
                                              }))));

                                            case 6:
                                            case "end":
                                              return _context15.stop();
                                          }
                                        }
                                      }, _callee15);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context16.stop();
                                }
                              }
                            }, _callee16);
                          }))));

                        case 3:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }))));

              case 11:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x8) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9 Checking for not creating a new choice", /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                assert.expect(2);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context20.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context20.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');
                  request.ok(_this7.choicesList);
                });
                _context20.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');

              case 10:
                return _context20.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                  return regeneratorRuntime.wrap(function _callee19$(_context19) {
                    while (1) {
                      switch (_context19.prev = _context19.next) {
                        case 0:
                          assert.notEqual((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "UNITED KINGDOM"...', "choice 1 'Add \"ABCD\"...'");

                        case 1:
                        case "end":
                          return _context19.stop();
                      }
                    }
                  }, _callee19);
                }))));

              case 11:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x9) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST10 passing optionTargetPath to render choices and Selecting multiple values with creatable as false and removing one choice/value ", /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this8.countriesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  customField: {}
                };
                _context25.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context25.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context25.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 10:
                return _context25.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
                  return regeneratorRuntime.wrap(function _callee24$(_context24) {
                    while (1) {
                      switch (_context24.prev = _context24.next) {
                        case 0:
                          _context24.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          return _context24.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
                            return regeneratorRuntime.wrap(function _callee23$(_context23) {
                              while (1) {
                                switch (_context23.prev = _context23.next) {
                                  case 0:
                                    _context23.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query field is populated');
                                      request.ok(_this8.choicesList);
                                    });
                                    _context23.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');

                                  case 5:
                                    return _context23.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
                                      return regeneratorRuntime.wrap(function _callee22$(_context22) {
                                        while (1) {
                                          switch (_context22.prev = _context22.next) {
                                            case 0:
                                              _context22.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this8.model.customField.country, ["INDIA", "UNITED STATES"], "check 'INDIA' and 'UNITED STATES' is selected");
                                              _context22.next = 5;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                            case 5:
                                              return _context22.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
                                                return regeneratorRuntime.wrap(function _callee21$(_context21) {
                                                  while (1) {
                                                    switch (_context21.prev = _context21.next) {
                                                      case 0:
                                                        assert.deepEqual(_this8.model.customField.country, ["UNITED STATES"], "check 'UNITED STATES' is remaining in model");

                                                      case 1:
                                                      case "end":
                                                        return _context21.stop();
                                                    }
                                                  }
                                                }, _callee21);
                                              }))));

                                            case 6:
                                            case "end":
                                              return _context22.stop();
                                          }
                                        }
                                      }, _callee22);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context23.stop();
                                }
                              }
                            }, _callee23);
                          }))));

                        case 3:
                        case "end":
                          return _context24.stop();
                      }
                    }
                  }, _callee24);
                }))));

              case 11:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      return function (_x10) {
        return _ref21.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/edit/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/create-field", "ember-cli-fake-server"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _createField, _emberCliFakeServer) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 3
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 optionLabelPath='shortCode' optionValuePath='' Check field gets rendered with saved value", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'shortCode'
                });

                this.model = {
                  customField: {
                    country: Ember.A([{
                      id: 'country_1',
                      value: 'INDIA',
                      shortCode: 'IND',
                      position: 5
                    }])
                  }
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "× IND", "Field renderd with value 'IND'");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: Ember.A([{
                      id: 'country_5',
                      value: 'UNITED STATES',
                      shortCode: 'USA',
                      position: 5
                    }])
                  }
                };
                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "× UNITED STATES", "Field renderd with value 'UNITED STATES'");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 creatable='false' multiple='true' passing one option as default and selecting one more option and removing one choice/value ", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: ['UNITED STATES']
                  }
                };
                _context7.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.customField.country, ["UNITED STATES"], "check 'UNITED STATES' is in model");
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });
                _context7.next = 10;
                return (0, _emberPowerSelect.clickTrigger)();

              case 10:
                _context7.next = 12;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 12:
                return _context7.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this.model.customField.country, ["UNITED STATES", "INDIA"], "check 'INDIA' and 'UNITED STATES' is selected");
                          _context6.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                              while (1) {
                                switch (_context5.prev = _context5.next) {
                                  case 0:
                                    assert.deepEqual(_this.model.customField.country, ["INDIA"], "check 'INDIA' is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context5.stop();
                                }
                              }
                            }, _callee5);
                          }))));

                        case 6:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }))));

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 creatable='false' multiple='true' passing one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {
                    country: ['UNITED STATES']
                  }
                };
                _context9.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.customField.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context9.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context9.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          assert.deepEqual(_this2.model.customField.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }))));

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 creatable='false' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this3.countriesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  customField: {
                    country: ['UNITED STATES']
                  }
                };
                _context11.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.customField.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context11.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context11.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          assert.deepEqual(_this3.model.customField.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }))));

              case 10:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x5) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/create/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "ember-test-helpers/wait", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _wait, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  }
                });

                _context2.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                          assert.equal(_this.model.country, undefined, "no value set on model");

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 when clicked dropdown is shown for searching", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(4);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  }
                });

                _context4.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                _context4.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "Type to search", "default search message 'Type to search' appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                          assert.equal(_this2.model.country, undefined, "no value set on model");

                        case 4:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionLabelPath: 'value'
                });

                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context6.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context6.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JAPAN", "choice 5 is 'JAPAN'");
                          assert.equal(_this3.model.country, undefined, "no value set on model");

                        case 7:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionLabelPath: 'shortCode'
                });

                _context8.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context8.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context8.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "IND", "choice 1 is 'IND'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "USA", "choice 2 is 'USA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHN", "choice 3 is 'CHN'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "LKA", "choice 4 is 'LKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JPN", "choice 5 is 'JPN'");
                          assert.equal(_this4.model.country, undefined, "no value set on model");

                        case 7:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionValuePath='value' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this5.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                _context10.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context10.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context10.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context10.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);
                          assert.equal(_this5.model.country, "INDIA");

                        case 2:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 10:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionValuePath='shortCode' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=id', 'query field is populated');
                  request.ok(_this6.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionValuePath: 'shortCode'
                });

                _context12.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context12.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context12.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context12.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);
                          assert.equal(_this6.model.country, "CHN");

                        case 2:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 10:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 optionValuePath='id' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=id', 'query field is populated');
                  request.ok(_this7.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionValuePath: 'id'
                });

                _context14.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context14.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context14.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context14.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);
                          assert.equal(_this7.model.country, "country_3");

                        case 2:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 10:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x7) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 optionValuePath='' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=id', 'query field is populated');
                  request.ok(_this8.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: false
                  },
                  optionValuePath: ''
                });

                _context16.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context16.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context16.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context16.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);
                          assert.deepEqual(_this8.model.country, [{
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          }]);

                        case 2:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }))));

              case 10:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x8) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9 Selecting multiple values with creatable as false and removing one choice/value ", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this9.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context21.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context21.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context21.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 9:
                return _context21.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
                  return regeneratorRuntime.wrap(function _callee20$(_context20) {
                    while (1) {
                      switch (_context20.prev = _context20.next) {
                        case 0:
                          _context20.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          return _context20.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                            return regeneratorRuntime.wrap(function _callee19$(_context19) {
                              while (1) {
                                switch (_context19.prev = _context19.next) {
                                  case 0:
                                    _context19.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query field is populated');
                                      request.ok(_this9.choicesList);
                                    });
                                    _context19.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');

                                  case 5:
                                    return _context19.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                                      return regeneratorRuntime.wrap(function _callee18$(_context18) {
                                        while (1) {
                                          switch (_context18.prev = _context18.next) {
                                            case 0:
                                              _context18.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this9.model.country, ["INDIA", "UNITED STATES"], "check 'INDIA' and 'UNITED STATES' is selected");
                                              _context18.next = 5;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                            case 5:
                                              return _context18.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                                                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                                                  while (1) {
                                                    switch (_context17.prev = _context17.next) {
                                                      case 0:
                                                        assert.deepEqual(_this9.model.country, ["UNITED STATES"], "check 'UNITED STATES' is remaining in model");

                                                      case 1:
                                                      case "end":
                                                        return _context17.stop();
                                                    }
                                                  }
                                                }, _callee17);
                                              }))));

                                            case 6:
                                            case "end":
                                              return _context18.stop();
                                          }
                                        }
                                      }, _callee18);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context19.stop();
                                }
                              }
                            }, _callee19);
                          }))));

                        case 3:
                        case "end":
                          return _context20.stop();
                      }
                    }
                  }, _callee20);
                }))));

              case 10:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x9) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST10 Checking for not creating a new choice", /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                assert.expect(2);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context23.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                _context23.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');
                  request.ok(_this10.choicesList);
                });
                _context23.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');

              case 9:
                return _context23.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
                  return regeneratorRuntime.wrap(function _callee22$(_context22) {
                    while (1) {
                      switch (_context22.prev = _context22.next) {
                        case 0:
                          assert.notEqual((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "UNITED KINGDOM"...', "choice 1 'Add \"UNITED KINGDOM\"...'");

                        case 1:
                        case "end":
                          return _context22.stop();
                      }
                    }
                  }, _callee22);
                }))));

              case 10:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      return function (_x10) {
        return _ref22.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST11 Selecting one value with creatable as false and removing the selected choice and checking whether model  is empty ", /*#__PURE__*/function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(assert) {
        var _this11 = this;

        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this11.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context26.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context26.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context26.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 9:
                return _context26.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
                  return regeneratorRuntime.wrap(function _callee25$(_context25) {
                    while (1) {
                      switch (_context25.prev = _context25.next) {
                        case 0:
                          _context25.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this11.model.country, ["INDIA"], "check 'INDIA' is remaining in model");
                          _context25.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context25.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
                            return regeneratorRuntime.wrap(function _callee24$(_context24) {
                              while (1) {
                                switch (_context24.prev = _context24.next) {
                                  case 0:
                                    assert.deepEqual(_this11.model.country, [], "check nothing is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context24.stop();
                                }
                              }
                            }, _callee24);
                          }))));

                        case 6:
                        case "end":
                          return _context25.stop();
                      }
                    }
                  }, _callee25);
                }))));

              case 10:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      return function (_x11) {
        return _ref24.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST12 passing optionTargetPath to render choices and Selecting one value with creatable as false and removing the selected choice and checking whether model  is empty ", /*#__PURE__*/function () {
      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {
        var _this12 = this;

        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                assert.expect(3);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this12.countriesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value',
                  optionTargetPath: 'countries'
                });

                _context29.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context29.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context29.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 9:
                return _context29.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
                  return regeneratorRuntime.wrap(function _callee28$(_context28) {
                    while (1) {
                      switch (_context28.prev = _context28.next) {
                        case 0:
                          _context28.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this12.model.country, ["INDIA"], "check 'INDIA' is remaining in model");
                          _context28.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context28.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
                            return regeneratorRuntime.wrap(function _callee27$(_context27) {
                              while (1) {
                                switch (_context27.prev = _context27.next) {
                                  case 0:
                                    assert.deepEqual(_this12.model.country, [], "check nothing is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context27.stop();
                                }
                              }
                            }, _callee27);
                          }))));

                        case 6:
                        case "end":
                          return _context28.stop();
                      }
                    }
                  }, _callee28);
                }))));

              case 10:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      return function (_x12) {
        return _ref27.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "ember-test-helpers/wait", "dummy/tests/helpers/create-field", "ember-cli-fake-server", "dummy/tests/helpers/ember-power-select"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _wait, _createField, _emberCliFakeServer, _emberPowerSelect) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 3
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: Ember.A(["JAPAN"])
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "× JAPAN", "Field renderd with value 'JAPAN'");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'shortCode'
                });

                this.model = {
                  country: Ember.A([{
                    id: 'country_1',
                    value: 'INDIA',
                    shortCode: 'IND',
                    position: 5
                  }])
                };
                _context4.next = 5;
                return _createField.default.renderForm();

              case 5:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "× IND", "Field renderd with value 'IND'");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: Ember.A([{
                    id: 'country_5',
                    value: 'UNITED STATES',
                    shortCode: 'USA',
                    position: 5
                  }])
                };
                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "× UNITED STATES", "Field renderd with value 'UNITED STATES'");

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 creatable='false' multiple='true' passing one option as default and selecting another option and removing one choice/value ", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(4);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: ['UNITED STATES']
                };
                _context9.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });
                _context9.next = 10;
                return (0, _emberPowerSelect.clickTrigger)();

              case 10:
                _context9.next = 12;
                return (0, _emberPowerSelect.typeInSearch)('INDIA');

              case 12:
                return _context9.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.deepEqual(_this.model.country, ["UNITED STATES", "INDIA"], "check 'INDIA' and 'UNITED STATES' is selected");
                          _context8.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 5:
                          return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                              while (1) {
                                switch (_context7.prev = _context7.next) {
                                  case 0:
                                    assert.deepEqual(_this.model.country, ["INDIA"], "check 'INDIA' is remaining in model");

                                  case 1:
                                  case "end":
                                    return _context7.stop();
                                }
                              }
                            }, _callee7);
                          }))));

                        case 6:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }))));

              case 13:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 creatable='false' multiple='true' passing one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: ['UNITED STATES']
                };
                _context11.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context11.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context11.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          assert.deepEqual(_this2.model.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }))));

              case 10:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x5) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 creatable='false' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty ", /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  country: ['UNITED STATES']
                };
                _context13.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                assert.deepEqual(this.model.country, ["UNITED STATES"], "check 'UNITED STATES' is selected");
                _context13.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

              case 9:
                return _context13.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          assert.deepEqual(_this3.model.country, [], "check whether model is empty");

                        case 1:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12);
                }))));

              case 10:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x6) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete/custom/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this, {
                  custom: true
                });

                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                          assert.equal(_this.model.customField.country, undefined, "no value set on model");

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 when clicked dropdown is shown for searching", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(4);

                _createField.default.autoComplete(this, {
                  custom: true
                });

                this.model = {
                  customField: {}
                };
                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context4.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "Type to search", "default search message 'Type to search' appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                          assert.equal(_this2.model.customField.country, undefined, "no value set on model");

                        case 4:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context6.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context6.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context6.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JAPAN", "choice 5 is 'JAPAN'");
                          assert.equal(_this3.model.customField.country, undefined, "no value set on model");

                        case 7:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 11:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(8);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionLabelPath: 'shortCode'
                });

                this.model = {
                  customField: {}
                };
                _context8.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context8.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context8.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context8.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "IND", "choice 1 is 'IND'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "USA", "choice 2 is 'USA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHN", "choice 3 is 'CHN'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "LKA", "choice 4 is 'LKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JPN", "choice 5 is 'JPN'");
                          assert.equal(_this4.model.customField.country, undefined, "no value set on model");

                        case 7:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionValuePath='value' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this5.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context10.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context10.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context10.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(_this5.model.customField.country, "INDIA");

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionValuePath='shortCode' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this6.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionValuePath: 'shortCode',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context12.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context12.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context12.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context12.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);

                        case 2:
                          assert.equal(_this6.model.customField.country, "CHN");

                        case 3:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 optionValuePath='id' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this7.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionValuePath: 'id',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context14.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context14.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context14.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context14.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);

                        case 2:
                          assert.equal(_this7.model.customField.country, "country_3");

                        case 3:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 11:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x7) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 optionValuePath='' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this8.choicesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context16.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context16.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context16.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context16.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          _context15.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);

                        case 2:
                          assert.deepEqual(_this8.model.customField.country, {
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          });

                        case 3:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }))));

              case 11:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x8) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9  passing optionTargetPath to render choices and check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this9.countriesList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionValuePath: '',
                  optionLabelPath: 'value',
                  optionTargetPath: 'countries'
                });

                this.model = {
                  customField: {}
                };
                _context18.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context18.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context18.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 10:
                return _context18.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                  return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          _context17.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);

                        case 2:
                          assert.deepEqual(_this9.model.customField.country, {
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          });

                        case 3:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }))));

              case 11:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x9) {
        return _ref17.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete/custom/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
    });
    hooks.afterEach(function () {});
    (0, _qunit.test)("#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {
                    "country": "INDIA"
                  }
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "INDIA", "Field renderd with value 'INDIA'");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionLabelPath: 'shortCode',
                  optionValuePath: ''
                });

                this.model = {
                  customField: {
                    country: {
                      id: 'country_5',
                      value: 'JAPAN',
                      shortCode: 'JPN',
                      position: 5
                    }
                  }
                };
                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "JPN", "Field renderd with value 'JPN'");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  custom: true,
                  optionLabelPath: 'value',
                  optionValuePath: ''
                });

                this.model = {
                  customField: {
                    country: {
                      id: 'country_5',
                      value: 'UNITED STATES',
                      shortCode: 'USA',
                      position: 5
                    }
                  }
                };
                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
      Ember.setProperties(this, {
        countriesList: {
          countries: [{
            id: 'country_1',
            value: 'INDIA',
            shortCode: 'IND',
            position: 1
          }, {
            id: 'country_2',
            value: 'UNITED STATES',
            shortCode: 'USA',
            position: 2
          }, {
            id: 'country_3',
            value: 'CHINA',
            shortCode: 'CHN',
            position: 3
          }, {
            id: 'country_4',
            value: 'SRI LANKA',
            shortCode: 'LKA',
            position: 4
          }, {
            id: 'country_5',
            value: 'JAPAN',
            shortCode: 'JPN',
            position: 5
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 check if the auto-complete field renders", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);

                _createField.default.autoComplete(this);

                _context2.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 2:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 when clicked dropdown is shown for searching", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this);

                _context4.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                _context4.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, "Type to search", "default search message 'Type to search' appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(7);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });

                _createField.default.autoComplete(this, {
                  optionLabelPath: 'value'
                });

                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context6.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context6.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "INDIA", "choice 1 is 'INDIA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHINA", "choice 3 is 'CHINA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JAPAN", "choice 5 is 'JAPAN'");

                        case 6:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(7);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
                  request.ok(_this2.choicesList);
                });

                _createField.default.autoComplete(this, {
                  optionLabelPath: 'shortCode'
                });

                _context8.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context8.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context8.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context8.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "IND", "choice 1 is 'IND'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "USA", "choice 2 is 'USA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHN", "choice 3 is 'CHN'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "LKA", "choice 4 is 'LKA'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JPN", "choice 5 is 'JPN'");

                        case 6:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 optionValuePath='value' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this3.choicesList);
                });

                _createField.default.autoComplete(this, {
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                _context10.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context10.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context10.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(_this3.model.country, "INDIA");

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 10:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 optionValuePath='shortCode' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this4.choicesList);
                });

                _createField.default.autoComplete(this, {
                  optionValuePath: 'shortCode',
                  optionLabelPath: 'value'
                });

                _context12.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context12.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context12.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context12.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);

                        case 2:
                          assert.equal(_this4.model.country, "CHN");

                        case 3:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 10:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 optionValuePath='id' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this5.choicesList);
                });

                _createField.default.autoComplete(this, {
                  optionValuePath: 'id',
                  optionLabelPath: 'value'
                });

                _context14.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context14.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context14.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context14.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);

                        case 2:
                          assert.equal(_this5.model.country, "country_3");

                        case 3:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))));

              case 10:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x7) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 optionValuePath='' check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this6.choicesList);
                });

                _createField.default.autoComplete(this, {
                  optionLabelPath: 'value',
                  optionValuePath: ''
                });

                _context16.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context16.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context16.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context16.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                  return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          _context15.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);

                        case 2:
                          assert.deepEqual(_this6.model.country, {
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          });

                        case 3:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }))));

              case 10:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x8) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9 passing optionTargetPath to render choices and check selected option is saved on the model", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this7.countriesList);
                });

                _createField.default.autoComplete(this, {
                  optionLabelPath: 'value',
                  optionValuePath: '',
                  optionTargetPath: 'countries'
                });

                _context18.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context18.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context18.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context18.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                  return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          _context17.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);

                        case 2:
                          assert.deepEqual(_this7.model.country, {
                            "id": "country_5",
                            "position": 5,
                            "shortCode": "JPN",
                            "value": "JAPAN"
                          });

                        case 3:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }))));

              case 10:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x9) {
        return _ref17.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the auto-complete component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "여보세요";

                _createField.default.autoComplete(this, {
                  label: sampleLabel
                });

                _context19.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      return function (_x10) {
        return _ref19.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/auto-complete/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 3
        }]
      });
    });
    hooks.afterEach(function () {});
    (0, _qunit.test)("#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: "INDIA"
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "INDIA", "Field renderd with value 'INDIA'");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  optionValuePath: '',
                  optionLabelPath: 'shortCode'
                });

                this.model = {
                  country: {
                    id: 'country_5',
                    value: 'JAPAN',
                    shortCode: 'JPN',
                    position: 5
                  }
                };
                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "JPN", "Field renderd with value 'JPN'");

                        case 1:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);

                _createField.default.autoComplete(this, {
                  optionValuePath: '',
                  optionLabelPath: 'value'
                });

                this.model = {
                  country: {
                    id: 'country_5',
                    value: 'UNITED STATES',
                    shortCode: 'USA',
                    position: 5
                  }
                };
                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED STATES", "Field renderd with value 'UNITED STATES'");

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/component-test", ["ember-data", "qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/string-helper-methods"], function (_emberData, _qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  var PromiseArray = _emberData.default.PromiseArray;
  (0, _qunit.module)('Integration | Component | form fields/auto complete', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      this.renderDefaultField = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      this.renderCustomField = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    });
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        searchMethod: function searchMethod(term) {
          var _this = this;

          var url = encodeURI(Ember.get(this, 'url'));
          var path = encodeURIComponent(Ember.get(this, 'optionLabelPath'));
          term = encodeURIComponent(term);
          url = /\?.+=/.test(url) ? "".concat(url, "&q=").concat(term, "&qf=").concat(path) : "".concat(url, "?q=").concat(term, "&qfield=").concat(path);
          var options = PromiseArray.create({
            promise: new Ember.RSVP.Promise(function (resolve, reject) {
              Ember.run.debounce(_this, function () {
                Ember.$.getJSON(url).then(function (json) {
                  return resolve(json);
                }, reject);
              }, Ember.get(_this, 'searchDebounce'));
            })
          });
          Ember.set(this, 'options', options);
          return options;
        },
        defaultFieldModel: {},
        customFieldModel: {
          customField: {}
        },
        defaultFieldSchema: {
          name: 'Sample Contact Form',
          fields: [{
            id: 'company_id',
            parent: null,
            type: 'auto_complete',
            label: 'Company',
            hint: 'Enter_company_name',
            name: 'company',
            position: 1,
            editable: true,
            custom: false,
            inputType: 'auto-complete',
            fieldOptions: {},
            fields: [],
            link: 'url/search',
            optionValuePath: 'id',
            optionLabelPath: 'id'
          }]
        },
        customFieldSchema: {
          name: 'Sample Contact Form',
          fields: [{
            id: 'company_id',
            parent: null,
            type: 'auto_complete',
            label: 'Company',
            hint: 'Enter_company_name',
            name: 'cf_company',
            position: 1,
            editable: true,
            custom: true,
            inputType: 'auto-complete',
            fieldOptions: {},
            fields: [],
            link: 'url/search',
            optionValuePath: 'value',
            optionLabelPath: 'value'
          }]
        },
        customSectionSchema: {
          name: 'Sample Contact Form',
          fields: [{
            id: 'section_id',
            parent: null,
            type: 'section',
            label: 'Parent Company',
            name: 'cf_parent_company',
            position: 1,
            editable: true,
            custom: true,
            inputType: 'nested-section',
            fieldOptions: {},
            fields: [{
              id: 'company_id',
              parent: null,
              type: 'auto_complete',
              parent_id: 'section_id',
              label: 'Company',
              name: 'cf_company',
              position: 1,
              editable: true,
              custom: true,
              inputType: 'auto-complete',
              fields: [],
              link: 'url/search',
              optionValuePath: 'value',
              optionLabelPath: 'value'
            }]
          }]
        },
        autocompleteAsDependentFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'has_company_id',
            parent: null,
            type: 'dropdown',
            label: 'Has Company',
            name: 'has_company',
            position: 1,
            editable: true,
            custom: false,
            inputType: 'power-select-dependent-field',
            placeholder: '',
            fieldOptions: {
              dependent: true
            },
            getChoices: [{
              id: "yes_id",
              value: "Yes",
              position: 1,
              dependentIds: {
                field: ["company_id"],
                choice: []
              }
            }, {
              id: "no_id",
              value: "No",
              position: 2,
              dependentIds: {
                field: [],
                choice: []
              }
            }],
            fields: [{
              id: 'company_id',
              parent: null,
              type: 'auto_complete',
              label: 'Company',
              name: 'company',
              position: 1,
              editable: true,
              custom: false,
              inputType: 'auto-complete',
              fieldOptions: {},
              fields: [],
              link: 'url/search',
              optionValuePath: 'id',
              optionLabelPath: 'id'
            }],
            optionValuePath: 'id',
            optionLabelPath: 'id'
          }]
        },
        choicesList: [{
          id: 'contact_1',
          value: 'sam',
          position: 1
        }, {
          id: 'contact_2',
          value: 'joe',
          position: 2
        }, {
          id: 'contact_3',
          value: 'tim',
          position: 3
        }]
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)('auto-complete (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(4);
                _context3.next = 3;
                return this.renderDefaultField();

              case 3:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'defaultFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_company_name', 'Hint for the field renders properly');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(4);
                _context4.next = 3;
                return this.renderDefaultField();

              case 3:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'customFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_company_name', 'Hint for the field renders properly');

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render results after typing a term, optionLabelPath is value', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(3);
                _context6.next = 3;
                return this.renderCustomField();

              case 3:
                _context6.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });
                _context6.next = 8;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);

              case 8:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this2.choicesList.length, "results are loaded");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this2.choicesList[0].value, "optionlabel path is honoured");

                        case 2:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('should render results after typing a term, optionLabelPath is id', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(3);
                _context7.next = 3;
                return this.renderDefaultField();

              case 3:
                _context7.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=contact_1&qf=id', 'query field is populated');
                  request.ok(_this3.choicesList);
                });
                _context7.next = 8;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);

              case 8:
                return _context7.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this3.choicesList.length, "results are loaded");
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this3.choicesList[0].id, "optionlabel path is honoured");
                }));

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x4) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('query url construction is proper when original url is simple', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);
                _context8.next = 3;
                return this.renderCustomField();

              case 3:
                _context8.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=contact_1&qf=value');
                  request.ok({});
                });
                _context8.next = 8;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);

              case 8:
                return _context8.abrupt("return", (0, _testHelpers.settled)());

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('query url construction is proper when original url already has queryparams', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'customFieldSchema.fields.0.link', 'url/search?otherParams=2');
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                _context9.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?otherParams=2&q=contact_1&qf=value');
                  request.ok({});
                });
                _context9.next = 9;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);

              case 9:
                return _context9.abrupt("return", (0, _testHelpers.settled)());

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x6) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Handle link that is not urlsafe', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'customFieldSchema.fields.0.link', 'url/%search%');
                _context10.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                _context10.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/%search%'), function (request) {
                  assert.equal(request.url, encodeURI('url/%search%?q=contact_1&qf=value'));
                  request.ok(_this4.choicesList);
                });
                _context10.next = 9;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);

              case 9:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this4.choicesList.length, "results are loaded");
                }));

              case 10:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x7) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Handle link with queryparams that is not urlsafe', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'customFieldSchema.fields.0.link', 'url/search?qd=%123 435');
                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "BMpoJNP7",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                _context11.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  assert.equal(request.url, encodeURI('url/search?qd=%123 435&q=contact_1&qf=value'));
                  request.ok(_this5.choicesList);
                });
                _context11.next = 9;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);

              case 9:
                return _context11.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this5.choicesList.length, "results are loaded");
                }));

              case 10:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x8) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Search a term that is not urlsafe', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(2);
                _context13.next = 3;
                return this.renderCustomField();

              case 3:
                _context13.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  assert.equal("url/search?q=".concat(encodeURIComponent('%asd%&'), "&qf=value"), request.url);
                  request.ok(_this6.choicesList);
                });
                _context13.next = 8;
                return (0, _emberPowerSelect.typeInSearch)('%asd%&');

              case 8:
                return _context13.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, "Results are loaded");

                        case 1:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12);
                }))));

              case 9:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x9) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Select one of the listed choices when optionLabelPath is value', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(2);
                _context15.next = 3;
                return this.renderCustomField();

              case 3:
                _context15.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok(_this7.choicesList);
                });
                _context15.next = 8;
                return (0, _emberPowerSelect.typeInSearch)('tim');

              case 8:
                return _context15.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          _context14.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, _this7.choicesList[1].value);
                          assert.equal(_this7.customFieldModel.customField.cf_company, _this7.choicesList[1].value);

                        case 4:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))));

              case 9:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x10) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Select one of the listed choices when optionLabelPath is id', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                assert.expect(2);
                _context17.next = 3;
                return this.renderDefaultField();

              case 3:
                _context17.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok(_this8.choicesList);
                });
                _context17.next = 8;
                return (0, _emberPowerSelect.typeInSearch)('tim');

              case 8:
                return _context17.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                  return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                      switch (_context16.prev = _context16.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, _this8.choicesList[2].id);
                          assert.equal(_this8.defaultFieldModel.company, _this8.choicesList[2].id);

                        case 3:
                        case "end":
                          return _context16.stop();
                      }
                    }
                  }, _callee16);
                }))));

              case 9:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x11) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Select one of the listed choices when choice id is integer', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                assert.expect(3);
                Ember.set(this, 'choicesList.0.id', '1');
                _context19.next = 4;
                return this.renderDefaultField();

              case 4:
                _context19.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok(_this9.choicesList);
                });
                _context19.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('tim');

              case 9:
                return _context19.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                  return regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                      switch (_context18.prev = _context18.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, "results are loaded");
                          _context18.next = 3;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 3:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, _this9.choicesList[0].id);
                          assert.equal(_this9.defaultFieldModel.company, _this9.choicesList[0].id);

                        case 5:
                        case "end":
                          return _context18.stop();
                      }
                    }
                  }, _callee18);
                }))));

              case 10:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      return function (_x12) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('default-field: Select one of the listed choices when choices are an array of strings and not objects', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                assert.expect(3);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', '');
                _context21.next = 5;
                return this.renderDefaultField();

              case 5:
                _context21.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok(["firstChoice", "secondChoice", "thirdChoice"]);
                });
                _context21.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('tim');

              case 10:
                return _context21.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
                  return regeneratorRuntime.wrap(function _callee20$(_context20) {
                    while (1) {
                      switch (_context20.prev = _context20.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, "results are loaded");
                          _context20.next = 3;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);

                        case 3:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, "thirdChoice");
                          assert.equal(_this10.defaultFieldModel.company, "thirdChoice");

                        case 5:
                        case "end":
                          return _context20.stop();
                      }
                    }
                  }, _callee20);
                }))));

              case 11:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x13) {
        return _ref21.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('custom-field: Select one of the listed choices when choices are an array of strings and not objects', /*#__PURE__*/function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
        var _this11 = this;

        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                assert.expect(3);
                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.optionLabelPath', '');
                _context23.next = 5;
                return this.renderCustomField();

              case 5:
                _context23.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok(["firstChoice", "secondChoice", "thirdChoice"]);
                });
                _context23.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('tim');

              case 10:
                return _context23.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
                  return regeneratorRuntime.wrap(function _callee22$(_context22) {
                    while (1) {
                      switch (_context22.prev = _context22.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, "results are loaded");
                          _context22.next = 3;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);

                        case 3:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, "thirdChoice");
                          assert.equal(_this11.customFieldModel.customField.cf_company, "thirdChoice");

                        case 5:
                        case "end":
                          return _context22.stop();
                      }
                    }
                  }, _callee22);
                }))));

              case 11:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      return function (_x14) {
        return _ref23.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('After Passing fieldActions, it should render results', /*#__PURE__*/function () {
      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {
        var _this12 = this;

        var actionsJSON;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                assert.expect(3);
                actionsJSON = {
                  'auto_complete': {
                    'search': Ember.get(this, 'searchMethod')
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context25.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2wbDHtq+",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                _context25.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=sam&qfield=value', 'query field is populated');
                  request.ok(_this12.choicesList);
                });
                _context25.next = 10;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);

              case 10:
                return _context25.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
                  return regeneratorRuntime.wrap(function _callee24$(_context24) {
                    while (1) {
                      switch (_context24.prev = _context24.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this12.choicesList.length, "results are loaded");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this12.choicesList[0].value, "optionlabel path is honoured");

                        case 2:
                        case "end":
                          return _context24.stop();
                      }
                    }
                  }, _callee24);
                }))));

              case 11:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      return function (_x15) {
        return _ref25.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('After Passing fieldActions, it should render results when auto-complete is a child field', /*#__PURE__*/function () {
      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {
        var _this13 = this;

        var actionsJSON;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                assert.expect(3);
                actionsJSON = {
                  'auto_complete': {
                    'search': Ember.get(this, 'searchMethod')
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context27.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "nx2UVkop",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customSectionSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                _context27.next = 7;
                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="customField.cf_company"]');

              case 7:
                _context27.next = 9;
                return (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=sam&qfield=value', 'query field is populated');
                  request.ok(_this13.choicesList);
                });

              case 9:
                _context27.next = 11;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);

              case 11:
                return _context27.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
                  return regeneratorRuntime.wrap(function _callee26$(_context26) {
                    while (1) {
                      switch (_context26.prev = _context26.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this13.choicesList.length, "results are loaded");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this13.choicesList[0].value, "optionlabel path is honoured");

                        case 2:
                        case "end":
                          return _context26.stop();
                      }
                    }
                  }, _callee26);
                }))));

              case 12:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      return function (_x16) {
        return _ref27.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Autocomplete(creatable): Passing callback function using fieldActions, it should execute callback function when new choice is created and selected', /*#__PURE__*/function () {
      var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {
        var _this14 = this;

        var callbackfun, actionsJSON;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {
                  'multiple': false,
                  'creatable': true
                });

                callbackfun = function callbackfun() {
                  assert.ok(true, "This assert statement is expected to be invoked.");
                };

                actionsJSON = {
                  'auto_complete': {
                    'creatable': {
                      'createNewOptionCallback': callbackfun
                    }
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context29.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2wbDHtq+",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context29.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');
                  request.ok(_this14.choicesList);
                });
                _context29.next = 12;
                return (0, _emberPowerSelect.typeInSearch)("India");

              case 12:
                return _context29.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
                  return regeneratorRuntime.wrap(function _callee28$(_context28) {
                    while (1) {
                      switch (_context28.prev = _context28.next) {
                        case 0:
                          _context28.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                        case "end":
                          return _context28.stop();
                      }
                    }
                  }, _callee28);
                }))));

              case 13:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      return function (_x17) {
        return _ref29.apply(this, arguments);
      };
    }());
    (0, _qunit.test)(' Autocomplete(multiple-with-create): Passing callback function using fieldActions, it should execute callback function when new choice is created and selected', /*#__PURE__*/function () {
      var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(assert) {
        var _this15 = this;

        var callbackfun, actionsJSON;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });

                callbackfun = function callbackfun() {
                  assert.ok(true, "This assert statement is expected to be invoked.");
                };

                actionsJSON = {
                  'auto_complete': {
                    'multiple_with_creatable': {
                      'createNewOptionCallback': callbackfun
                    }
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context31.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2wbDHtq+",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context31.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');
                  request.ok(_this15.choicesList);
                });
                _context31.next = 12;
                return (0, _emberPowerSelect.typeInSearch)("India");

              case 12:
                return _context31.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
                  return regeneratorRuntime.wrap(function _callee30$(_context30) {
                    while (1) {
                      switch (_context30.prev = _context30.next) {
                        case 0:
                          _context30.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                        case "end":
                          return _context30.stop();
                      }
                    }
                  }, _callee30);
                }))));

              case 13:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      return function (_x18) {
        return _ref31.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Autocomplete(creatable): Passing callback function using fieldActions, it should not execute callback function when exisiting choice is selected', /*#__PURE__*/function () {
      var _ref33 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(assert) {
        var _this16 = this;

        var callbackfun, actionsJSON;
        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {
                  'multiple': false,
                  'creatable': true
                });

                callbackfun = function callbackfun() {
                  assert.ok(false, "This assert statement is not expected to be invoked.");
                };

                actionsJSON = {
                  'auto_complete': {
                    'creatable': {
                      'createNewOptionCallback': callbackfun
                    }
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context33.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2wbDHtq+",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context33.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');
                  request.ok(_this16.choicesList);
                });
                _context33.next = 12;
                return (0, _emberPowerSelect.typeInSearch)("India");

              case 12:
                return _context33.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
                  return regeneratorRuntime.wrap(function _callee32$(_context32) {
                    while (1) {
                      switch (_context32.prev = _context32.next) {
                        case 0:
                          _context32.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                        case 2:
                        case "end":
                          return _context32.stop();
                      }
                    }
                  }, _callee32);
                }))));

              case 13:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      return function (_x19) {
        return _ref33.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Autocomplete(multiple-with-create): Passing callback function using fieldActions, it should execute callback function when existing choice is selected', /*#__PURE__*/function () {
      var _ref35 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35(assert) {
        var _this17 = this;

        var callbackfun, actionsJSON;
        return regeneratorRuntime.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });

                callbackfun = function callbackfun() {
                  assert.ok(false, "This assert statement is not expected to be invoked.");
                };

                actionsJSON = {
                  'auto_complete': {
                    'multiple_with_creatable': {
                      'createNewOptionCallback': callbackfun
                    }
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context35.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2wbDHtq+",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context35.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');
                  request.ok(_this17.choicesList);
                });
                _context35.next = 12;
                return (0, _emberPowerSelect.typeInSearch)("India");

              case 12:
                return _context35.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
                  return regeneratorRuntime.wrap(function _callee34$(_context34) {
                    while (1) {
                      switch (_context34.prev = _context34.next) {
                        case 0:
                          _context34.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                        case 2:
                        case "end":
                          return _context34.stop();
                      }
                    }
                  }, _callee34);
                }))));

              case 13:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      return function (_x20) {
        return _ref35.apply(this, arguments);
      };
    }());
    (0, _qunit.test)(' Passing callback function using fieldActions, it should not execute callback function because creatable is false', /*#__PURE__*/function () {
      var _ref37 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(assert) {
        var _this18 = this;

        var callbackfun, actionsJSON;
        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {
                  'multiple': false,
                  'creatable': false
                });

                callbackfun = function callbackfun() {
                  assert.ok(false, "This assert statement is not expected to be invoked.");
                };

                actionsJSON = {
                  'auto_complete': {
                    'creatable': {
                      'createNewOptionCallback': callbackfun
                    }
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context37.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2wbDHtq+",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context37.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');
                  request.ok(_this18.choicesList);
                });
                _context37.next = 12;
                return (0, _emberPowerSelect.typeInSearch)("India");

              case 12:
                return _context37.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
                  return regeneratorRuntime.wrap(function _callee36$(_context36) {
                    while (1) {
                      switch (_context36.prev = _context36.next) {
                        case 0:
                          _context36.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                        case "end":
                          return _context36.stop();
                      }
                    }
                  }, _callee36);
                }))));

              case 13:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      return function (_x21) {
        return _ref37.apply(this, arguments);
      };
    }());
    (0, _qunit.test)(' Autocomplete(multiple): Passing callback function using fieldActions, it should execute callback function because creatable is false', /*#__PURE__*/function () {
      var _ref39 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39(assert) {
        var _this19 = this;

        var callbackfun, actionsJSON;
        return regeneratorRuntime.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': false
                });

                callbackfun = function callbackfun() {
                  assert.ok(false, "This assert statement is not expected to be invoked.");
                };

                actionsJSON = {
                  'auto_complete': {
                    'multiple_with_creatable': {
                      'createNewOptionCallback': callbackfun
                    }
                  }
                };
                Ember.set(this, 'fieldActions', actionsJSON);
                _context39.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "2wbDHtq+",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldActions\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldActions\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context39.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');
                  request.ok(_this19.choicesList);
                });
                _context39.next = 12;
                return (0, _emberPowerSelect.typeInSearch)("India");

              case 12:
                return _context39.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
                  return regeneratorRuntime.wrap(function _callee38$(_context38) {
                    while (1) {
                      switch (_context38.prev = _context38.next) {
                        case 0:
                          _context38.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                        case 2:
                        case "end":
                          return _context38.stop();
                      }
                    }
                  }, _callee38);
                }))));

              case 13:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      return function (_x22) {
        return _ref39.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Apps can dynamically add a new choice in creatable auto-complete', /*#__PURE__*/function () {
      var _ref41 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(assert) {
        var _this20 = this;

        return regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.creatable', true);
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.creatableDataKey', 'company_new_choice');
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok(_this20.choicesList);
                });
                _context41.next = 7;
                return this.renderDefaultField();

              case 7:
                _context41.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context41.next = 11;
                return (0, _emberPowerSelect.typeInSearch)('john');

              case 11:
                return _context41.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {
                  return regeneratorRuntime.wrap(function _callee40$(_context40) {
                    while (1) {
                      switch (_context40.prev = _context40.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add "john"...', '1st option shows \'Add "john"...\'');

                        case 1:
                        case "end":
                          return _context40.stop();
                      }
                    }
                  }, _callee40);
                }))));

              case 12:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));

      return function (_x23) {
        return _ref41.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (optionValuePath=\'\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {
      var _ref43 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42(assert) {
        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldModel.company', this.choicesList[1]);
                _context42.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, this.choicesList[1].value);
                assert.equal(this.defaultFieldModel.company, this.choicesList[1]);

              case 8:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      return function (_x24) {
        return _ref43.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (optionValuePath=\'value\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {
      var _ref44 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43(assert) {
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');
                Ember.set(this, 'defaultFieldModel.company', 'joe');
                _context43.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, this.choicesList[1].value);
                assert.equal(this.defaultFieldModel.company, this.choicesList[1].value);

              case 8:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));

      return function (_x25) {
        return _ref44.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref45 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44(assert) {
        return regeneratorRuntime.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                assert.expect(3);
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                _context44.next = 4;
                return this.renderDefaultField();

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'defaultFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

              case 7:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));

      return function (_x26) {
        return _ref45.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref46 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45(assert) {
        return regeneratorRuntime.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                assert.expect(3);
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                _context45.next = 4;
                return this.renderCustomField();

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'customFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');

              case 7:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      return function (_x27) {
        return _ref46.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'value\'): should not show create option, when choice already exists in dropdown', /*#__PURE__*/function () {
      var _ref47 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(assert) {
        var _this21 = this;

        return regeneratorRuntime.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                assert.expect(11);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                _context48.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');
                  request.ok(_this21.choicesList);
                });
                _context48.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context48.next = 11;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);

              case 11:
                return _context48.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee47$(_context47) {
                    while (1) {
                      switch (_context47.prev = _context47.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this21.choicesList.length, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this21.choicesList[0].value, 'First option is \'sam\' and not a create option');
                          _context47.next = 4;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 4:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×sam', 'Choice \'sam\' is now selected');
                          assert.equal(Ember.get(_this21, 'defaultFieldModel.company')[0], 'sam', 'Model contains \'sam\' as first value');
                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                            assert.equal(request.url, 'url/search?q=joe&qf=value', 'query field is populated');
                            request.ok(_this21.choicesList);
                          });
                          _context47.next = 10;
                          return (0, _emberPowerSelect.typeInSearch)(_this21.choicesList[1].value);

                        case 10:
                          return _context47.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46() {
                            var optionDomElement;
                            return regeneratorRuntime.wrap(function _callee46$(_context46) {
                              while (1) {
                                switch (_context46.prev = _context46.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this21.choicesList.length - 1, 'results are loaded');
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this21.choicesList[1].value, 'Now first option is \'joe\'');
                                    _context46.next = 4;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 4:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×sam×joe', 'Choices \'sam\' and \'joe\' are now selected');
                                    assert.equal(Ember.get(_this21, 'defaultFieldModel.company')[0], 'sam', 'Model contains \'sam\' as first value');
                                    assert.equal(Ember.get(_this21, 'defaultFieldModel.company')[1], 'joe', 'Model contains \'joe\' as second value');

                                  case 8:
                                  case "end":
                                    return _context46.stop();
                                }
                              }
                            }, _callee46);
                          }))));

                        case 11:
                        case "end":
                          return _context47.stop();
                      }
                    }
                  }, _callee47);
                }))));

              case 12:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));

      return function (_x28) {
        return _ref47.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'\'): should not show create option, when choice already exists in dropdown', /*#__PURE__*/function () {
      var _ref50 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51(assert) {
        var _this22 = this;

        return regeneratorRuntime.wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                assert.expect(11);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                _context51.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');
                  request.ok(_this22.choicesList);
                });
                _context51.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context51.next = 11;
                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);

              case 11:
                return _context51.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee50$(_context50) {
                    while (1) {
                      switch (_context50.prev = _context50.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this22.choicesList.length, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this22.choicesList[0].value, 'First option is \'sam\' and not a create option');
                          _context50.next = 4;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 4:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×sam', 'Choice \'sam\' is now selected');
                          assert.deepEqual(Ember.get(_this22, 'defaultFieldModel.company')[0], _this22.choicesList[0], 'Model contains \'sam\' as first value');
                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                            assert.equal(request.url, 'url/search?q=joe&qf=value', 'query field is populated');
                            request.ok(_this22.choicesList);
                          });
                          _context50.next = 10;
                          return (0, _emberPowerSelect.typeInSearch)(_this22.choicesList[1].value);

                        case 10:
                          return _context50.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49() {
                            var optionDomElement;
                            return regeneratorRuntime.wrap(function _callee49$(_context49) {
                              while (1) {
                                switch (_context49.prev = _context49.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this22.choicesList.length - 1, 'results are loaded');
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this22.choicesList[1].value, 'Now first option is \'joe\'');
                                    _context49.next = 4;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 4:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×sam×joe', 'Choices \'sam\' and \'joe\' are now selected');
                                    assert.deepEqual(Ember.get(_this22, 'defaultFieldModel.company')[0], _this22.choicesList[0], 'Model contains \'sam\' as first value');
                                    assert.deepEqual(Ember.get(_this22, 'defaultFieldModel.company')[1], _this22.choicesList[1], 'Model contains \'joe\' as second value');

                                  case 8:
                                  case "end":
                                    return _context49.stop();
                                }
                              }
                            }, _callee49);
                          }))));

                        case 11:
                        case "end":
                          return _context50.stop();
                      }
                    }
                  }, _callee50);
                }))));

              case 12:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));

      return function (_x29) {
        return _ref50.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'value\'): should show create option, when choice doesn\'t exists in dropdown', /*#__PURE__*/function () {
      var _ref53 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54(assert) {
        var _this23 = this;

        return regeneratorRuntime.wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                assert.expect(11);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                _context54.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=john&qf=value', 'query field is populated');
                  request.ok(_this23.choicesList);
                });
                _context54.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context54.next = 11;
                return (0, _emberPowerSelect.typeInSearch)('john');

              case 11:
                return _context54.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee53$(_context53) {
                    while (1) {
                      switch (_context53.prev = _context53.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this23.choicesList.length + 1, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add "john"...', 'First option is a to add a new option \'john\'');
                          _context53.next = 4;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 4:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×john', 'Choice \'john\' is now selected');
                          assert.equal(Ember.get(_this23, 'defaultFieldModel.company')[0], 'john', 'Model contains \'john\' as first value');
                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                            assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');
                            request.ok(_this23.choicesList);
                          });
                          _context53.next = 10;
                          return (0, _emberPowerSelect.typeInSearch)(_this23.choicesList[0].value);

                        case 10:
                          return _context53.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52() {
                            var optionDomElement;
                            return regeneratorRuntime.wrap(function _callee52$(_context52) {
                              while (1) {
                                switch (_context52.prev = _context52.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this23.choicesList.length, 'results are loaded');
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this23.choicesList[0].value, 'Now first option is \'sam\'');
                                    _context52.next = 4;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 4:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×john×sam', 'Choices \'sam\' and \'joe\' are now selected');
                                    assert.equal(Ember.get(_this23, 'defaultFieldModel.company')[0], 'john', 'Model contains \'john\' as first value');
                                    assert.equal(Ember.get(_this23, 'defaultFieldModel.company')[1], 'sam', 'Model contains \'sam\' as second value');

                                  case 8:
                                  case "end":
                                    return _context52.stop();
                                }
                              }
                            }, _callee52);
                          }))));

                        case 11:
                        case "end":
                          return _context53.stop();
                      }
                    }
                  }, _callee53);
                }))));

              case 12:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54, this);
      }));

      return function (_x30) {
        return _ref53.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'\'): should show create option, when choice doesn\'t exists in dropdown', /*#__PURE__*/function () {
      var _ref56 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57(assert) {
        var _this24 = this;

        return regeneratorRuntime.wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                assert.expect(11);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                _context57.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=john&qf=value', 'query field is populated');
                  request.ok(_this24.choicesList);
                });
                _context57.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context57.next = 11;
                return (0, _emberPowerSelect.typeInSearch)('john');

              case 11:
                return _context57.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56() {
                  var johnObject, optionDomElement;
                  return regeneratorRuntime.wrap(function _callee56$(_context56) {
                    while (1) {
                      switch (_context56.prev = _context56.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this24.choicesList.length + 1, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add "john"...', 'First option is a to add a new option \'john\'');
                          _context56.next = 4;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 4:
                          johnObject = {
                            value: 'john'
                          };
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×john', 'Choice \'john\' is now selected');
                          assert.deepEqual(Ember.get(_this24, 'defaultFieldModel.company')[0], johnObject, 'Model contains \'john\' as first value');
                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                            assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');
                            request.ok(_this24.choicesList);
                          });
                          _context56.next = 11;
                          return (0, _emberPowerSelect.typeInSearch)(_this24.choicesList[0].value);

                        case 11:
                          return _context56.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55() {
                            var optionDomElement;
                            return regeneratorRuntime.wrap(function _callee55$(_context55) {
                              while (1) {
                                switch (_context55.prev = _context55.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this24.choicesList.length, 'results are loaded');
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this24.choicesList[0].value, 'Now first option is \'sam\'');
                                    _context55.next = 4;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 4:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×john×sam', 'Choices \'sam\' and \'joe\' are now selected');
                                    assert.deepEqual(Ember.get(_this24, 'defaultFieldModel.company')[0], johnObject, 'Model contains \'john\' as first value');
                                    assert.deepEqual(Ember.get(_this24, 'defaultFieldModel.company')[1], _this24.choicesList[0], 'Model contains \'sam\' as second value');

                                  case 8:
                                  case "end":
                                    return _context55.stop();
                                }
                              }
                            }, _callee55);
                          }))));

                        case 12:
                        case "end":
                          return _context56.stop();
                      }
                    }
                  }, _callee56);
                }))));

              case 12:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));

      return function (_x31) {
        return _ref56.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'value\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {
      var _ref59 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59(assert) {
        var _this25 = this;

        return regeneratorRuntime.wrap(function _callee59$(_context59) {
          while (1) {
            switch (_context59.prev = _context59.next) {
              case 0:
                assert.expect(9);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                Ember.set(this, 'defaultFieldModel.company', ['joe', 'john']);
                _context59.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=emma&qf=value', 'query field is populated');
                  request.ok(_this25.choicesList);
                });
                _context59.next = 10;
                return (0, _emberPowerSelect.clickTrigger)();

              case 10:
                _context59.next = 12;
                return (0, _emberPowerSelect.typeInSearch)('emma');

              case 12:
                return _context59.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee58$(_context58) {
                    while (1) {
                      switch (_context58.prev = _context58.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this25.choicesList.length, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add "emma"...', 'First option is a to add a new option \'emma\'');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1].innerText, 'sam', 'Second option is \'sam\'');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2].innerText, 'tim', 'Second option is \'tim\'');
                          _context58.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 6:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×joe×john×emma', 'Choices \'joe\', \'john\' and \'emma\' are now selected');
                          assert.equal(Ember.get(_this25, 'defaultFieldModel.company')[0], 'joe', 'Model contains \'joe\' as first value');
                          assert.equal(Ember.get(_this25, 'defaultFieldModel.company')[1], 'john', 'Model contains \'john\' as second value');
                          assert.equal(Ember.get(_this25, 'defaultFieldModel.company')[2], 'emma', 'Model contains \'emma\' as last value');

                        case 11:
                        case "end":
                          return _context58.stop();
                      }
                    }
                  }, _callee58);
                }))));

              case 13:
              case "end":
                return _context59.stop();
            }
          }
        }, _callee59, this);
      }));

      return function (_x32) {
        return _ref59.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {
      var _ref61 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee61(assert) {
        var _this26 = this;

        var data, johnObject;
        return regeneratorRuntime.wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                assert.expect(9);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                data = [];
                johnObject = {
                  id: 'contact_4',
                  value: 'john',
                  position: 4
                };
                data.push(this.choicesList[1]);
                data.push(johnObject);
                Ember.set(this, 'defaultFieldModel.company', data);
                _context61.next = 11;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 11:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=emma&qf=value', 'query field is populated');
                  request.ok(_this26.choicesList);
                });
                _context61.next = 14;
                return (0, _emberPowerSelect.clickTrigger)();

              case 14:
                _context61.next = 16;
                return (0, _emberPowerSelect.typeInSearch)('emma');

              case 16:
                return _context61.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60() {
                  var emmaObject, optionDomElement;
                  return regeneratorRuntime.wrap(function _callee60$(_context60) {
                    while (1) {
                      switch (_context60.prev = _context60.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this26.choicesList.length, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add "emma"...', 'First option is a to add a new option \'emma\'');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1].innerText, 'sam', 'Second option is \'sam\'');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2].innerText, 'tim', 'Second option is \'tim\'');
                          _context60.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 6:
                          emmaObject = {
                            value: 'emma'
                          };
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×joe×john×emma', 'Choices \'joe\', \'john\' and \'emma\' are now selected');
                          assert.deepEqual(Ember.get(_this26, 'defaultFieldModel.company')[0], _this26.choicesList[1], 'Model contains \'joe\' as first value');
                          assert.deepEqual(Ember.get(_this26, 'defaultFieldModel.company')[1], johnObject, 'Model contains \'john\' as second value');
                          assert.deepEqual(Ember.get(_this26, 'defaultFieldModel.company')[2], emmaObject, 'Model contains \'emma\' as last value');

                        case 12:
                        case "end":
                          return _context60.stop();
                      }
                    }
                  }, _callee60);
                }))));

              case 17:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61, this);
      }));

      return function (_x33) {
        return _ref61.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'\'): works properly when made a dependent field', /*#__PURE__*/function () {
      var _ref63 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee64(assert) {
        var _this27 = this;

        return regeneratorRuntime.wrap(function _callee64$(_context64) {
          while (1) {
            switch (_context64.prev = _context64.next) {
              case 0:
                assert.expect(11);
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                _context64.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Sw9GAbfG",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"autocompleteAsDependentFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=john&qf=value', 'query field is populated');
                  request.ok(_this27.choicesList);
                });
                _context64.next = 11;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="hasCompany"] .ember-power-select-trigger')[0]);

              case 11:
                _context64.next = 13;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="hasCompany"] .ember-power-select-trigger')[0], 13);

              case 13:
                _context64.next = 15;
                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="company"]');

              case 15:
                _context64.next = 17;
                return (0, _emberPowerSelect.typeInSearch)('john');

              case 17:
                return _context64.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee63() {
                  var johnObject, optionDomElement;
                  return regeneratorRuntime.wrap(function _callee63$(_context63) {
                    while (1) {
                      switch (_context63.prev = _context63.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this27.choicesList.length + 1, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add "john"...', 'First option is a to add a new option \'john\'');
                          _context63.next = 4;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 4:
                          johnObject = {
                            value: 'john'
                          };
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×john', 'Choice \'john\' is now selected');
                          assert.deepEqual(Ember.get(_this27, 'defaultFieldModel.company')[0], johnObject, 'Model contains \'john\' as first value');
                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                            assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');
                            request.ok(_this27.choicesList);
                          });
                          _context63.next = 11;
                          return (0, _emberPowerSelect.typeInSearch)(_this27.choicesList[0].value);

                        case 11:
                          return _context63.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee62() {
                            var optionDomElement;
                            return regeneratorRuntime.wrap(function _callee62$(_context62) {
                              while (1) {
                                switch (_context62.prev = _context62.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this27.choicesList.length, 'results are loaded');
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this27.choicesList[0].value, 'Now first option is \'sam\'');
                                    _context62.next = 4;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 4:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×john×sam', 'Choices \'sam\' and \'joe\' are now selected');
                                    assert.deepEqual(Ember.get(_this27, 'defaultFieldModel.company')[0], johnObject, 'Model contains \'john\' as first value');
                                    assert.deepEqual(Ember.get(_this27, 'defaultFieldModel.company')[1], _this27.choicesList[0], 'Model contains \'sam\' as second value');

                                  case 8:
                                  case "end":
                                    return _context62.stop();
                                }
                              }
                            }, _callee62);
                          }))));

                        case 12:
                        case "end":
                          return _context63.stop();
                      }
                    }
                  }, _callee63);
                }))));

              case 18:
              case "end":
                return _context64.stop();
            }
          }
        }, _callee64, this);
      }));

      return function (_x34) {
        return _ref63.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\'\'): works properly when made a dependent field, in edit scenerio', /*#__PURE__*/function () {
      var _ref66 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee66(assert) {
        var _this28 = this;

        var data, johnObject;
        return regeneratorRuntime.wrap(function _callee66$(_context66) {
          while (1) {
            switch (_context66.prev = _context66.next) {
              case 0:
                assert.expect(9);
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionLabelPath', 'value');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.fieldOptions', {
                  'multiple': true,
                  'creatable': true
                });
                data = [];
                johnObject = {
                  id: 'contact_4',
                  value: 'john',
                  position: 4
                };
                data.push(this.choicesList[1]);
                data.push(johnObject);
                Ember.set(this, 'defaultFieldModel.hasCompany', Ember.get(this, 'autocompleteAsDependentFieldSchema.fields.0.getChoices.0'));
                Ember.set(this, 'defaultFieldModel.company', data);
                _context66.next = 14;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Sw9GAbfG",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"autocompleteAsDependentFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 14:
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=emma&qf=value', 'query field is populated');
                  request.ok(_this28.choicesList);
                });
                _context66.next = 17;
                return (0, _emberPowerSelect.clickTrigger)();

              case 17:
                _context66.next = 19;
                return (0, _emberPowerSelect.typeInSearch)('emma');

              case 19:
                return _context66.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee65() {
                  var parentFieldChoicesCount, emmaObject, optionDomElement;
                  return regeneratorRuntime.wrap(function _callee65$(_context65) {
                    while (1) {
                      switch (_context65.prev = _context65.next) {
                        case 0:
                          parentFieldChoicesCount = Ember.get(_this28, 'autocompleteAsDependentFieldSchema.fields.0.getChoices.length');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'] - parentFieldChoicesCount, _this28.choicesList.length, 'results are loaded');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 0].innerText, 'Add "emma"...', 'First option is a to add a new option \'emma\'');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 1].innerText, 'sam', 'Second option is \'sam\'');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 2].innerText, 'tim', 'Second option is \'tim\'');
                          _context65.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 0]);

                        case 7:
                          emmaObject = {
                            value: 'emma'
                          };
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="company"] .ember-power-select-multiple-trigger');
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×joe×john×emma', 'Choices \'joe\', \'john\' and \'emma\' are now selected');
                          assert.deepEqual(Ember.get(_this28, 'defaultFieldModel.company')[0], _this28.choicesList[1], 'Model contains \'joe\' as first value');
                          assert.deepEqual(Ember.get(_this28, 'defaultFieldModel.company')[1], johnObject, 'Model contains \'john\' as second value');
                          assert.deepEqual(Ember.get(_this28, 'defaultFieldModel.company')[2], emmaObject, 'Model contains \'emma\' as last value');

                        case 13:
                        case "end":
                          return _context65.stop();
                      }
                    }
                  }, _callee65);
                }))));

              case 20:
              case "end":
                return _context66.stop();
            }
          }
        }, _callee66, this);
      }));

      return function (_x35) {
        return _ref66.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete (optionLabelPath=\'name\', optionValuePath=\'name\'): should not make a network request ', /*#__PURE__*/function () {
      var _ref68 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee68(assert) {
        return regeneratorRuntime.wrap(function _callee68$(_context68) {
          while (1) {
            switch (_context68.prev = _context68.next) {
              case 0:
                assert.expect(1);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {
                  assert.equal(false, 'Unexpected network request found');
                  request.ok(Ember.A([{
                    id: 'contact_3',
                    value: 'tim',
                    name: 'Timithy',
                    position: 3
                  }]));
                });
                Ember.set(this, 'defaultFieldModel.company', 'Timithy');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');
                _context68.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "wTW5IU0K",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"optionLabelPath\",\"optionValuePath\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]],\"name\",\"name\"]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                return _context68.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee67() {
                  return regeneratorRuntime.wrap(function _callee67$(_context67) {
                    while (1) {
                      switch (_context67.prev = _context67.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, "Timithy");

                        case 1:
                        case "end":
                          return _context67.stop();
                      }
                    }
                  }, _callee67);
                }))));

              case 7:
              case "end":
                return _context68.stop();
            }
          }
        }, _callee68, this);
      }));

      return function (_x36) {
        return _ref68.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("auto-complete (optionValuePath='id'): should sent request to backend and resolve data from id to value", /*#__PURE__*/function () {
      var _ref70 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee70(assert) {
        return regeneratorRuntime.wrap(function _callee70$(_context70) {
          while (1) {
            switch (_context70.prev = _context70.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {
                  assert.equal(request.url, 'url/presearch?q=contact_2&qf=id', 'query field is populated');
                  request.ok(Ember.A([{
                    id: 'contact_2',
                    value: 'sam',
                    position: 1
                  }]));
                });
                Ember.set(this, 'defaultFieldModel.company', 'contact_2');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'id');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');
                _context70.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                return _context70.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee69() {
                  return regeneratorRuntime.wrap(function _callee69$(_context69) {
                    while (1) {
                      switch (_context69.prev = _context69.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, "sam");

                        case 1:
                        case "end":
                          return _context69.stop();
                      }
                    }
                  }, _callee69);
                }))));

              case 9:
              case "end":
                return _context70.stop();
            }
          }
        }, _callee70, this);
      }));

      return function (_x37) {
        return _ref70.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("auto-complete (optionLabelPath='name'): property other than id and value", /*#__PURE__*/function () {
      var _ref72 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee72(assert) {
        return regeneratorRuntime.wrap(function _callee72$(_context72) {
          while (1) {
            switch (_context72.prev = _context72.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {
                  assert.equal(request.url, 'url/presearch?q=contact_2&qf=id', 'query field is populated');
                  request.ok(Ember.A([{
                    id: 'contact_2',
                    value: 'sam',
                    name: 'Samuel',
                    position: 1
                  }]));
                });
                Ember.set(this, 'defaultFieldModel.company', 'contact_2');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'id');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'name');
                _context72.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                return _context72.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee71() {
                  return regeneratorRuntime.wrap(function _callee71$(_context71) {
                    while (1) {
                      switch (_context71.prev = _context71.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, "Samuel");

                        case 1:
                        case "end":
                          return _context71.stop();
                      }
                    }
                  }, _callee71);
                }))));

              case 9:
              case "end":
                return _context72.stop();
            }
          }
        }, _callee72, this);
      }));

      return function (_x38) {
        return _ref72.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("auto-complete : lookup_prefetch_url is null, should not make any request to backend", /*#__PURE__*/function () {
      var _ref74 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee74(assert) {
        return regeneratorRuntime.wrap(function _callee74$(_context74) {
          while (1) {
            switch (_context74.prev = _context74.next) {
              case 0:
                assert.expect(1);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=contact_2&qf=id', 'query field is populated');
                  request.ok(Ember.A([{
                    id: 'contact_2',
                    value: 'sam',
                    name: 'Samuel',
                    position: 1
                  }]));
                });
                Ember.set(this, 'defaultFieldModel.company', 'contact_2');
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');
                _context74.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                return _context74.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee73() {
                  return regeneratorRuntime.wrap(function _callee73$(_context73) {
                    while (1) {
                      switch (_context73.prev = _context73.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0], undefined);

                        case 1:
                        case "end":
                          return _context73.stop();
                      }
                    }
                  }, _callee73);
                }))));

              case 7:
              case "end":
                return _context74.stop();
            }
          }
        }, _callee74, this);
      }));

      return function (_x39) {
        return _ref74.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('auto-complete : model has no value set, should not make a network request', /*#__PURE__*/function () {
      var _ref76 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee76(assert) {
        return regeneratorRuntime.wrap(function _callee76$(_context76) {
          while (1) {
            switch (_context76.prev = _context76.next) {
              case 0:
                assert.expect(1);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {
                  assert.ok(false, "Unexpected network request found");
                  request.ok(Ember.A([{}]));
                });
                Ember.set(this, 'defaultFieldModel.company', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');
                _context76.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "hGW5ygfo",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"optionLabelPath\",\"optionValuePath\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]],\"value\",\"id\"]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                return _context76.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee75() {
                  return regeneratorRuntime.wrap(function _callee75$(_context75) {
                    while (1) {
                      switch (_context75.prev = _context75.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0], undefined);

                        case 1:
                        case "end":
                          return _context75.stop();
                      }
                    }
                  }, _callee75);
                }))));

              case 7:
              case "end":
                return _context76.stop();
            }
          }
        }, _callee76, this);
      }));

      return function (_x40) {
        return _ref76.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/allowClear/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete | fieldOptions | allowClear ', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }]
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 auto-complete(no-create, no-multiple) check options can be selected and cleared", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(7);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    allowClear: true,
                    mutiple: false,
                    creatable: false
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });
                _context3.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context3.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context3.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(_this.model.country, "INDIA", "Check value 'INDIA' is set on the model");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText), "INDIA", "Check option 'INDIA' is selected");
                          _context2.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-clear-btn'));

                        case 6:
                          assert.equal(_this.model.country, null, "Check 'INDIA' is removed from model");
                          _context2.next = 9;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 9:
                          _context2.next = 11;
                          return (0, _emberPowerSelect.typeInSearch)('ABCD');

                        case 11:
                          return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    _context.next = 2;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                  case 2:
                                    assert.equal(_this.model.country, "UNITED STATES", "Check value 'UNITED STATES' is set on the model");
                                    assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText.trim(), "UNITED STATES", "Check option 'UNITED STATES' is selected");

                                  case 4:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee);
                          }))));

                        case 12:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }))));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 auto-complete(create, no-multiple) check options can be selected and cleared", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(7);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    allowClear: true,
                    mutiple: false,
                    creatable: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'shortCode'
                });

                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
                  request.ok(_this2.choicesList);
                });
                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context6.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context6.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);

                        case 2:
                          assert.equal(_this2.model.country, "CHINA", "Check value 'CHINA' is set on the model");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText), "CHN", "Check option 'CHN' is selected");
                          _context5.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-clear-btn'));

                        case 6:
                          assert.equal(_this2.model.country, null, "Check 'CHINA' is removed from model");
                          _context5.next = 9;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 9:
                          _context5.next = 11;
                          return (0, _emberPowerSelect.typeInSearch)('ABCD');

                        case 11:
                          return _context5.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                              while (1) {
                                switch (_context4.prev = _context4.next) {
                                  case 0:
                                    _context4.next = 2;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);

                                  case 2:
                                    assert.equal(_this2.model.country, "SRI LANKA", "Check value 'SRI LANKA' is set on the model");
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText), "LKA", "Check option 'LKA' is selected");

                                  case 4:
                                  case "end":
                                    return _context4.stop();
                                }
                              }
                            }, _callee4);
                          }))));

                        case 12:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
    /*  YET TO BE CONFIRMED THE BEHAVIOUR : Refer [FSERV-274]
    test("#TEST3 auto-complete(no-create, multiple) check options can be selected and cleared", async function(assert) {
      assert.expect(7);
      createField.autoComplete(this, {
        fieldOptions: {
          allowClear: true,
          multiple: true,
          creatable: false
        },
        optionValuePath: 'value',
        optionLabelPath: 'shortCode'
      });
       stubRequest('get', 'url/search', (request) => {
        assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
        request.ok(this.choicesList);
      });
       await createField.renderForm(this);
       await clickTrigger();
      await typeInSearch('ABCD');
      return wait().then(() => {
        click(findAll('.ember-power-select-option')[0]);
        assert.equal(this.model.country, "INDIA", "Check value 'INDIA' is set on the model");
        assert.equal(find('.ember-power-select-selected-item').innerText, "IND", "Check option 'IND' is selected");
         stubRequest('get', 'url/search', (request) => {
          assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');
          request.ok(this.choicesList);
        });
        click(find('.ember-power-select-multiple-trigger'));
        await typeInSearch('ABCD');
      return wait().then(() => {
        click(findAll('.ember-power-select-option')[1]);
        assert.equal(this.model.country, null, "Check 'CHINA' is removed from model");
         return wait().then(() => {
          click(findAll('.ember-power-select-option')[4]);
          assert.equal(this.model.country, "SRI LANKA", "Check value 'SRI LANKA' is set on the model");
          assert.equal(find('.ember-power-select-selected-item').innerText, "LKA", "Check option 'LKA' is selected");
        });
      });
      });
    });
    */

    (0, _qunit.test)("#TEST4 auto-complete(create, multiple) check options can be selected and cleared", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(7);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    allowClear: true,
                    multiple: true,
                    creatable: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'shortCode'
                });

                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
                  request.ok(_this3.choicesList);
                });
                _context9.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context9.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context9.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context9.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                        case 2:
                          assert.equal(_this3.model.country, "INDIA", "Check value 'INDIA' is set on the model");
                          assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-multiple-option').innerText, "× IND", "Check option 'IND' is selected");
                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                            assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');
                            request.ok(_this3.choicesList);
                          });
                          _context8.next = 7;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 7:
                          _context8.next = 9;
                          return (0, _emberPowerSelect.typeInSearch)('ABCD');

                        case 9:
                          return _context8.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                              while (1) {
                                switch (_context7.prev = _context7.next) {
                                  case 0:
                                    _context7.next = 2;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);

                                  case 2:
                                    assert.deepEqual(_this3.model.country, ["INDIA", "CHINA"], "Check 'INDIA' and 'CHINA' is added to model");
                                    _context7.next = 5;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                  case 5:
                                    assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-multiple-option').innerText, "× CHN", "Check option 'CHN' is selected");
                                    assert.deepEqual(_this3.model.country, ["CHINA"], "Check value 'CHINA' is set on the model");

                                  case 7:
                                  case "end":
                                    return _context7.stop();
                                }
                              }
                            }, _callee7);
                          }))));

                        case 10:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }))));

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x3) {
        return _ref7.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/custom/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete/hasDefaultChoices | custom', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }],
        defaultChoiceList: [{
          id: 'country_1',
          value: 'UNITED KINGDOM',
          shortCode: 'UKD',
          position: 1
        }, {
          id: 'country_2',
          value: 'CANADA',
          shortCode: 'CAN',
          position: 2
        }]
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 auto-complete(no-create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(25);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  if (!request.url.includes("?q=")) {
                    assert.equal(request.url, 'url/search', 'url without query params is populated');
                    request.ok(_this.defaultChoiceList);
                  } else {
                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');
                    request.ok(_this.choicesList);
                  }
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    mutiple: false,
                    creatable: false,
                    hasDefaultChoices: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context4.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context4.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          _context3.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 6:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                          assert.equal(_this.model.customField.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          _context3.next = 10;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 10:
                          _context3.next = 12;
                          return (0, _emberPowerSelect.typeInSearch)('A');

                        case 12:
                          return _context3.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                                    _context2.next = 5;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                  case 5:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "CANADA", "Field renderd with value 'CANADA'");
                                    assert.equal(_this.model.customField.country, "CANADA", "Check value 'CANADA' is set on the model");
                                    _context2.next = 9;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 9:
                                    _context2.next = 11;
                                    return (0, _emberPowerSelect.typeInSearch)('ABC');

                                  case 11:
                                    return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                      return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                          switch (_context.prev = _context.next) {
                                            case 0:
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "INDIA", "choice 1 is 'INDIA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHINA", "choice 3 is 'CHINA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JAPAN", "choice 5 is 'JAPAN'");
                                              _context.next = 8;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 8:
                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "INDIA", "Field renderd with value 'INDIA'");
                                              assert.equal(_this.model.customField.country, "INDIA", "Check value 'INDIA' is set on the model");

                                            case 10:
                                            case "end":
                                              return _context.stop();
                                          }
                                        }
                                      }, _callee);
                                    }))));

                                  case 12:
                                  case "end":
                                    return _context2.stop();
                                }
                              }
                            }, _callee2);
                          }))));

                        case 13:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 auto-complete(create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(28);

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    mutiple: false,
                    hasDefaultChoices: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                this.model = {
                  customField: {}
                };
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  if (!request.url.includes("?q=")) {
                    assert.equal(request.url, 'url/search', 'url without query params is populated');
                    request.ok(_this2.defaultChoiceList);
                  } else {
                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');
                    request.ok(_this2.choicesList);
                  }
                });
                _context8.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context8.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          assert.equal(_this2.model.customField.country, undefined, "no value set on model");
                          _context7.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 7:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                          assert.equal(_this2.model.customField.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          _context7.next = 11;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 11:
                          _context7.next = 13;
                          return (0, _emberPowerSelect.typeInSearch)('A');

                        case 13:
                          return _context7.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                              while (1) {
                                switch (_context6.prev = _context6.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 3, "3 choices are displayed");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "A"...', "choice 1 'Add \"A\"...'");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CANADA", "default choice 2 is 'CANADA'");
                                    _context6.next = 6;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                  case 6:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                                    assert.equal(_this2.model.customField.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                                    _context6.next = 10;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 10:
                                    _context6.next = 12;
                                    return (0, _emberPowerSelect.typeInSearch)('ABC');

                                  case 12:
                                    return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                                      return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                        while (1) {
                                          switch (_context5.prev = _context5.next) {
                                            case 0:
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "ABC"...', "choice 1 'Add \"ABC\"...'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");
                                              _context5.next = 9;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                            case 9:
                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "INDIA", "Field renderd with value 'INDIA'");
                                              assert.equal(_this2.model.customField.country, "INDIA", "Check value 'INDIA' is set on the model");

                                            case 11:
                                            case "end":
                                              return _context5.stop();
                                          }
                                        }
                                      }, _callee5);
                                    }))));

                                  case 13:
                                  case "end":
                                    return _context6.stop();
                                }
                              }
                            }, _callee6);
                          }))));

                        case 14:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x2) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 auto-complete(create, multiple) Selecting multiple values with creatable as true and removing one or more choice/value ", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(21);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search', 'url without query params is populated');
                  request.ok(_this3.defaultChoiceList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: true,
                    multiple: true,
                    has_default_choices: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context15.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context15.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                return _context15.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          assert.equal(_this3.model.customField.country, undefined, "no value set on model");
                          _context14.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 7:
                          assert.equal(_this3.model.customField.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          return _context14.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                            return regeneratorRuntime.wrap(function _callee13$(_context13) {
                              while (1) {
                                switch (_context13.prev = _context13.next) {
                                  case 0:
                                    _context13.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      if (!request.url.includes("?q=")) {
                                        assert.equal(request.url, 'url/search', 'url without query params is populated');
                                        request.ok(_this3.defaultChoiceList);
                                      } else {
                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');
                                        request.ok(_this3.choicesList);
                                      }
                                    });
                                    _context13.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');

                                  case 5:
                                    return _context13.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                                      return regeneratorRuntime.wrap(function _callee12$(_context12) {
                                        while (1) {
                                          switch (_context12.prev = _context12.next) {
                                            case 0:
                                              _context12.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this3.model.customField.country, ["UNITED KINGDOM", "INDIA"], "check 'UNITED KINGDOM' and 'INDIA'  is selected");
                                              _context12.next = 5;
                                              return (0, _emberPowerSelect.clickTrigger)();

                                            case 5:
                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                request.ok(_this3.defaultChoiceList);
                                              });
                                              _context12.next = 8;
                                              return (0, _emberPowerSelect.typeInSearch)('C');

                                            case 8:
                                              return _context12.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                                                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                                                  while (1) {
                                                    switch (_context11.prev = _context11.next) {
                                                      case 0:
                                                        _context11.next = 2;
                                                        return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                                      case 2:
                                                        assert.deepEqual(_this3.model.customField.country, ["UNITED KINGDOM", "INDIA", "C"], "check 'UNITED KINGDOM','INDIA' and 'C'  is selected");
                                                        return _context11.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                                                          return regeneratorRuntime.wrap(function _callee10$(_context10) {
                                                            while (1) {
                                                              switch (_context10.prev = _context10.next) {
                                                                case 0:
                                                                  _context10.next = 2;
                                                                  return (0, _emberPowerSelect.clickTrigger)();

                                                                case 2:
                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                                    if (!request.url.includes("?q=")) {
                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                                      request.ok(_this3.defaultChoiceList);
                                                                    } else {
                                                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query params are populated');
                                                                      request.ok(_this3.choicesList);
                                                                    }
                                                                  });
                                                                  _context10.next = 5;
                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED');

                                                                case 5:
                                                                  return _context10.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                                                                    return regeneratorRuntime.wrap(function _callee9$(_context9) {
                                                                      while (1) {
                                                                        switch (_context9.prev = _context9.next) {
                                                                          case 0:
                                                                            _context9.next = 2;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                                                          case 2:
                                                                            assert.deepEqual(_this3.model.customField.country, ["UNITED KINGDOM", "INDIA", "C", "UNITED"], "check 'UNITED KINGDOM','INDIA','C' and 'UNITED'  is selected");
                                                                            _context9.next = 5;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 5:
                                                                            //  Remove first choice
                                                                            assert.deepEqual(_this3.model.customField.country, ["INDIA", "C", "UNITED"], "check 'INDIA','C' and 'UNITED'  is selected");
                                                                            _context9.next = 8;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 8:
                                                                            assert.deepEqual(_this3.model.customField.country, ["INDIA", "UNITED"], "check 'INDIA' and 'UNITED'  is selected");
                                                                            _context9.next = 11;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 11:
                                                                            assert.deepEqual(_this3.model.customField.country, ["INDIA"], "check 'INDIA' is selected");
                                                                            _context9.next = 14;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 14:
                                                                            assert.deepEqual(_this3.model.customField.country, [], "check if model is empty");

                                                                          case 15:
                                                                          case "end":
                                                                            return _context9.stop();
                                                                        }
                                                                      }
                                                                    }, _callee9);
                                                                  }))));

                                                                case 6:
                                                                case "end":
                                                                  return _context10.stop();
                                                              }
                                                            }
                                                          }, _callee10);
                                                        }))));

                                                      case 4:
                                                      case "end":
                                                        return _context11.stop();
                                                    }
                                                  }
                                                }, _callee11);
                                              }))));

                                            case 9:
                                            case "end":
                                              return _context12.stop();
                                          }
                                        }
                                      }, _callee12);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context13.stop();
                                }
                              }
                            }, _callee13);
                          }))));

                        case 9:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))));

              case 9:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x3) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 auto-complete(no-create, multiple) Selecting multiple values with creatable as false and removing one or more choice/value ", /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                assert.expect(21);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search', 'url without query params is populated');
                  request.ok(_this4.defaultChoiceList);
                });

                _createField.default.autoComplete(this, {
                  custom: true,
                  fieldOptions: {
                    creatable: false,
                    multiple: true,
                    has_default_choices: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                this.model = {
                  customField: {}
                };
                _context22.next = 6;
                return _createField.default.renderForm(this);

              case 6:
                _context22.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                return _context22.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
                  return regeneratorRuntime.wrap(function _callee21$(_context21) {
                    while (1) {
                      switch (_context21.prev = _context21.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          assert.equal(_this4.model.customField.country, undefined, "no value set on model");
                          _context21.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 7:
                          assert.equal(_this4.model.customField.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          return _context21.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
                            return regeneratorRuntime.wrap(function _callee20$(_context20) {
                              while (1) {
                                switch (_context20.prev = _context20.next) {
                                  case 0:
                                    _context20.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      if (!request.url.includes("?q=")) {
                                        assert.equal(request.url, 'url/search', 'url without query params is populated');
                                        request.ok(_this4.defaultChoiceList);
                                      } else {
                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');
                                        request.ok(_this4.choicesList);
                                      }
                                    });
                                    _context20.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');

                                  case 5:
                                    return _context20.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                                      return regeneratorRuntime.wrap(function _callee19$(_context19) {
                                        while (1) {
                                          switch (_context19.prev = _context19.next) {
                                            case 0:
                                              _context19.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this4.model.customField.country, ["UNITED KINGDOM", "INDIA"], "check 'UNITED KINGDOM' and 'INDIA'  is selected");
                                              _context19.next = 5;
                                              return (0, _emberPowerSelect.clickTrigger)();

                                            case 5:
                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                request.ok(_this4.defaultChoiceList);
                                              });
                                              _context19.next = 8;
                                              return (0, _emberPowerSelect.typeInSearch)('C');

                                            case 8:
                                              return _context19.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                                                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                                                  while (1) {
                                                    switch (_context18.prev = _context18.next) {
                                                      case 0:
                                                        _context18.next = 2;
                                                        return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                                      case 2:
                                                        assert.deepEqual(_this4.model.customField.country, ["UNITED KINGDOM", "INDIA", "CANADA"], "check 'UNITED KINGDOM','INDIA' and 'CANADA'  is selected");
                                                        return _context18.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                                                          return regeneratorRuntime.wrap(function _callee17$(_context17) {
                                                            while (1) {
                                                              switch (_context17.prev = _context17.next) {
                                                                case 0:
                                                                  _context17.next = 2;
                                                                  return (0, _emberPowerSelect.clickTrigger)();

                                                                case 2:
                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                                    if (!request.url.includes("?q=")) {
                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                                      request.ok(_this4.defaultChoiceList);
                                                                    } else {
                                                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query params are populated');
                                                                      request.ok(_this4.choicesList);
                                                                    }
                                                                  });
                                                                  _context17.next = 5;
                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');

                                                                case 5:
                                                                  return _context17.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                                                                    return regeneratorRuntime.wrap(function _callee16$(_context16) {
                                                                      while (1) {
                                                                        switch (_context16.prev = _context16.next) {
                                                                          case 0:
                                                                            _context16.next = 2;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                                                          case 2:
                                                                            assert.deepEqual(_this4.model.customField.country, ["UNITED KINGDOM", "INDIA", "CANADA", "UNITED STATES"], "check 'UNITED KINGDOM','INDIA','CANADA' and 'UNITED STATES'  is selected");
                                                                            _context16.next = 5;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 5:
                                                                            //  Remove first choice
                                                                            assert.deepEqual(_this4.model.customField.country, ["INDIA", "CANADA", "UNITED STATES"], "check 'INDIA','CANADA' and 'UNITED STATES'  is selected");
                                                                            _context16.next = 8;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 8:
                                                                            assert.deepEqual(_this4.model.customField.country, ["INDIA", "UNITED STATES"], "check 'INDIA' and 'UNITED STATES'  is selected");
                                                                            _context16.next = 11;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 11:
                                                                            assert.deepEqual(_this4.model.customField.country, ["INDIA"], "check 'INDIA' is selected");
                                                                            _context16.next = 14;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 14:
                                                                            assert.deepEqual(_this4.model.customField.country, [], "check if model is empty");

                                                                          case 15:
                                                                          case "end":
                                                                            return _context16.stop();
                                                                        }
                                                                      }
                                                                    }, _callee16);
                                                                  }))));

                                                                case 6:
                                                                case "end":
                                                                  return _context17.stop();
                                                              }
                                                            }
                                                          }, _callee17);
                                                        }))));

                                                      case 4:
                                                      case "end":
                                                        return _context18.stop();
                                                    }
                                                  }
                                                }, _callee18);
                                              }))));

                                            case 9:
                                            case "end":
                                              return _context19.stop();
                                          }
                                        }
                                      }, _callee19);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context20.stop();
                                }
                              }
                            }, _callee20);
                          }))));

                        case 9:
                        case "end":
                          return _context21.stop();
                      }
                    }
                  }, _callee21);
                }))));

              case 9:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x4) {
        return _ref16.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/default/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete/hasDefaultChoices | default', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }, {
          id: 'country_4',
          value: 'SRI LANKA',
          shortCode: 'LKA',
          position: 4
        }, {
          id: 'country_5',
          value: 'JAPAN',
          shortCode: 'JPN',
          position: 5
        }],
        defaultChoiceList: [{
          id: 'country_1',
          value: 'UNITED KINGDOM',
          shortCode: 'UKD',
          position: 1
        }, {
          id: 'country_2',
          value: 'CANADA',
          shortCode: 'CAN',
          position: 2
        }]
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 auto-complete(no-create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(25);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    mutiple: false,
                    creatable: false,
                    hasDefaultChoices: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  if (!request.url.includes("?q=")) {
                    assert.equal(request.url, 'url/search', 'url without query params is populated');
                    request.ok(_this.defaultChoiceList);
                  } else {
                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');
                    request.ok(_this.choicesList);
                  }
                });
                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context4.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                return _context4.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          _context3.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 6:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                          assert.equal(_this.model.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          _context3.next = 10;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 10:
                          _context3.next = 12;
                          return (0, _emberPowerSelect.typeInSearch)('A');

                        case 12:
                          return _context3.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                                    _context2.next = 5;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                  case 5:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "CANADA", "Field renderd with value 'CANADA'");
                                    assert.equal(_this.model.country, "CANADA", "Check value 'CANADA' is set on the model");
                                    _context2.next = 9;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 9:
                                    _context2.next = 11;
                                    return (0, _emberPowerSelect.typeInSearch)('ABC');

                                  case 11:
                                    return _context2.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                      return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                          switch (_context.prev = _context.next) {
                                            case 0:
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, "5 choices are displayed");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "INDIA", "choice 1 is 'INDIA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CHINA", "choice 3 is 'CHINA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "JAPAN", "choice 5 is 'JAPAN'");
                                              _context.next = 8;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 8:
                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "INDIA", "Field renderd with value 'INDIA'");
                                              assert.equal(_this.model.country, "INDIA", "Check value 'INDIA' is set on the model");

                                            case 10:
                                            case "end":
                                              return _context.stop();
                                          }
                                        }
                                      }, _callee);
                                    }))));

                                  case 12:
                                  case "end":
                                    return _context2.stop();
                                }
                              }
                            }, _callee2);
                          }))));

                        case 13:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 auto-complete(create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(28);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    mutiple: false,
                    hasDefaultChoices: true
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  if (!request.url.includes("?q=")) {
                    assert.equal(request.url, 'url/search', 'url without query params is populated');
                    request.ok(_this2.defaultChoiceList);
                  } else {
                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');
                    request.ok(_this2.choicesList);
                  }
                });
                _context8.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context8.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                return _context8.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          assert.equal(_this2.model.country, undefined, "no value set on model");
                          _context7.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 7:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                          assert.equal(_this2.model.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          _context7.next = 11;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 11:
                          _context7.next = 13;
                          return (0, _emberPowerSelect.typeInSearch)('A');

                        case 13:
                          return _context7.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                              while (1) {
                                switch (_context6.prev = _context6.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 3, "3 choices are displayed");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "A"...', "choice 1 'Add \"A\"...'");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "CANADA", "default choice 2 is 'CANADA'");
                                    _context6.next = 6;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                  case 6:
                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "UNITED KINGDOM", "Field renderd with value 'UNITED KINGDOM'");
                                    assert.equal(_this2.model.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                                    _context6.next = 10;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 10:
                                    _context6.next = 12;
                                    return (0, _emberPowerSelect.typeInSearch)('ABC');

                                  case 12:
                                    return _context6.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                                      return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                        while (1) {
                                          switch (_context5.prev = _context5.next) {
                                            case 0:
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, "5 choices are displayed");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add "ABC"...', "choice 1 'Add \"ABC\"...'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "INDIA", "choice 1 is 'INDIA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, "UNITED STATES", "choice 2 is 'UNITED STATES'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, "CHINA", "choice 3 is 'CHINA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, "SRI LANKA", "choice 4 is 'SRI LANKA'");
                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, "JAPAN", "choice 5 is 'JAPAN'");
                                              _context5.next = 9;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                            case 9:
                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, "INDIA", "Field renderd with value 'INDIA'");
                                              assert.equal(_this2.model.country, "INDIA", "Check value 'INDIA' is set on the model");

                                            case 11:
                                            case "end":
                                              return _context5.stop();
                                          }
                                        }
                                      }, _callee5);
                                    }))));

                                  case 13:
                                  case "end":
                                    return _context6.stop();
                                }
                              }
                            }, _callee6);
                          }))));

                        case 14:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x2) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 auto-complete(create, multiple) Selecting multiple values with creatable as true and removing one or more choice/value ", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(21);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search', 'url without query params is populated');
                  request.ok(_this3.defaultChoiceList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: true,
                    multiple: true,
                    has_default_choices: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context15.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context15.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                return _context15.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          assert.equal(_this3.model.country, undefined, "no value set on model");
                          _context14.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 7:
                          assert.equal(_this3.model.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          return _context14.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                            return regeneratorRuntime.wrap(function _callee13$(_context13) {
                              while (1) {
                                switch (_context13.prev = _context13.next) {
                                  case 0:
                                    _context13.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      if (!request.url.includes("?q=")) {
                                        assert.equal(request.url, 'url/search', 'url without query params is populated');
                                        request.ok(_this3.defaultChoiceList);
                                      } else {
                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');
                                        request.ok(_this3.choicesList);
                                      }
                                    });
                                    _context13.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');

                                  case 5:
                                    return _context13.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                                      return regeneratorRuntime.wrap(function _callee12$(_context12) {
                                        while (1) {
                                          switch (_context12.prev = _context12.next) {
                                            case 0:
                                              _context12.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this3.model.country, ["UNITED KINGDOM", "INDIA"], "check 'UNITED KINGDOM' and 'INDIA'  is selected");
                                              _context12.next = 5;
                                              return (0, _emberPowerSelect.clickTrigger)();

                                            case 5:
                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                request.ok(_this3.defaultChoiceList);
                                              });
                                              _context12.next = 8;
                                              return (0, _emberPowerSelect.typeInSearch)('C');

                                            case 8:
                                              return _context12.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                                                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                                                  while (1) {
                                                    switch (_context11.prev = _context11.next) {
                                                      case 0:
                                                        (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);
                                                        assert.deepEqual(_this3.model.country, ["UNITED KINGDOM", "INDIA", "C"], "check 'UNITED KINGDOM','INDIA' and 'C'  is selected");
                                                        return _context11.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                                                          return regeneratorRuntime.wrap(function _callee10$(_context10) {
                                                            while (1) {
                                                              switch (_context10.prev = _context10.next) {
                                                                case 0:
                                                                  _context10.next = 2;
                                                                  return (0, _emberPowerSelect.clickTrigger)();

                                                                case 2:
                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                                    if (!request.url.includes("?q=")) {
                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                                      request.ok(_this3.defaultChoiceList);
                                                                    } else {
                                                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query params are populated');
                                                                      request.ok(_this3.choicesList);
                                                                    }
                                                                  });
                                                                  _context10.next = 5;
                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED');

                                                                case 5:
                                                                  return _context10.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                                                                    return regeneratorRuntime.wrap(function _callee9$(_context9) {
                                                                      while (1) {
                                                                        switch (_context9.prev = _context9.next) {
                                                                          case 0:
                                                                            _context9.next = 2;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                                                          case 2:
                                                                            assert.deepEqual(_this3.model.country, ["UNITED KINGDOM", "INDIA", "C", "UNITED"], "check 'UNITED KINGDOM','INDIA','C' and 'UNITED'  is selected");
                                                                            _context9.next = 5;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 5:
                                                                            //  Remove first choice
                                                                            assert.deepEqual(_this3.model.country, ["INDIA", "C", "UNITED"], "check 'INDIA','C' and 'UNITED'  is selected");
                                                                            _context9.next = 8;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 8:
                                                                            assert.deepEqual(_this3.model.country, ["INDIA", "UNITED"], "check 'INDIA' and 'UNITED'  is selected");
                                                                            _context9.next = 11;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 11:
                                                                            assert.deepEqual(_this3.model.country, ["INDIA"], "check 'INDIA' is selected");
                                                                            _context9.next = 14;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 14:
                                                                            assert.deepEqual(_this3.model.country, [], "check if model is empty");

                                                                          case 15:
                                                                          case "end":
                                                                            return _context9.stop();
                                                                        }
                                                                      }
                                                                    }, _callee9);
                                                                  }))));

                                                                case 6:
                                                                case "end":
                                                                  return _context10.stop();
                                                              }
                                                            }
                                                          }, _callee10);
                                                        }))));

                                                      case 3:
                                                      case "end":
                                                        return _context11.stop();
                                                    }
                                                  }
                                                }, _callee11);
                                              }))));

                                            case 9:
                                            case "end":
                                              return _context12.stop();
                                          }
                                        }
                                      }, _callee12);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context13.stop();
                                }
                              }
                            }, _callee13);
                          }))));

                        case 9:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))));

              case 8:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x3) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 auto-complete(no-create, multiple) Selecting multiple values with creatable as false and removing one or more choice/value ", /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                assert.expect(21);
                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search', 'url without query params is populated');
                  request.ok(_this4.defaultChoiceList);
                });

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    creatable: false,
                    multiple: true,
                    has_default_choices: true
                  },
                  optionLabelPath: 'value',
                  optionValuePath: 'value'
                });

                _context22.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context22.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                return _context22.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
                  return regeneratorRuntime.wrap(function _callee21$(_context21) {
                    while (1) {
                      switch (_context21.prev = _context21.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), "check if a seach bar appears");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, "2 choices are displayed");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, "UNITED KINGDOM", "default choice 1 is 'UNITED KINGDOM'");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, "CANADA", "default choice 2 is 'CANADA'");
                          assert.equal(_this4.model.country, undefined, "no value set on model");
                          _context21.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 7:
                          assert.equal(_this4.model.country, "UNITED KINGDOM", "Check value 'UNITED KINGDOM' is set on the model");
                          return _context21.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
                            return regeneratorRuntime.wrap(function _callee20$(_context20) {
                              while (1) {
                                switch (_context20.prev = _context20.next) {
                                  case 0:
                                    _context20.next = 2;
                                    return (0, _emberPowerSelect.clickTrigger)();

                                  case 2:
                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                      if (!request.url.includes("?q=")) {
                                        assert.equal(request.url, 'url/search', 'url without query params is populated');
                                        request.ok(_this4.defaultChoiceList);
                                      } else {
                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');
                                        request.ok(_this4.choicesList);
                                      }
                                    });
                                    _context20.next = 5;
                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');

                                  case 5:
                                    return _context20.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                                      return regeneratorRuntime.wrap(function _callee19$(_context19) {
                                        while (1) {
                                          switch (_context19.prev = _context19.next) {
                                            case 0:
                                              _context19.next = 2;
                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                            case 2:
                                              assert.deepEqual(_this4.model.country, ["UNITED KINGDOM", "INDIA"], "check 'UNITED KINGDOM' and 'INDIA'  is selected");
                                              _context19.next = 5;
                                              return (0, _emberPowerSelect.clickTrigger)();

                                            case 5:
                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                request.ok(_this4.defaultChoiceList);
                                              });
                                              _context19.next = 8;
                                              return (0, _emberPowerSelect.typeInSearch)('C');

                                            case 8:
                                              return _context19.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                                                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                                                  while (1) {
                                                    switch (_context18.prev = _context18.next) {
                                                      case 0:
                                                        _context18.next = 2;
                                                        return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                                      case 2:
                                                        assert.deepEqual(_this4.model.country, ["UNITED KINGDOM", "INDIA", "CANADA"], "check 'UNITED KINGDOM','INDIA' and 'CANADA'  is selected");
                                                        return _context18.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                                                          return regeneratorRuntime.wrap(function _callee17$(_context17) {
                                                            while (1) {
                                                              switch (_context17.prev = _context17.next) {
                                                                case 0:
                                                                  _context17.next = 2;
                                                                  return (0, _emberPowerSelect.clickTrigger)();

                                                                case 2:
                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                                                                    if (!request.url.includes("?q=")) {
                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');
                                                                      request.ok(_this4.defaultChoiceList);
                                                                    } else {
                                                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query params are populated');
                                                                      request.ok(_this4.choicesList);
                                                                    }
                                                                  });
                                                                  _context17.next = 5;
                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');

                                                                case 5:
                                                                  return _context17.abrupt("return", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                                                                    return regeneratorRuntime.wrap(function _callee16$(_context16) {
                                                                      while (1) {
                                                                        switch (_context16.prev = _context16.next) {
                                                                          case 0:
                                                                            _context16.next = 2;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                                                          case 2:
                                                                            assert.deepEqual(_this4.model.country, ["UNITED KINGDOM", "INDIA", "CANADA", "UNITED STATES"], "check 'UNITED KINGDOM','INDIA','CANADA' and 'UNITED STATES'  is selected");
                                                                            _context16.next = 5;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 5:
                                                                            //  Remove first choice
                                                                            assert.deepEqual(_this4.model.country, ["INDIA", "CANADA", "UNITED STATES"], "check 'INDIA','CANADA' and 'UNITED STATES'  is selected");
                                                                            _context16.next = 8;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 8:
                                                                            assert.deepEqual(_this4.model.country, ["INDIA", "UNITED STATES"], "check 'INDIA' and 'UNITED STATES'  is selected");
                                                                            _context16.next = 11;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                                                                          case 11:
                                                                            assert.deepEqual(_this4.model.country, ["INDIA"], "check 'INDIA' is selected");
                                                                            _context16.next = 14;
                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                                                          case 14:
                                                                            assert.deepEqual(_this4.model.country, [], "check if model is empty");

                                                                          case 15:
                                                                          case "end":
                                                                            return _context16.stop();
                                                                        }
                                                                      }
                                                                    }, _callee16);
                                                                  }))));

                                                                case 6:
                                                                case "end":
                                                                  return _context17.stop();
                                                              }
                                                            }
                                                          }, _callee17);
                                                        }))));

                                                      case 4:
                                                      case "end":
                                                        return _context18.stop();
                                                    }
                                                  }
                                                }, _callee18);
                                              }))));

                                            case 9:
                                            case "end":
                                              return _context19.stop();
                                          }
                                        }
                                      }, _callee19);
                                    }))));

                                  case 6:
                                  case "end":
                                    return _context20.stop();
                                }
                              }
                            }, _callee20);
                          }))));

                        case 9:
                        case "end":
                          return _context21.stop();
                      }
                    }
                  }, _callee21);
                }))));

              case 8:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x4) {
        return _ref16.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/minSearchCharLength/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "ember-cli-fake-server", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/auto-complete | fieldOptions | minSearchCharLength ', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        choicesList: [{
          id: 'country_1',
          value: 'INDIA',
          shortCode: 'IND',
          position: 1
        }, {
          id: 'country_2',
          value: 'UNITED STATES',
          shortCode: 'USA',
          position: 2
        }, {
          id: 'country_3',
          value: 'CHINA',
          shortCode: 'CHN',
          position: 3
        }]
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 auto-complete(minSearchCharLength=5): check network requests are only made when input length is > minSearchCharLength", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: false,
                    creatable: false,
                    minSearchCharLength: 5
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCDEF&qf=value', 'query field is populated');
                  request.ok(_this.choicesList);
                });
                _context3.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context3.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context3.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCD');

              case 9:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 1, "No Choices are shown since input length < minSearchCharLength");
                          _context2.next = 3;
                          return (0, _emberPowerSelect.typeInSearch)('ABCDEF');

                        case 3:
                          return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 3, "Choices are shown since input length > minSearchCharLength");

                                  case 1:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee);
                          }))));

                        case 4:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }))));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 auto-complete-with-create-multiple(minSearchCharLength=7): check network requests are only made when input length is > minSearchCharLength", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(3);

                _createField.default.autoComplete(this, {
                  fieldOptions: {
                    multiple: true,
                    creatable: true,
                    minSearchCharLength: 7
                  },
                  optionValuePath: 'value',
                  optionLabelPath: 'value'
                });

                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {
                  assert.equal(request.url, 'url/search?q=ABCDEGHI&qf=value', 'query field is populated');
                  request.ok(_this2.choicesList);
                });
                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                _context6.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context6.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('ABCDEF');

              case 9:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 1, "No Choices are shown since input length < minSearchCharLength");
                          _context5.next = 3;
                          return (0, _emberPowerSelect.typeInSearch)('ABCDEGHI');

                        case 3:
                          return _context5.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                              while (1) {
                                switch (_context4.prev = _context4.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 4, "Choices are shown since input length > minSearchCharLength");

                                  case 1:
                                  case "end":
                                    return _context4.stop();
                                }
                              }
                            }, _callee4);
                          }))));

                        case 4:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-field/Custom/Create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Custom | Create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1: Check if the field renders and value is updated in model', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(5);
                createField.checkbox(this, {
                  custom: true
                });
                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));

                        case 2:
                          assert.ok((0, _emberNativeDomHelpers.find)('[paramchecked]'), "Check tick mark appear on the DOM");
                          assert.ok(Ember.get(_this, 'model.customField.your_gender'), "Check if selected value is updated in the model");
                          _context.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));

                        case 6:
                          assert.notOk((0, _emberNativeDomHelpers.find)('[paramchecked]'), "Check tick mark disappear on the DOM");
                          assert.notOk(Ember.get(_this, 'model.customField.your_gender'), "Check if selected value is updated in the model");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_gender', 'Hint for the field renders properly');

                        case 9:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-field/Custom/Edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Custom | Edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 : Check if the field renders with saved value in model', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.checkbox(this, {
                  custom: true
                });
                this.model = {
                  customField: {
                    your_gender: true
                  }
                };
                _context2.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.notEqual((0, _emberNativeDomHelpers.find)('input')['attributes']['paramchecked'], undefined, "Check tick mark appear on the DOM");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-field/Default/Create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Default | Create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1: Check if the field renders and value is updated in model', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(5);
                createField.checkbox(this);
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));

                        case 2:
                          assert.ok((0, _emberNativeDomHelpers.find)('[paramchecked]'), "Check tick mark appear on the DOM");
                          assert.ok(Ember.get(_this, 'model.yourGender'), "Check if selected value is updated in the model");
                          _context.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));

                        case 6:
                          assert.notOk((0, _emberNativeDomHelpers.find)('[paramchecked]'), "Check tick mark disappear on the DOM");
                          assert.notOk(Ember.get(_this, 'model.yourGender'), "Check if selected value is updated in the model");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_gender', 'Hint for the field renders properly');

                        case 9:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the checkbox component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "નમસ્તે";
                createField.checkbox(this, {
                  label: sampleLabel
                });
                _context3.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-field/Default/Edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Default | Edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1: Check if the field renders with value', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.checkbox(this);
                Ember.set(this, 'model.yourGender', true);
                _context2.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('[paramchecked]'), "Check tick mark appear on the DOM");

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-group/custom/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-checkbox-group-field", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, _createCheckboxGroupField, _emberNativeDomHelpers, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | form fields/checkbox group | custom | create", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)("#TEST1 Form gets rendered in the UI", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(4);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  custom: true
                });
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  var items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='customField.known_programming_langugages']");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[1].innerText), "C", "Check the first Option is displayed");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[2].innerText), "Java", "Check the second Option is displayed");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[3].innerText), "Go", "Check the third Option is displayed");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 Check if option selection is updated and reflected in the model and UI", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(5);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  custom: true
                });
                this.model.customField = {};
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  (0, _emberNativeDomHelpers.click)('input[value="Go"]');
                  (0, _emberNativeDomHelpers.click)('input[value="Java"]');
                  assert.equal(_this.model.customField.known_programming_langugages[0], "Go", "Check 'Go' Option is updated in the model");
                  assert.equal(_this.model.customField.known_programming_langugages[1], "Java", "Check 'Java' Option is updated in the model");
                  (0, _emberNativeDomHelpers.click)('input[value="Go"]');
                  (0, _emberNativeDomHelpers.click)('input[value="C"]');
                  assert.equal(_this.model.customField.known_programming_langugages[1], "C", "Check 'C' Option is updated in the model");
                  assert.equal(_this.model.customField.known_programming_langugages[0], "Java", "Check 'Java' Option is updated in the model");
                  assert.equal(_this.model.customField.known_programming_langugages.indexOf("Go"), -1, "Check 'Go' Option is removed from the model");
                }));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionValuePath is '', Check value is updated in model", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  optionValuePath: "",
                  custom: true
                });
                this.model.customField = {};
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input")[2]);
                  assert.deepEqual(Object.values(_this2.model.customField.known_programming_langugages[0]), ["go_id", "Go", 3, null], "Check 'Go' Option is updated in the model");
                }));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionValuePath is id, Check value is updated in model", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  optionValuePath: "id",
                  custom: true
                });
                this.model.customField = {};
                _context4.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  (0, _emberNativeDomHelpers.click)('input[value="c_id"]');
                  assert.equal(_this3.model.customField.known_programming_langugages[0], "c_id", "Check 'C' Option is updated in the model");
                }));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-group/custom/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-checkbox-group-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, _createCheckboxGroupField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | form fields/checkbox group | custom | edit", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)("#TEST1 optionValuePath is value, Check if saved value is rendered in UI", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  custom: true
                });
                this.model.customField = {
                  known_programming_langugages: ["Java", "C"]
                };
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  var items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='customField.known_programming_langugages']");
                  assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'C' is selected");
                  assert.equal(items[2].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'Java' is selected");
                }));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionValuePath is id, Check if saved value is rendered in UI", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  custom: true,
                  optionValuePath: "id"
                });
                this.model.customField = {
                  known_programming_langugages: ["c_id", "go_id"]
                };
                _context2.next = 5;
                return this.render(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  var items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='customField.known_programming_langugages']");
                  assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'C' is selected");
                  assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'Go' is selected");
                }));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionValuePath is '', Check if saved value is rendered in UI", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  optionValuePath: "",
                  custom: true
                });
                this.model = {
                  customField: {
                    known_programming_langugages: [{
                      id: "c_id",
                      value: "C",
                      position: 1,
                      parentChoiceIds: null
                    }, {
                      id: "go_id",
                      value: "Go",
                      position: 3,
                      parentChoiceIds: null
                    }]
                  }
                };
                _context3.next = 5;
                return this.render(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  var items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='customField.known_programming_langugages']");
                  assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'C' is selected");
                  assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'Go' is selected");
                }));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-group/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/create-checkbox-group-field", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, createField, _createCheckboxGroupField, _emberNativeDomHelpers, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | form fields/checkbox group | default | create", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)("#TEST1 Check if Form gets rendered in the UI as default field", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(4);
                (0, _createCheckboxGroupField.checkboxGroup)(this);
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  var items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='knownProgrammingLangugages']");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[1].innerText), "C", "Check the first Option is displayed");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[2].innerText), "Java", "Check the second Option is displayed");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[3].innerText), "Go", "Check the third Option is displayed");
                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 Check if option selection is updated and reflected in the model and UI", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(5);
                (0, _createCheckboxGroupField.checkboxGroup)(this);
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  (0, _emberNativeDomHelpers.click)('input[value="C"]');
                  (0, _emberNativeDomHelpers.click)('input[value="Java"]');
                  assert.equal(_this.model.knownProgrammingLangugages[0], "C", "Check 'C' Option is updated in the model");
                  assert.equal(_this.model.knownProgrammingLangugages[1], "Java", "Check 'Java' Option is updated in the model");
                  (0, _emberNativeDomHelpers.click)('input[value="Java"]');
                  (0, _emberNativeDomHelpers.click)('input[value="Go"]');
                  assert.equal(_this.model.knownProgrammingLangugages[0], "C", "Check 'C' Option is updated in the model");
                  assert.equal(_this.model.knownProgrammingLangugages[1], "Go", "Check 'Go' Option is updated in the model");
                  assert.equal(_this.model.knownProgrammingLangugages.indexOf("Java"), -1, "Check 'Java' Option is removed from the model");
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionValuePath is '', Check value is updated in model", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  optionValuePath: ""
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input")[1]);
                  assert.deepEqual(Object.values(_this2.model.knownProgrammingLangugages[0]), ["java_id", "Java", 2, null], "Check 'Java' Option is updated in the model");
                }));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 optionValuePath is id, Check value is updated in model", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  optionValuePath: "id"
                });
                _context4.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  (0, _emberNativeDomHelpers.click)("input[value='go_id']");
                  assert.equal(_this3.model.knownProgrammingLangugages[0], "go_id", "Check 'Go' Option is updated in the model");
                }));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the checkboxGroup component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "નમસ્તે";
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  label: sampleLabel
                });
                _context5.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-group/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-checkbox-group-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, _createCheckboxGroupField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)("Integration | Component | form fields/checkbox group | default | edit", function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)("#TEST1 optionValuePath is value, Check if saved value is rendered in UI", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var items;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createCheckboxGroupField.checkboxGroup)(this);
                this.model = {
                  knownProgrammingLangugages: ["Go", "C"]
                };
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='knownProgrammingLangugages']");
                assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'C' is selected");
                assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'Go' is selected");

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 optionValuePath is id, Check if saved value is rendered in UI", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var items;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  optionValuePath: "id"
                });
                this.model = {
                  knownProgrammingLangugages: ["go_id", "java_id"]
                };
                _context2.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='knownProgrammingLangugages']");
                assert.equal(items[2].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'Java' is selected");
                assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'Go' is selected");

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 optionValuePath is '', Check if saved value is rendered in UI", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var items;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                (0, _createCheckboxGroupField.checkboxGroup)(this, {
                  optionValuePath: ""
                });
                this.model = {
                  knownProgrammingLangugages: [{
                    id: "c_id",
                    value: "C",
                    position: 1,
                    parentChoiceIds: null
                  }, {
                    id: "java_id",
                    value: "Java",
                    position: 2,
                    parentChoiceIds: null
                  }]
                };
                _context3.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "tcMoy+jk",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"      \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                items = (0, _emberNativeDomHelpers.findAll)("[data-test-field-name='knownProgrammingLangugages']");
                assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'C' is selected");
                assert.equal(items[2].firstElementChild.hasAttribute('paramchecked'), true, "Check option 'Java' is selected");

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/checkbox-group/option/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/checkbox group/option', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.set(this, 'object', Ember.Object.create());
                Ember.set(this, 'propertyName', 'something');
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "5s6eVC03",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-fields/checkbox-group/option\",null,[[\"propertyName\",\"object\",\"value\",\"optionValuePath\"],[[20,[\"propertyName\"]],[20,[\"object\"]],\"\",\"value\"]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(this.$().text().trim(), '');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/date-field/component-test", ["qunit", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods", "dummy/tests/helpers/create-field", "ember-power-calendar/test-support", "@ember/test-helpers", "ember-qunit"], function (_qunit, _emberNativeDomHelpers, _stringHelperMethods, _createField, _testSupport, _testHelpers, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/date field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          fFrom: ''
        },
        customFieldModel: {
          customField: {
            fFrom: ''
          }
        },
        defaultFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'from_field_id',
            parent: null,
            type: 'date',
            label: 'From',
            hint: 'some_date',
            name: 'fFrom',
            position: 1,
            editable: true,
            custom: false,
            inputType: 'date-field',
            placeholder: '',
            fieldOptions: {},
            fields: []
          }]
        },
        customFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'from_field_id',
            parent: null,
            type: 'date',
            label: 'From',
            hint: 'some_date',
            name: 'fFrom',
            position: 1,
            editable: true,
            custom: true,
            inputType: 'date-field',
            placeholder: '',
            fieldOptions: {},
            fields: []
          }]
        }
      });
    });
    (0, _qunit.test)('date (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date : Field can be hidden properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(3);
                Ember.run(function () {
                  Ember.set(_this, 'defaultFieldSchema.fields.0.hidden', true);
                });
                _context2.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "t7ijM873",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')['length'], 0, 'Label for the field is hidden properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 0, 'The date control is hidden properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('button.formserv-tooltip')['length'], 0, 'Hint for the field is hidden properly');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field) : Hint for the field renders properly', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(3);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "t7ijM873",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as custom field) : Hint for the field renders properly', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(3);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field) : date control\'s contains default value and can be compared', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(4);
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                Ember.run(function () {
                  Ember.set(_this2, 'defaultFieldModel.fFrom', '2014-02-14T00:00:00.000Z');
                });
                _context5.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/14/2014', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z  as field value');

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field) : checking if wrong is provided whether the test is failing or not', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(4);
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                Ember.run(function () {
                  Ember.set(_this3, 'defaultFieldModel.fFrom', '2014-14-02T00:00:00.000Z');
                });
                _context6.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.notEqual((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/14/2014', 'The date is setted renders properly');
                assert.notEqual(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z  as field value');

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date : able to enable and disable the field based on \'editable\' property of schema', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(2);
                Ember.run(function () {
                  Ember.set(_this4, 'defaultFieldSchema.fields.0.editable', false);
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.notEqual((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is disabled when \'editable\' is \'false\'');
                Ember.run(function () {
                  Ember.set(_this4, 'defaultFieldSchema.fields.0.editable', true);
                });
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is enabled when \'editable\' is \'true\'');

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date: able to provide seperate placeholder for date control in the field', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);
                Ember.run(function () {
                  Ember.set(_this5, 'defaultFieldSchema.fields.0.fieldOptions', {
                    placeholder: {
                      date: 'Select date...'
                    }
                  });
                });
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['placeholder'], 'Select date...', 'Date control renders its placeholder');

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field) :  date control\'s contains proper content and can be selected', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(4);
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context9.next = 6;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 6:
                _context9.next = 8;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field) : Default date can be overridden', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this6, 'defaultFieldModel.fFrom', '2014-02-14');
                });
                _context10.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14', 'Initially the field is rendered with 2014-02-14');
                _context10.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context10.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field) : selecting a date for two times and saving', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(7);
                _context11.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context11.next = 6;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 6:
                _context11.next = 8;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');
                _context11.next = 13;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 13:
                _context11.next = 15;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date("2014-02-28"));

              case 15:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2014', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 18:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field) :  date control\'s savingFormat can be changed', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var formConfig, datePickerConfig;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(4);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                datePickerConfig = Ember.get(formConfig, 'datePickerDefaultConfig');
                Ember.run(function () {
                  formConfig.set('datePickerDefaultConfig', {
                    format: 'DD/MM/YYYY'
                  });
                });
                _context12.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context12.next = 9;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 9:
                _context12.next = 11;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 11:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28/02/2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');
                Ember.run(function () {
                  formConfig.set('datePickerDefaultConfig', datePickerConfig);
                });

              case 15:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the date component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "નમસ્તે";

                _createField.default.date(this, {
                  label: sampleLabel
                });

                _context13.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------

    (0, _qunit.test)('date(as default field): passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this7, 'defaultFieldSchema.fields.0.fieldOptions', {
                    format: 'YYYY-MM-DD'
                  });
                });
                _context14.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context14.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context14.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013-02-28', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field): passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this8, 'defaultFieldSchema.fields.0.fieldOptions', {
                    format: 'YYYY/MM/DD'
                  });
                });
                _context15.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context15.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context15.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013/02/28', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date(as default field): passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions', {
                    format: 'DD-MM-YYYY'
                  });
                });
                _context16.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context16.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context16.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28-02-2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x16) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("date(as default field): passing a different format in 'formOptions' to a date field, nested inside section fields", /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  var formSchema = {
                    name: 'Nested Sections formOptions test Form',
                    formOptions: {
                      format: 'DD-MM-YYYY'
                    },
                    fields: [{
                      id: 'basic_info_id',
                      parent: null,
                      type: 'section',
                      label: 'Basic Information',
                      name: 'basic_info',
                      position: 1,
                      editable: true,
                      custom: false,
                      inputType: 'nested-section',
                      placeholder: '',
                      fieldOptions: {},
                      fields: [{
                        id: 'personal_info_id',
                        parent: null,
                        type: 'section',
                        label: 'Personal Information',
                        name: 'personal_info',
                        position: 1,
                        editable: true,
                        custom: false,
                        inputType: 'nested-section',
                        placeholder: '',
                        fieldOptions: {},
                        fields: [{
                          id: 'from_field_id',
                          parent: null,
                          type: 'Date of Birth',
                          label: 'From',
                          hint: 'some_date',
                          name: 'date_of_birth',
                          position: 1,
                          editable: true,
                          custom: false,
                          inputType: 'date-field',
                          placeholder: '',
                          fieldOptions: {},
                          fields: []
                        }]
                      }]
                    }]
                  };
                  Ember.set(_this10, 'dateInsideSectionsFormSchema', formSchema);
                });
                _context17.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "d2SkRKmz",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"dateInsideSectionsFormSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.dateOfBirth'), undefined, 'field data in model is undefined initially');
                _context17.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context17.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28-02-2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.dateOfBirth'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x17) {
        return _ref18.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/date-range-field/component-test", ["qunit", "ember-native-dom-helpers", "ember-power-calendar/test-support", "@ember/test-helpers", "ember-qunit"], function (_qunit, _emberNativeDomHelpers, _testSupport, _testHelpers, _emberQunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/date range field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {},
        defaultFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'date_range_id',
            label: 'Time period',
            name: 'date_range_name',
            position: 1,
            editable: true,
            custom: false,
            type: 'date_range',
            inputType: 'date-range-field',
            fieldOptions: {},
            fields: [{
              id: 'date_from_id',
              label: 'From date',
              name: 'from_date',
              type: 'date',
              inputType: 'datetime-field',
              custom: false,
              field_class: 'period',
              parent_id: 'date_range_id',
              visible: false,
              fieldOptions: {
                'isFromDate': 'true'
              },
              fields: []
            }, {
              id: 'date_to_id',
              label: 'To date',
              name: 'to_date',
              type: 'date',
              inputType: 'datetime-field',
              custom: false,
              field_class: 'period',
              parent_id: 'date_range_id',
              visible: false,
              fieldOptions: {
                'isFromDate': 'false'
              },
              fields: []
            }]
          }]
        },
        customFieldModel: {
          customField: {}
        },
        customFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'date_range_id',
            label: 'Time period',
            name: 'date_range_name',
            position: 1,
            editable: true,
            custom: true,
            inputType: 'date-range-field',
            fieldOptions: {},
            fields: [{
              id: 'date_from_id',
              label: 'From date',
              name: 'from_date',
              inputType: 'datetime-field',
              custom: true,
              field_class: 'period',
              parent_id: 'date_range_id',
              visible: false,
              fieldOptions: {
                'isFromDate': 'true'
              },
              fields: []
            }, {
              id: 'date_to_id',
              label: 'To date',
              name: 'to_date',
              inputType: 'datetime-field',
              custom: true,
              field_class: 'period',
              parent_id: 'date_range_id',
              visible: false,
              fieldOptions: {
                'isFromDate': 'false'
              },
              fields: []
            }]
          }]
        }
      });
    });
    (0, _qunit.test)('date range field(as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(10);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Time period', 'Label for the field renders properly');
                assert.notOk((0, _emberNativeDomHelpers.findAll)('label')[1], '', 'nested date fields does not be get rendered');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date range control renders properly');
                assert.notOk(Ember.get(this, 'defaultFieldModel.fromDate'), '', 'From date field data in model is empty');
                _context.next = 9;
                return (0, _emberNativeDomHelpers.click)('.date-range-control .ember-basic-dropdown-trigger');

              case 9:
                _context.next = 11;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 11:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - ', 'The date set renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');
                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'To date field data in model is empty');
                _context.next = 16;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date("2014-02-28"));

              case 16:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - 02/28/2014', 'The date range renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as from date value');
                assert.equal(Ember.get(this, 'defaultFieldModel.toDate'), '2014-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as to date value');

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date range field(as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(10);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Time period', 'Label for the field renders properly');
                assert.notOk((0, _emberNativeDomHelpers.findAll)('label')[1], '', 'nested date fields does not be get rendered');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date range control renders properly');
                assert.notOk(Ember.get(this, 'customFieldModel.customField.fromDate'), '', 'From date field data in model is empty');
                _context2.next = 9;
                return (0, _emberNativeDomHelpers.click)('.date-range-control .ember-basic-dropdown-trigger');

              case 9:
                _context2.next = 11;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 11:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - ', 'The date set renders properly');
                assert.equal(Ember.get(this, 'customFieldModel.customField.from_date'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');
                assert.notOk(Ember.get(this, 'customFieldModel.customField.to_date'), '', 'To date field data in model is empty');
                _context2.next = 16;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date("2014-02-28"));

              case 16:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - 02/28/2014', 'The date range renders properly');
                assert.equal(Ember.get(this, 'customFieldModel.customField.from_date'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as from date value');
                assert.equal(Ember.get(this, 'customFieldModel.customField.to_date'), '2014-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as to date value');

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date range field(as default field) :  date control\'s savingFormat can be changed', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var formConfig, dateRangePickerDefaultConfig;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(6);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dateRangePickerDefaultConfig = Ember.get(formConfig, 'dateRangePickerDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dateRangePickerDefaultConfig', {
                    format: 'DD/MM/YYYY'
                  });
                });
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.notOk(Ember.get(this, 'defaultFieldModel.fromDate'), '', 'from date in model is empty');
                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'to date in model is empty');
                _context3.next = 10;
                return (0, _emberNativeDomHelpers.click)('.date-range-control .ember-basic-dropdown-trigger');

              case 10:
                _context3.next = 12;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 12:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date range control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - ', 'The date set renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');
                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'to date in model is empty');
                Ember.run(function () {
                  formConfig.set('dateRangePickerDefaultConfig', dateRangePickerDefaultConfig);
                });

              case 17:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date range field(as default field) : date range control\'s contains default value and can be compared', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(6);
                assert.notOk(Ember.get(this, 'defaultFieldModel.fromDate'), '', 'from date in model is empty');
                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'to date in model is empty');
                Ember.run(function () {
                  Ember.set(_this, 'defaultFieldModel.fromDate', '2021-02-14T00:00:00.000Z');
                  Ember.set(_this, 'defaultFieldModel.toDate', '2021-03-28T00:00:00.000Z');
                });
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/14/2021 - 03/28/2021', 'The date is set renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2021-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z as from date value');
                assert.equal(Ember.get(this, 'defaultFieldModel.toDate'), '2021-03-28T00:00:00.000Z', 'Model contains 2021-03-28T00:00:00.000Z as to date value');

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date range field(as custom field) : date range control\'s contains default value and can be compared', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(6);
                assert.notOk(Ember.get(this, 'customFieldModel.customField.from_date'), '', 'from date in model is empty');
                assert.notOk(Ember.get(this, 'customFieldModel.customField.to_date'), '', 'to date in model is empty');
                Ember.run(function () {
                  Ember.set(_this2, 'customFieldModel.customField.from_date', '2021-02-14T00:00:00.000Z');
                  Ember.set(_this2, 'customFieldModel.customField.to_date', '2021-03-28T00:00:00.000Z');
                });
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/14/2021 - 03/28/2021', 'The date set renders properly');
                assert.equal(Ember.get(this, 'customFieldModel.customField.from_date'), '2021-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z as from date value');
                assert.equal(Ember.get(this, 'customFieldModel.customField.to_date'), '2021-03-28T00:00:00.000Z', 'Model contains 2021-03-28T00:00:00.000Z as to date value');

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/date-time-split-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/string-helper-methods", "dummy/tests/helpers/create-field", "ember-power-calendar/test-support"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods, createField, _testSupport) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/date time split field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          fFrom: ''
        },
        customFieldModel: {
          customField: {
            fFrom: ''
          }
        },
        defaultFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'from_field_id',
            parent: null,
            type: 'date_time_split',
            label: 'From',
            hint: 'some_date',
            name: 'fFrom',
            position: 1,
            editable: true,
            custom: false,
            inputType: 'date-time-split-field',
            placeholder: '',
            fieldOptions: {},
            fields: []
          }]
        },
        customFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'from_field_id',
            parent: null,
            type: 'date_time_split',
            label: 'From',
            hint: 'some_date',
            name: 'fFrom',
            position: 1,
            editable: true,
            custom: true,
            inputType: 'date-time-split-field',
            placeholder: '',
            fieldOptions: {},
            fields: []
          }]
        }
      });
    });
    (0, _qunit.test)('date-time-split (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(4);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')['length'], 1, 'The time control renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(4);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')['length'], 1, 'The time control renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split : Field can be hidden properly', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this, 'defaultFieldSchema.fields.0.hidden', true);
                });
                _context3.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "t7ijM873",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')['length'], 0, 'Label for the field is hidden properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 0, 'The date control is hidden properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')['length'], 0, 'The time control is hidden properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('button.formserv-tooltip')['length'], 0, 'Hint for the field is hidden properly');

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as default field) : clicking the time control expands to show dropdown content', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(3);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');
                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as custom field) : clicking the time control expands to show dropdown content', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(2);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');
                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as default field) : all time control choices renders properly', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);
                _context6.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberPowerSelect.clickTrigger)();
                return _context6.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 96, 'All choices are getting displayed');
                }));

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as custom field) : all time control choices renders properly', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(3);
                _context7.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                (0, _emberPowerSelect.clickTrigger)();
                return _context7.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 96, 'All choices are getting displayed');
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]['innerText'], '12:00 AM', 'First choice is displayed properly');
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[95]['innerText'], '11:45 PM', 'Last choice is displayed properly');
                }));

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split(as default field) :  date control\'s contains proper content and can be selected', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(4);
                _context8.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context8.next = 6;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 6:
                _context8.next = 8;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T  as field value');

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as custom field) : date control\'s contains proper content and can be selected', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(4);
                _context9.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '', 'field data in model is empty');
                _context9.next = 6;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 6:
                _context9.next = 8;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T  as field value');

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as default field) : time control\'s options contain proper content and can be selected and replaced', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(7);
                _context10.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13); //  Press Enter

                return _context10.abrupt("return", (0, _wait.default)().then(function () {
                  var optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .ember-power-select-selected-item');
                  assert.equal(optionDomElement.length, 1, 'A choice is now selected');
                  assert.equal(optionDomElement[0]['innerText'], '12:00 AM', 'Choice \'12:00 AM\' is now selected');
                  assert.equal(Ember.get(_this2, 'defaultFieldModel.fFrom'), 'T00:00:00.000Z', 'Model contains \'T00:00:00.000Z\' as field value');
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0], 40); //  Press Key-down

                  //  Press Key-down
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0], 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .ember-power-select-selected-item');
                    assert.equal(optionDomElement.length, 1, 'Another choice are now selected');
                    assert.equal(optionDomElement[0]['innerText'], '12:15 AM', 'Choice \'12:15 AM\' is also selected now');
                    assert.equal(Ember.get(_this2, 'defaultFieldModel.fFrom'), 'T00:15:00.000Z', 'Model contains \'T00:15:00.000Z\' as field value');
                  });
                }));

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as custom field) : time control\'s options contain proper content and can be selected and replaced', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(7);
                _context11.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '', 'field data in model is empty');
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13); //  Press Enter

                return _context11.abrupt("return", (0, _wait.default)().then(function () {
                  var optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .ember-power-select-selected-item');
                  assert.equal(optionDomElement.length, 1, 'A choice is now selected');
                  assert.equal(optionDomElement[0]['innerText'], '12:00 AM', 'Choice \'12:00 AM\' is now selected');
                  assert.equal(Ember.get(_this3, 'customFieldModel.customField.fFrom'), 'T00:00:00.000Z', 'Model contains \'T00:00:00.000Z\' as field value');
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 40); //  Press Key-down

                  //  Press Key-down
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .ember-power-select-selected-item');
                    assert.equal(optionDomElement.length, 1, 'Another choice are now selected');
                    assert.equal(optionDomElement[0]['innerText'], '12:15 AM', 'Choice \'12:15 AM\' is  selected now');
                    assert.equal(Ember.get(_this3, 'customFieldModel.customField.fFrom'), 'T00:15:00.000Z', 'Model contains \'T00:15:00.000Z\' as field value');
                  });
                }));

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as default field) : date and time can be selected and replaced', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(6);
                _context12.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context12.next = 6;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 6:
                _context12.next = 8;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 8:
                _context12.next = 10;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));

              case 10:
                _context12.next = 12;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);

              case 12:
                return _context12.abrupt("return", (0, _wait.default)().then(function () {
                  var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .ember-power-select-selected-item');
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');
                  assert.equal(timeDomElement.length, 1, 'A time is now selected');
                  assert.equal(timeDomElement[0]['innerText'], '12:00 AM', 'Time \'12:00 AM\' is now selected');
                  assert.equal(Ember.get(_this4, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains \'2013-02-28T00:00:00.000Z\' as field value');
                }));

              case 13:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as custom field) : date and time can be selected and replaced', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(6);
                _context13.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '', 'field data in model is empty');
                _context13.next = 6;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 6:
                _context13.next = 8;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 8:
                _context13.next = 10;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));

              case 10:
                _context13.next = 12;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);

              case 12:
                return _context13.abrupt("return", (0, _wait.default)().then(function () {
                  var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .date-control input');
                  var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .ember-power-select-selected-item');
                  assert.equal(dateDomElement.length, 1, 'A date is now selected');
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');
                  assert.equal(timeDomElement.length, 1, 'A time is now selected');
                  assert.equal(timeDomElement[0]['innerText'], '12:00 AM', 'Time \'12:00 AM\' is now selected');
                  assert.equal(Ember.get(_this5, 'customFieldModel.customField.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains \'2013-02-28T00:00:00.000Z\' as field value');
                }));

              case 13:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as default field) : in edit scenerio, the control renders the content properly', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(9);
                Ember.run(function () {
                  Ember.set(_this6, 'defaultFieldModel.fFrom', '2014-02-14T23:15:00.000Z');
                });
                _context15.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14T23:15:00.000Z', 'Initially the field contains the content provided');
                return _context15.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  var dateDomElement, timeDomElement;
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .date-control input');
                          timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .ember-power-select-selected-item');
                          assert.equal(dateDomElement[0]['value'], '02/14/2014', 'Date \'02/14/2014\' is now selected in date control');
                          assert.equal(timeDomElement.length, 1, 'A choice is now selected in time control');
                          assert.equal(timeDomElement[0]['innerText'], '11:15 PM', 'Time \'11:15 PM\' is now selected in time control');
                          _context14.next = 7;
                          return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

                        case 7:
                          _context14.next = 9;
                          return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

                        case 9:
                          _context14.next = 11;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));

                        case 11:
                          _context14.next = 13;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 40);

                        case 13:
                          _context14.next = 15;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);

                        case 15:
                          return _context14.abrupt("return", (0, _wait.default)().then(function () {
                            var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .date-control input');
                            var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .ember-power-select-selected-item');
                            assert.equal(dateDomElement.length, 1, 'A date is now selected');
                            assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The selected date renders properly');
                            assert.equal(timeDomElement.length, 1, 'A time is now selected');
                            assert.equal(timeDomElement[0]['innerText'], '11:30 PM', 'Time \'11:30 PM\' is now selected');
                            assert.equal(Ember.get(_this6, 'defaultFieldModel.fFrom'), '2013-02-28T23:30:00.000Z', 'Model contains \'2013-02-28T23:30:00.000Z\' as field value');
                          }));

                        case 16:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))));

              case 6:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split (as custom field) : in edit scenerio, the control renders the content properly', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                assert.expect(9);
                Ember.run(function () {
                  Ember.set(_this7, 'customFieldModel.customField.fFrom', '2014-02-14T23:15:00.000Z');
                });
                _context17.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '2014-02-14T23:15:00.000Z', 'Initially the field contains the content provided');
                return _context17.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                  var dateDomElement, timeDomElement;
                  return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                      switch (_context16.prev = _context16.next) {
                        case 0:
                          dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .date-control input');
                          timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .ember-power-select-selected-item');
                          assert.equal(dateDomElement[0]['value'], '02/14/2014', 'Date \'02/14/2014\' is now selected in date control');
                          assert.equal(timeDomElement.length, 1, 'A choice is now selected in time control');
                          assert.equal(timeDomElement[0]['innerText'], '11:15 PM', 'Time \'11:15 PM\' is now selected in time control');
                          _context16.next = 7;
                          return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

                        case 7:
                          _context16.next = 9;
                          return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

                        case 9:
                          _context16.next = 11;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));

                        case 11:
                          _context16.next = 13;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 40);

                        case 13:
                          _context16.next = 15;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);

                        case 15:
                          return _context16.abrupt("return", (0, _wait.default)().then(function () {
                            var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .date-control input');
                            var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fFrom"] .ember-power-select-selected-item');
                            assert.equal(dateDomElement.length, 1, 'A date is now selected');
                            assert.equal(dateDomElement[0]['value'], '02/28/2013', 'Date \'02/28/2013\' is now selected');
                            assert.equal(timeDomElement.length, 1, 'A time is now selected');
                            assert.equal(timeDomElement[0]['innerText'], '11:30 PM', 'Time \'11:30 PM\' is now selected');
                            assert.equal(Ember.get(_this7, 'customFieldModel.customField.fFrom'), '2013-02-28T23:30:00.000Z', 'Model contains \'2014-02-15T23:30:00.000Z\' as field value');
                          }));

                        case 16:
                        case "end":
                          return _context16.stop();
                      }
                    }
                  }, _callee16);
                }))));

              case 6:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split : able to enable and disable the field based on \'editable\' property of schema', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this8, 'defaultFieldSchema.fields.0.editable', false);
                });
                _context18.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.notEqual((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is disabled when \'editable\' is \'true\'');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'].value, 'true', 'Time control is disabled when \'editable\' is \'true\'');
                Ember.run(function () {
                  Ember.set(_this8, 'defaultFieldSchema.fields.0.editable', true);
                });
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is enabled when \'editable\' is \'false\'');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Time control is enabled when \'editable\' is \'false\'');

              case 9:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      return function (_x16) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split : able to provide seperate placeholders for date and time control in the field', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                assert.expect(2);
                Ember.run(function () {
                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions', {
                    placeholder: {
                      date: 'Select date...',
                      time: 'Select time...'
                    }
                  });
                });
                _context19.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['placeholder'], 'Select date...', 'Date control renders its placeholder');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-placeholder')[0]['innerText'], 'Select time...', 'Time control renders its placeholder');

              case 6:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      return function (_x17) {
        return _ref20.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the date-time-split component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "שלום";
                createField.dateTimeSplit(this, {
                  label: sampleLabel
                });
                _context20.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      return function (_x18) {
        return _ref21.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------

    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fieldOptions', {
                    format: 'YYYY-MM-DD'
                  });
                });
                _context21.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context21.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context21.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013-02-28', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x19) {
        return _ref22.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var _this11 = this;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fieldOptions', {
                    format: 'YYYY/MM/DD'
                  });
                });
                _context22.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context22.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context22.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013/02/28', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x20) {
        return _ref23.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
        var _this12 = this;

        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions', {
                    format: 'DD-MM-YYYY'
                  });
                });
                _context23.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context23.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context23.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28-02-2013', 'The date is setted renders properly');
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T00:00:00.000Z  as field value');

              case 12:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      return function (_x21) {
        return _ref24.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {
      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {
        var _this13 = this;

        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                assert.expect(6);
                Ember.run(function () {
                  Ember.set(_this13, 'defaultFieldSchema.fields.0.fieldOptions', {
                    format: 'YYYY-MM-DD'
                  });
                });
                _context24.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');
                _context24.next = 7;
                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');

              case 7:
                _context24.next = 9;
                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));

              case 9:
                _context24.next = 11;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));

              case 11:
                _context24.next = 13;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);

              case 13:
                return _context24.abrupt("return", (0, _wait.default)().then(function () {
                  var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .date-control input');
                  var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fFrom"] .ember-power-select-selected-item');
                  assert.equal(dateDomElement.length, 1, 'A date is now selected');
                  assert.equal(dateDomElement[0]['value'], '2013-02-28', 'Date \'2013-02-28\' is now selected');
                  assert.equal(timeDomElement.length, 1, 'A time is now selected');
                  assert.equal(timeDomElement[0]['innerText'], '12:00 AM', 'Time \'11:30 PM\' is now selected');
                  assert.equal(Ember.get(_this13, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains \'2014-02-15T23:30:00.000Z\' as field value');
                }));

              case 14:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      return function (_x22) {
        return _ref25.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/dependent-dropdown-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/dependent dropdown field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          cfCountry: undefined,
          cfNorthState: undefined,
          cfSouthState: undefined,
          cfNorthStateUrbanCity: undefined,
          cfNorthStateRuralCity: undefined
        },
        defaultFieldSchema: {
          name: 'Dependent Dropdown Test Form',
          description: 'A form designed to test the rendering of dependent dropdown in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            hint: 'resident_country',
            type: 'dependent_dropdown',
            position: 1,
            required: false,
            editable: true,
            custom: false,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              parentChoiceIds: null
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              parentChoiceIds: null
            }],
            inputType: 'dependent-dropdown',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'id',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              hint: 'resident_state',
              type: 'dependent_dropdown',
              position: 1,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                parentChoiceIds: ['usa_id']
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                parentChoiceIds: ['india_id']
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                parentChoiceIds: ['usa_id']
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                parentChoiceIds: ['india_id']
              }],
              inputType: 'dependent-dropdown',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                hint: 'current_resident_northern_state_urban_city',
                type: 'dropdown',
                position: 1,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  parentChoiceIds: ['punjab_id']
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  parentChoiceIds: ['punjab_id']
                }],
                inputType: 'power-select-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'dropdown',
                position: 2,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  parentChoiceIds: ['punjab_id']
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  parentChoiceIds: ['punjab_id']
                }],
                inputType: 'power-select-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'dropdown',
              position: 2,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                parentChoiceIds: ['india_id']
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                parentChoiceIds: ['india_id']
              }],
              inputType: 'power-select-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        }
      });
    });

    function assertFieldStatusBeforeClick(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] label')['innerText'].trim(), fieldLabel, 'Label for \'' + fieldName + '\' field renders properly');
    }

    function assertFieldStatusAfterClick(assert, fieldName, fieldDomId, choiceValues) {
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option').length, choiceValues.length, 'All choices for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[0]['innerText'].trim(), choiceValues[0], 'First choice is \'' + choiceValues[0] + '\' for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[1]['innerText'].trim(), choiceValues[1], 'Second choice is \'' + choiceValues[1] + '\' for \'' + fieldName + '\' field');
    }

    function assertFieldStatusAfterSelect(assert, testScope, fieldName, fieldChoiceSelected, valueInModel, fieldsCnt, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
      var fieldDom = (0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] .ember-power-select-selected-item');
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], fieldsCnt, 'All dependent selects for \'' + fieldName + '\' field renders properly');
      if (Ember.isNone(fieldDom)) assert.equal(fieldDom, fieldChoiceSelected, 'No choice for \'' + fieldName + '\' field is selected now');else assert.equal(fieldDom['innerText'], fieldChoiceSelected, 'Choice \'' + fieldChoiceSelected + '\' for \'' + fieldName + '\' field is selected now');
    }

    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {
      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';
      var fieldNameIndex = 0;

      for (var fieldName in Ember.get(testScope, model)) {
        var pathName = isDefault ? fieldName : 'customField.' + fieldName;
        var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \'' + valuesInModel[fieldNameIndex] + '\' as value for \'' + fieldName + '\' field');
        fieldNameIndex++;
      }
    }

    (0, _qunit.test)('dependent-dropdown-field with leaf fields as dropdowns : selecting or unselecting a choice of controlling field updates its dependent dropdowns', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var fieldId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(47);
                this.owner.register('component:custom-tooltip', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "wpQ1P2uR",
                    "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[9,\"class\",\"my_tooltip\"],[7],[0,\"This_is_custom_tooltip\"],[8]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                Ember.setProperties(this, {
                  fieldNameToHintComponentMap: {
                    cfNorthState: 'custom-tooltip'
                  }
                });
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "G8ajctLL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldNameToHintComponentMap\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]],[20,[\"fieldNameToHintComponentMap\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?resident_country', 'Hint for the field renders properly');
                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('cfCountry_hint'), 'Hint id for the hint component gets populated properly');
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'India', 'india_id', 3, true);
                  assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Hint for the field renders properly');
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this, 'cfNorthState', 'North State', undefined, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _testHelpers.settled)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);
                    assert.equal(Ember.$('button.formserv-tooltip').text().replace(/\s/g, ''), '?resident_country?current_resident_northern_state_urban_city', 'Hint for the field renders properly');
                    assert.ok(Ember.$('button.formserv-tooltip')[1]['id'].includes('cfNorthStateUrbanCity_hint'), 'Hint id for the hint component gets populated properly');
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    Ember.run(function () {
                      _this.owner.unregister('component:custom-tooltip');
                    });
                    return (0, _testHelpers.settled)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this, 'cfNorthStateUrbanCity', 'Patiala', 'patiala_id', 5, true);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this, 'cfCountry', 'Country', 'india_id', true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _testHelpers.settled)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'USA', 'usa_id', 2, true);
                        assertModelStatus(assert, _this, ['usa_id', undefined, undefined, undefined, undefined], true);
                      });
                    });
                  });
                }));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/dependent-select/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/dependent select', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "D+TlJRx8",
                  "block": "{\"symbols\":[],\"statements\":[[1,[18,\"form-fields/dependent-select\"],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
                assert.equal(this.$().text().trim(), '');

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/dependent-selects/checkbox-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/dependent selects/checkbox field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          cfProvidedName: undefined,
          cfProvidedPersonalInfo: undefined,
          cfProvidedAge: undefined,
          cfProvidedGender: undefined,
          cfProvidedAddress: undefined
        },
        customFieldModel: {
          customField: {
            cfProvidedName: undefined,
            cfProvidedPersonalInfo: undefined,
            cfProvidedAge: undefined,
            cfProvidedGender: undefined,
            cfProvidedAddress: undefined
          }
        },
        defaultFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "provided_name_id",
            name: "cfProvidedName",
            label: "Provided Name ?",
            type: 'checkbox',
            position: 1,
            required: false,
            editable: true,
            custom: false,
            getChoices: [{
              id: "provided_name_true_id",
              value: "true",
              position: 1,
              dependentIds: {
                field: ["provided_personal_info_id", "provided_address_id"]
              }
            }, {
              id: "provided_name_false_id",
              value: "false",
              position: 2,
              dependentIds: {
                field: []
              }
            }],
            inputType: 'checkbox-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'id',
            optionLabelPath: 'value',
            fields: [{
              id: "provided_personal_info_id",
              name: "cfProvidedPersonalInfo",
              label: "Provided Personal Information ?",
              type: 'checkbox',
              position: 1,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "provided_personal_info_true_id",
                value: "true",
                position: 3,
                dependentIds: {
                  field: ["provided_age_id", "provided_gender_id"]
                }
              }, {
                id: "provided_personal_info_false_id",
                value: "false",
                position: 7,
                dependentIds: {
                  field: []
                }
              }],
              inputType: 'checkbox-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: [{
                id: "provided_age_id",
                name: "cfProvidedAge",
                label: "Provided Age ?",
                type: 'checkbox',
                position: 1,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "provided_age_true_id",
                  value: "true",
                  position: 1,
                  dependentIds: {
                    field: []
                  }
                }, {
                  id: "provided_age_false_id",
                  value: "false",
                  position: 2,
                  dependentIds: {
                    field: []
                  }
                }],
                inputType: 'checkbox-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "provided_gender_id",
                name: "cfProvidedGender",
                label: "Provided Gender ?",
                type: 'checkbox',
                position: 2,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "provided_gender_true_id",
                  value: "true",
                  position: 1,
                  dependentIds: {
                    field: []
                  }
                }, {
                  id: "provided_gender_false_id",
                  value: "false",
                  position: 2,
                  dependentIds: {
                    field: []
                  }
                }],
                inputType: 'checkbox-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "provided_address_id",
              name: "cfProvidedAddress",
              label: "Provided Address ?",
              hint: 'current_residence',
              type: 'checkbox',
              position: 2,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "provided_address_true_id",
                value: "true",
                position: 1,
                dependentIds: {
                  field: []
                }
              }, {
                id: "provided_address_false_id",
                value: "false",
                position: 2,
                dependentIds: {
                  field: []
                }
              }],
              inputType: 'checkbox-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        },
        customFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "provided_name_id",
            name: "cfProvidedName",
            label: "Provided Name ?",
            type: 'checkbox',
            position: 1,
            required: false,
            editable: true,
            custom: true,
            getChoices: [{
              id: "provided_name_true_id",
              value: "true",
              position: 1,
              dependentIds: {
                field: ["provided_personal_info_id", "provided_address_id"]
              }
            }, {
              id: "provided_name_false_id",
              value: "false",
              position: 2,
              dependentIds: {
                field: []
              }
            }],
            inputType: 'checkbox-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'value',
            optionLabelPath: 'value',
            fields: [{
              id: "provided_personal_info_id",
              name: "cfProvidedPersonalInfo",
              label: "Provided Personal Information ?",
              type: 'checkbox',
              position: 1,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "provided_personal_info_true_id",
                value: "true",
                position: 3,
                dependentIds: {
                  field: ["provided_age_id", "provided_gender_id"]
                }
              }, {
                id: "provided_personal_info_false_id",
                value: "false",
                position: 7,
                dependentIds: {
                  field: []
                }
              }],
              inputType: 'checkbox-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: [{
                id: "provided_age_id",
                name: "cfProvidedAge",
                label: "Provided Age ?",
                type: 'checkbox',
                position: 1,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "provided_age_true_id",
                  value: "true",
                  position: 1,
                  dependentIds: {
                    field: []
                  }
                }, {
                  id: "provided_age_false_id",
                  value: "false",
                  position: 2,
                  dependentIds: {
                    field: []
                  }
                }],
                inputType: 'checkbox-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                fields: []
              }, {
                id: "provided_gender_id",
                name: "cfProvidedGender",
                label: "Provided Gender ?",
                type: 'checkbox',
                position: 2,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "provided_gender_true_id",
                  value: "true",
                  position: 1,
                  dependentIds: {
                    field: []
                  }
                }, {
                  id: "provided_gender_false_id",
                  value: "false",
                  position: 2,
                  dependentIds: {
                    field: []
                  }
                }],
                inputType: 'checkbox-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "provided_address_id",
              name: "cfProvidedAddress",
              label: "Provided Address ?",
              hint: 'current_residence',
              type: 'checkbox',
              position: 2,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "provided_address_true_id",
                value: "true",
                position: 1,
                dependentIds: {
                  field: []
                }
              }, {
                id: "provided_address_false_id",
                value: "false",
                position: 2,
                dependentIds: {
                  field: []
                }
              }],
              inputType: 'checkbox-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        }
      });
    });

    function assertFieldStatus(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] label')['innerText'].trim(), fieldLabel, 'Label for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input')[0]['type'], 'checkbox', 'Choices are displayed as checkbox for \'' + fieldName + '\' field');
    }

    function assertChoiceStatus(assert, fieldName, isChecked, fieldsCnt, isDefault) {
      var checkboxStatus = isChecked ? 'checked' : 'unchecked';
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      assert.equal((0, _emberNativeDomHelpers.findAll)('input')['length'], fieldsCnt, 'All dependent selects for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input')[0]['checked'], isChecked, 'Checkbox for \'' + fieldName + '\' field is ' + checkboxStatus + ' now');
    }

    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {
      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';
      var fieldNameIndex = 0;

      for (var fieldName in Ember.get(testScope, model)) {
        var pathName = isDefault ? fieldName : 'customField.' + fieldName;
        var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \'' + valuesInModel[fieldNameIndex] + '\' as value for \'' + fieldName + '\' field');
        fieldNameIndex++;
      }
    }

    (0, _qunit.test)('dependent-checkbox-field (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(6);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), "", 'Hint for the field does not render if field is not selected');
                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, true);
                assertChoiceStatus(assert, 'cfProvidedName', false, 1, true);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-checkbox-field (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(6);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), "", 'Hint for the field does not render if field is not selected');
                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, false);
                assertChoiceStatus(assert, 'cfProvidedName', false, 1, false);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-checkbox-field (as default field) : checking or unchecking a controlling field updates its dependent fields', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(55);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertModelStatus(assert, this, [false, undefined, undefined, undefined, undefined], true);
                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, true);
                assertChoiceStatus(assert, 'cfProvidedName', false, 1, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfProvidedName"] input'));
                assertChoiceStatus(assert, 'cfProvidedName', true, 3, true);
                assertModelStatus(assert, this, [true, false, undefined, undefined, false], true);
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assertFieldStatus(assert, _this, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', false, true);
                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', false, 3, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfProvidedPersonalInfo"] input'));
                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, true);
                  assertModelStatus(assert, _this, [true, true, false, false, false], true);
                  return (0, _testHelpers.settled)().then(function () {
                    assertFieldStatus(assert, _this, 'cfProvidedGender', 'Provided Gender ?', false, true);
                    assertChoiceStatus(assert, 'cfProvidedGender', false, 5, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfProvidedGender"] input'));
                    assertChoiceStatus(assert, 'cfProvidedGender', true, 5, true);
                    assertModelStatus(assert, _this, [true, true, false, true, false], true);
                    return (0, _testHelpers.settled)().then(function () {
                      assertFieldStatus(assert, _this, 'cfProvidedName', 'Provided Name ?', true, true);
                      assertChoiceStatus(assert, 'cfProvidedName', true, 5, true);
                      assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residence', 'Hint for the field renders properly');
                      assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('cfProvidedAddress_hint'), 'Hint id for the hint component gets populated properly');
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfProvidedName"] input'));
                      assertChoiceStatus(assert, 'cfProvidedName', false, 1, true);
                      assertModelStatus(assert, _this, [false, undefined, undefined, undefined, undefined], true);
                    });
                  });
                }));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-checkbox-field (as custom field) : checking or unchecking a controlling field updates its dependent fields', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(55);
                _context4.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertModelStatus(assert, this, [false, undefined, undefined, undefined, undefined], false);
                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, false);
                assertChoiceStatus(assert, 'cfProvidedName', false, 1, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfProvidedName"] input'));
                assertChoiceStatus(assert, 'cfProvidedName', true, 3, false);
                assertModelStatus(assert, this, [true, false, undefined, undefined, false], false);
                return _context4.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assertFieldStatus(assert, _this2, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', false, false);
                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', false, 3, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfProvidedPersonalInfo"] input'));
                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, false);
                  assertModelStatus(assert, _this2, [true, true, false, false, false], false);
                  return (0, _testHelpers.settled)().then(function () {
                    assertFieldStatus(assert, _this2, 'cfProvidedGender', 'Provided Gender ?', false, false);
                    assertChoiceStatus(assert, 'cfProvidedGender', false, 5, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfProvidedGender"] input'));
                    assertChoiceStatus(assert, 'cfProvidedGender', true, 5, false);
                    assertModelStatus(assert, _this2, [true, true, false, true, false], false);
                    return (0, _testHelpers.settled)().then(function () {
                      assertFieldStatus(assert, _this2, 'cfProvidedName', 'Provided Name ?', true, false);
                      assertChoiceStatus(assert, 'cfProvidedName', true, 5, false);
                      assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residence', 'Hint for the field renders properly');
                      assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('customField.cfProvidedAddress_hint'), 'Hint id for the hint component gets populated properly');
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfProvidedName"] input'));
                      assertChoiceStatus(assert, 'cfProvidedName', false, 1, false);
                      assertModelStatus(assert, _this2, [false, undefined, undefined, undefined, undefined], false);
                    });
                  });
                }));

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Render custom hint for dependent-checkbox-field depending on fieldNameToHintComponentMap', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                this.owner.register('component:custom-tooltip', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "wpQ1P2uR",
                    "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[9,\"class\",\"my_tooltip\"],[7],[0,\"This_is_custom_tooltip\"],[8]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                Ember.setProperties(this, {
                  fieldNameToHintComponentMap: {
                    cfProvidedAddress: 'custom-tooltip'
                  }
                });
                _context5.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "TYERHTcO",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldNameToHintComponentMap\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]],[20,[\"fieldNameToHintComponentMap\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfProvidedName"] input'));
                return _context5.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfProvidedPersonalInfo"] input'));
                  return (0, _testHelpers.settled)().then(function () {
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfProvidedGender"] input'));
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Hint for the field renders properly');
                      Ember.run(function () {
                        _this3.owner.unregister('component:custom-tooltip');
                      });
                    });
                  });
                }));

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-checkbox-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(30);
                Ember.run(function () {
                  Ember.set(_this4, 'defaultFieldModel.cfProvidedName', true);
                  Ember.set(_this4, 'defaultFieldModel.cfProvidedPersonalInfo', true);
                  Ember.set(_this4, 'defaultFieldModel.cfProvidedGender', true);
                });
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', true, true);
                assertChoiceStatus(assert, 'cfProvidedName', true, 5, true);
                assertFieldStatus(assert, this, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', true, true);
                assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, true);
                assertFieldStatus(assert, this, 'cfProvidedAge', 'Provided Age ?', false, true);
                assertChoiceStatus(assert, 'cfProvidedAge', false, 5, true);
                assertFieldStatus(assert, this, 'cfProvidedGender', 'Provided Gender ?', true, true);
                assertChoiceStatus(assert, 'cfProvidedGender', true, 5, true);
                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ?', false, true);
                assertChoiceStatus(assert, 'cfProvidedAddress', false, 5, true);
                assertModelStatus(assert, this, [true, true, false, true, false], true);

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-checkbox-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(30);
                Ember.run(function () {
                  Ember.set(_this5, 'customFieldModel.customField.cfProvidedName', true);
                  Ember.set(_this5, 'customFieldModel.customField.cfProvidedPersonalInfo', true);
                  Ember.set(_this5, 'customFieldModel.customField.cfProvidedGender', true);
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', true, false);
                assertChoiceStatus(assert, 'cfProvidedName', true, 5, false);
                assertFieldStatus(assert, this, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', true, false);
                assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, false);
                assertFieldStatus(assert, this, 'cfProvidedAge', 'Provided Age ?', false, false);
                assertChoiceStatus(assert, 'cfProvidedAge', false, 5, false);
                assertFieldStatus(assert, this, 'cfProvidedGender', 'Provided Gender ?', true, false);
                assertChoiceStatus(assert, 'cfProvidedGender', true, 5, false);
                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ?', false, false);
                assertChoiceStatus(assert, 'cfProvidedAddress', false, 5, false);
                assertModelStatus(assert, this, [true, true, false, true, false], false);

              case 15:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-checkbox-field (as custom field) : Required-fieldids is honoured ', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(3);
                Ember.run(function () {
                  Ember.set(_this6, 'customFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['provided_address_id']);
                  Ember.set(_this6, 'customFieldModel.customField.cfProvidedName', true);
                  Ember.set(_this6, 'customFieldModel.customField.cfProvidedPersonalInfo', true);
                  Ember.set(_this6, 'customFieldModel.customField.cfProvidedGender', true);
                });
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ? *', false, false);

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-checkbox-field (as custom field) : Setting required-fieldids is not honoured ', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(3);
                Ember.run(function () {
                  Ember.set(_this7, 'customFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['provided_address_id']);
                  Ember.set(_this7, 'customFieldSchema.fields.0.getChoices.1.dependentIds.field', ['provided_address_id']);
                  Ember.set(_this7, 'customFieldModel.customField.cfProvidedName', false);
                });
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ?', false, false);

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/dependent-selects/power-select-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-test-helpers/wait", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers, _emberPowerSelect) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/dependent selects/power select field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          cfCountry: undefined,
          cfNorthState: undefined,
          cfSouthState: undefined,
          cfNorthStateUrbanCity: undefined,
          cfNorthStateRuralCity: undefined
        },
        customFieldModel: {
          customField: {
            cfCountry: undefined,
            cfNorthState: undefined,
            cfSouthState: undefined,
            cfNorthStateUrbanCity: undefined,
            cfNorthStateRuralCity: undefined
          }
        },
        defaultFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'dropdown',
            position: 1,
            required: false,
            editable: true,
            custom: false,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'power-select-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'id',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'dropdown',
              position: 1,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'dropdown',
                position: 1,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'dropdown',
                position: 2,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'dropdown',
              position: 2,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        },
        customFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'dropdown',
            position: 1,
            required: false,
            editable: true,
            custom: true,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'power-select-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'value',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'dropdown',
              position: 1,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'dropdown',
                position: 1,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'dropdown',
                position: 2,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'dropdown',
              position: 2,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        }
      });
    });

    function assertFieldStatusBeforeClick(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] label')['innerText'], fieldLabel, 'Label for \'' + fieldName + '\' field renders properly');
    }

    function assertFieldStatusAfterClick(assert, fieldName, fieldDomId, choiceValues) {
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option').length, choiceValues.length, 'All choices for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[0]['innerText'].trim(), choiceValues[0], 'First choice is \'' + choiceValues[0] + '\' for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[1]['innerText'].trim(), choiceValues[1], 'Second choice is \'' + choiceValues[1] + '\' for \'' + fieldName + '\' field');
    }

    function assertFieldStatusAfterSelect(assert, testScope, fieldName, fieldChoiceSelected, valueInModel, fieldsCnt, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
      var fieldDom = (0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] .ember-power-select-selected-item');
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], fieldsCnt, 'All dependent selects for \'' + fieldName + '\' field renders properly');
      if (Ember.isNone(fieldDom)) assert.equal(fieldDom, fieldChoiceSelected, 'No choice for \'' + fieldName + '\' field is selected now');else assert.equal(fieldDom['innerText'], fieldChoiceSelected, 'Choice \'' + fieldChoiceSelected + '\' for \'' + fieldName + '\' field is selected now');
    }

    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {
      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';
      var fieldNameIndex = 0;

      for (var fieldName in Ember.get(testScope, model)) {
        var pathName = isDefault ? fieldName : 'customField.' + fieldName;
        var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \'' + valuesInModel[fieldNameIndex] + '\' as value for \'' + fieldName + '\' field');
        fieldNameIndex++;
      }
    }

    (0, _qunit.test)('dependent-power-select-field (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        var fieldId;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(46);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'India', 'india_id', 3, true);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this, 'cfNorthState', 'North State', undefined, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _testHelpers.settled)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _testHelpers.settled)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this, 'cfNorthStateUrbanCity', 'Patiala', 'patiala_id', 5, true);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this, 'cfCountry', 'Country', 'india_id', true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _testHelpers.settled)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'USA', 'usa_id', 2, true);
                        assertModelStatus(assert, _this, ['usa_id', undefined, undefined, undefined, undefined], true);
                      });
                    });
                  });
                }));

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        var fieldId, usaObj, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(42);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context4.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'India', indiaObj, 3, true);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this2, 'cfNorthState', 'North State', undefined, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this2, 'cfNorthState', 'Punjab', punjabObj, 5, true);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _wait.default)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this2, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this2, 'cfCountry', 'Country', indiaObj, true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _wait.default)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'USA', usaObj, 2, true);
                        assertModelStatus(assert, _this2, [usaObj, undefined, undefined, undefined, undefined], true);
                      });
                    });
                  });
                }));

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this3 = this;

        var fieldId;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(42);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context5.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'India', 'India', 3, false);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this3, 'cfNorthState', 'North State', undefined, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this3, 'cfNorthState', 'Punjab', 'Punjab', 5, false);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _wait.default)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this3, 'cfNorthStateUrbanCity', 'Patiala', 'Patiala', 5, false);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this3, 'cfCountry', 'Country', 'India', false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _wait.default)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'USA', 'USA', 2, false);
                        assertModelStatus(assert, _this3, ['USA', undefined, undefined, undefined, undefined], false);
                      });
                    });
                  });
                }));

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this4 = this;

        var usaObj, indiaObj, punjabObj, patialaObj, fieldId;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(42);
                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context6.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'India', indiaObj, 3, false);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this4, 'cfNorthState', 'North State', undefined, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this4, 'cfNorthState', 'Punjab', punjabObj, 5, false);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _wait.default)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this4, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this4, 'cfCountry', 'Country', indiaObj, false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _wait.default)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'USA', usaObj, 2, false);
                        assertModelStatus(assert, _this4, [usaObj, undefined, undefined, undefined, undefined], false);
                      });
                    });
                  });
                }));

              case 17:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(25);
                Ember.run(function () {
                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'india_id', 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'punjab_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'mandi_id', 5, true);

              case 14:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerioby keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this6 = this;

        var indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(25);
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                Ember.run(function () {
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldModel.cfCountry', indiaObj);
                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', punjabObj);
                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', patialaObj);
                });
                _context8.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, true);

              case 17:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(25);
                Ember.run(function () {
                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');
                });
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'India', false);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'India', 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'Punjab', false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'Punjab', 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'Mandi', 5, false);

              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this8 = this;

        var indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(25);
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                Ember.run(function () {
                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);
                });
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, false);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, false);

              case 17:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: allow dependency mapping with \'None\' choice', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this9 = this;

        var fieldId;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(15);
                Ember.run(function () {
                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');
                });
                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['New York', 'Punjab']);
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfSouthState', fieldId, ['Tamil Nadu', 'Kerala']);

              case 16:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: dependent fields for dropdown renders properly', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(15);
                Ember.run(function () {
                  /*  'cfNorthStateUrbanCity' is a text field  */
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.0.type', 'text');
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.0.inputType', 'text-field');
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices', []);
                  /*  'cfNorthStateRuralCity' is a text field  */

                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.1.type', 'text');
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.1.inputType', 'text-field');
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.1.getChoices', []);
                  /*  Update parent field's choice to contain dependent field ids as 'northern_state_rural_city_id' and 'northern_state_urban_city_id'  */

                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.getChoices.0.dependentIds.field', ['northern_state_rural_city_id', 'northern_state_urban_city_id']);
                  /*  'cfSouthState' is a section  */

                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.1.type', 'section');
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.1.inputType', 'nested-section');
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.1.getChoices', []);
                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */

                  Ember.set(_this10, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);
                  Ember.set(_this10, 'defaultFieldModel.cfCountry', 'usa_id');
                  Ember.set(_this10, 'defaultFieldModel.cfNorthState', 'new_york_id');
                });
                _context12.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 2, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 2, true);
                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateRuralCity"] label').innerText.trim(), 'North State Rural City', 'Label for \'cfNorthStateRuralCity\' field renders properly');
                assert.ok((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateRuralCity"] input'), 'Control for \'cfNorthStateRuralCity\' field renders properly');
                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] label').innerText.trim(), 'North State Urban City', 'Label for \'cfNorthStateUrbanCity\' field renders properly');
                assert.ok((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] input'), 'Control for \'cfNorthStateUrbanCity\' field renders properly');
                assert.equal((0, _emberNativeDomHelpers.find)('.fieldset-title').innerText.trim(), 'South State', 'Label for \'cfSouthState\' field renders properly');

              case 13:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: checkbox as dependent field(i.e. not as dependent select) for dropdown renders properly', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this11 = this;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(13);
                Ember.run(function () {
                  /*  'cfSouthState' is a checkbox field */
                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fields.1.type', 'checkbox');
                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fields.1.inputType', 'checkbox-dependent-field');
                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fields.1.getChoices', []);
                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */

                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);
                  Ember.set(_this11, 'defaultFieldModel.cfCountry', 'usa_id');
                  Ember.set(_this11, 'defaultFieldModel.cfNorthState', 'new_york_id');
                  Ember.set(_this11, 'defaultFieldModel.cfSouthState', true);
                });
                _context13.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 2, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 2, true);
                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] label')['innerText'].trim(), 'South State', 'Label for \'cfSouthState\' field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfSouthState"] input')[0]['type'], 'checkbox', 'Choices are displayed as checkbox for \'cfSouthState\' field');
                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfSouthState"] input')[0]['checked'], true, 'Checkbox for \'cfSouthState\' field is checked now');

              case 11:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: dropdown as dependent field(i.e. not as dependent select) for dropdown renders properly', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this12 = this;

        var fieldId;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(15);
                Ember.run(function () {
                  /*  'cfSouthState' is a dropdown field  */
                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fields.1.type', 'dropdown');
                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fields.1.inputType', 'power-select-dependent-field');
                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */

                  Ember.set(_this12, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);
                  Ember.set(_this12, 'defaultFieldModel.cfCountry', 'usa_id');
                  Ember.set(_this12, 'defaultFieldModel.cfNorthState', 'new_york_id');
                });
                _context14.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 3, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 3, true);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] .ember-power-select-trigger'));
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusAfterClick(assert, 'cfSouthState', fieldId, ['Tamil Nadu', 'Kerala']);

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: radio as dependent field(i.e. not as dependent select) for dropdown renders properly', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this13 = this;

        var choicePos, choices, _i, _choices, choice;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(14);
                Ember.run(function () {
                  /*  'cfSouthState' is a radio field  */
                  Ember.set(_this13, 'defaultFieldSchema.fields.0.fields.1.type', 'radio');
                  Ember.set(_this13, 'defaultFieldSchema.fields.0.fields.1.inputType', 'radio-dependent-field');
                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */

                  Ember.set(_this13, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);
                  Ember.set(_this13, 'defaultFieldModel.cfCountry', 'usa_id');
                  Ember.set(_this13, 'defaultFieldModel.cfNorthState', 'new_york_id');
                });
                _context15.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 2, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 2, true);
                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] .control-label')['innerText'].trim(), 'South State', 'Label for \'cfSouthState\' field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfSouthState"] input')[0]['type'], 'radio', 'Choices are displayed as radio for \'cfSouthState\' field');
                choicePos = 0;
                choices = ['Tamil Nadu', 'Kerala'];

                for (_i = 0, _choices = choices; _i < _choices.length; _i++) {
                  choice = _choices[_i];
                  assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfSouthState"] .radio-field label')[choicePos]['innerText'].trim(), choice, 'Choice ' + (choicePos + 1) + ' is \'' + choice + '\' for \'cfSouthState\' field');
                  choicePos++;
                }

              case 13:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: multi-select as dependent select renders properly', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this14 = this;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(10);
                Ember.run(function () {
                  /*  'cfSouthState' is a multi-select field  */
                  Ember.set(_this14, 'defaultFieldSchema.fields.0.fields.1.type', 'multi_select_dropdown');
                  Ember.set(_this14, 'defaultFieldSchema.fields.0.fields.1.inputType', 'multi-select-dropdown-field');
                  Ember.set(_this14, 'defaultFieldModel.cfCountry', 'india_id');
                });
                _context16.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                _context16.next = 6;
                return assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);

              case 6:
                _context16.next = 8;
                return assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'india_id', 3, true);

              case 8:
                _context16.next = 10;
                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="cfSouthState"]');

              case 10:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 2, 'Both the choices gets rendered inside the \'cfSouthState\' field properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]['innerText'], 'Kerala', 'Choice \'Kerala\' for \'cfSouthState\' field is rendered properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]['innerText'], 'Tamil Nadu', 'Choice \'Tamil Nadu\' for \'cfSouthState\' field is rendered properly');
                _context16.next = 15;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);

              case 15:
                _context16.next = 17;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 17:
                _context16.next = 19;
                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="cfSouthState"]');

              case 19:
                _context16.next = 21;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 21:
                //  Press Enter
                assert.equal(Ember.get(this, 'defaultFieldModel.cfSouthState'), 'kerala_id;tamilnadu_id', 'Model contains ids of \'Kerala\' and \'Tamil Nadu\' as field value');
                _context16.next = 24;
                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="cfCountry"]');

              case 24:
                _context16.next = 26;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 38);

              case 26:
                _context16.next = 28;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13);

              case 28:
                //  Press Enter
                assert.equal(Ember.get(this, 'defaultFieldModel.cfSouthState'), undefined, 'Model contains \'undefined\' as field value');

              case 29:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x16) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: Setting required-field option for the immediate child for a particular choice', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var _this15 = this;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                assert.expect(12);
                Ember.run(function () {
                  /*  'cfSouthState' is a dropdown field  */
                  Ember.set(_this15, 'defaultFieldSchema.fields.0.fields.1.type', 'dropdown');
                  Ember.set(_this15, 'defaultFieldSchema.fields.0.fields.1.inputType', 'power-select-dependent-field');
                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */

                  Ember.set(_this15, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);
                  Ember.set(_this15, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['south_state_id']);
                  Ember.set(_this15, 'defaultFieldModel.cfCountry', 'usa_id');
                  Ember.set(_this15, 'defaultFieldModel.cfNorthState', 'new_york_id');
                });
                _context17.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 3, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 3, true);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State *', undefined, true);

              case 9:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x17) {
        return _ref18.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: Setting required-field option, but selecting a different parent choice', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var _this16 = this;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(4);
                Ember.run(function () {
                  /*  'cfSouthState' is a dropdown field  */
                  Ember.set(_this16, 'defaultFieldSchema.fields.0.fields.1.type', 'dropdown');
                  Ember.set(_this16, 'defaultFieldSchema.fields.0.fields.1.inputType', 'power-select-dependent-field');
                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */

                  Ember.set(_this16, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);
                  Ember.set(_this16, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['south_state_id']);
                  Ember.set(_this16, 'defaultFieldModel.cfCountry', 'india_id');
                });
                _context18.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);

              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x18) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: allow Required-fieldIds mapping with \'None\' choice', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var _this17 = this;

        var fieldId;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                assert.expect(15);
                Ember.run(function () {
                  Ember.set(_this17, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');
                  Ember.set(_this17, 'defaultFieldSchema.fields.0.fieldOptions.dependent_required_field_ids_for_none', 'south_state_id');
                });
                _context19.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['New York', 'Punjab']);
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State *', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfSouthState"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfSouthState', fieldId, ['Tamil Nadu', 'Kerala']);

              case 16:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      return function (_x19) {
        return _ref20.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field: Toggling between child text fields, based on choice selection, should clear data of non displayed field', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var _this18 = this;

        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                assert.expect(5);
                Ember.run(function () {
                  /*  'cfNorthStateUrbanCity' is a text field  */
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.0.type', 'text');
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.0.inputType', 'text-field');
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.0.defaultValue', '');
                  /*  'cfNorthStateRuralCity' is a text field  */

                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.1.type', 'text');
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.1.inputType', 'text-field');
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.1.defaultValue', '');
                  /*  'cfNorthState' now has field mappings with child fields  */

                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.1.dependentIds.choice', []);
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.1.dependentIds.field', ['northern_state_urban_city_id']);
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.3.dependentIds.choice', []);
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.3.dependentIds.field', ['northern_state_rural_city_id']);
                  Ember.set(_this18, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this18, 'defaultFieldModel.cfNorthState', 'punjab_id');
                  Ember.set(_this18, 'defaultFieldModel.cfNorthStateUrbanCity', 'Amritsar');
                });
                _context20.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context20.abrupt("return", (0, _wait.default)().then(function () {
                  assertModelStatus(assert, _this18, ['india_id', 'himachal_pradesh_id', undefined, '', ''], true);
                }));

              case 8:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));

      return function (_x20) {
        return _ref21.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/dependent-selects/power-select-field/prevent-resetting-of-child-fields/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select"], function (_qunit, _emberQunit, _wait, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/dependent selects/power select field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          cfCountry: undefined,
          cfNorthState: undefined,
          cfSouthState: undefined,
          cfNorthStateUrbanCity: undefined,
          cfNorthStateRuralCity: undefined
        },
        customFieldModel: {
          customField: {
            cfCountry: undefined,
            cfNorthState: undefined,
            cfSouthState: undefined,
            cfNorthStateUrbanCity: undefined,
            cfNorthStateRuralCity: undefined
          }
        },
        defaultFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'dropdown',
            position: 1,
            required: false,
            editable: true,
            custom: false,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "punjab_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'power-select-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'id',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'dropdown',
              position: 1,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'dropdown',
                position: 1,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'dropdown',
                position: 2,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'dropdown',
              position: 2,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        },
        customFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'dropdown',
            position: 1,
            required: false,
            editable: true,
            custom: true,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "punjab_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'power-select-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'value',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'dropdown',
              position: 1,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'dropdown',
                position: 1,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'dropdown',
                position: 2,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'power-select-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'dropdown',
              position: 2,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'power-select-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        }
      });
    });

    function assertFieldStatusBeforeClick(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] label')['innerText'], fieldLabel, 'Label for \'' + fieldName + '\' field renders properly');
    }

    function assertFieldStatusAfterClick(assert, fieldName, fieldDomId, choiceValues) {
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option').length, choiceValues.length, 'All choices for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[0]['innerText'].trim(), choiceValues[0], 'First choice is \'' + choiceValues[0] + '\' for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[1]['innerText'].trim(), choiceValues[1], 'Second choice is \'' + choiceValues[1] + '\' for \'' + fieldName + '\' field');
    }

    function assertFieldStatusAfterSelect(assert, testScope, fieldName, fieldChoiceSelected, valueInModel, fieldsCnt, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
      var fieldDom = (0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] .ember-power-select-selected-item');
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], fieldsCnt, 'All dependent selects for \'' + fieldName + '\' field renders properly');
      if (Ember.isNone(fieldDom)) assert.equal(fieldDom, fieldChoiceSelected, 'No choice for \'' + fieldName + '\' field is selected now');else assert.equal(fieldDom['innerText'], fieldChoiceSelected, 'Choice \'' + fieldChoiceSelected + '\' for \'' + fieldName + '\' field is selected now');
    }

    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {
      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';
      var fieldNameIndex = 0;

      for (var fieldName in Ember.get(testScope, model)) {
        var pathName = isDefault ? fieldName : 'customField.' + fieldName;
        var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \'' + valuesInModel[fieldNameIndex] + '\' as value for \'' + fieldName + '\' field');
        fieldNameIndex++;
      }
    }

    (0, _qunit.test)('dependent-power-select-field (as default field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var formConfig, dependentSelectConfig, fieldId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(42);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'India', 'india_id', 3, true);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this, 'cfNorthState', 'North State', undefined, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _wait.default)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this, 'cfNorthStateUrbanCity', 'Patiala', 'patiala_id', 5, true);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this, 'cfCountry', 'Country', 'india_id', true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _wait.default)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'USA', 'usa_id', 4, true);
                        assertModelStatus(assert, _this, ['usa_id', 'punjab_id', undefined, 'patiala_id', undefined], true);
                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                      });
                    });
                  });
                }));

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : changing parent field value and checking whether the dependent field values are still persisting by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var formConfig, dependentSelectConfig, fieldId, usaObj, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(42);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context2.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context2.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'India', indiaObj, 3, true);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this2, 'cfNorthState', 'North State', undefined, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this2, 'cfNorthState', 'Punjab', punjabObj, 5, true);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _wait.default)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this2, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this2, 'cfCountry', 'Country', indiaObj, true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _wait.default)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'USA', usaObj, 4, true);
                        assertModelStatus(assert, _this2, [usaObj, punjabObj, undefined, patialaObj, undefined], true);
                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                      });
                    });
                  });
                }));

              case 20:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var formConfig, dependentSelectConfig, fieldId;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(42);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context3.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'India', 'India', 3, false);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this3, 'cfNorthState', 'North State', undefined, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this3, 'cfNorthState', 'Punjab', 'Punjab', 5, false);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _wait.default)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this3, 'cfNorthStateUrbanCity', 'Patiala', 'Patiala', 5, false);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this3, 'cfCountry', 'Country', 'India', false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _wait.default)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'USA', 'USA', 4, false);
                        assertModelStatus(assert, _this3, ['USA', 'Punjab', undefined, 'Patiala', undefined], false);
                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                      });
                    });
                  });
                }));

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : changing parent field value and checking whether the dependent field values are still persisting by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this4 = this;

        var formConfig, dependentSelectConfig, usaObj, indiaObj, punjabObj, patialaObj, fieldId;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(42);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context4.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context4.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'India', indiaObj, 3, false);
                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                  assertFieldStatusBeforeClick(assert, _this4, 'cfNorthState', 'North State', undefined, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'));
                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                  //  Press Enter
                  return (0, _wait.default)().then(function () {
                    assertFieldStatusAfterSelect(assert, _this4, 'cfNorthState', 'Punjab', punjabObj, 5, false);
                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                    assertFieldStatusBeforeClick(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'));
                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 40); //  Press Key-down

                    //  Press Key-down
                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthStateUrbanCity"] .ember-power-select-trigger'), 13); //  Press Enter

                    //  Press Enter
                    return (0, _wait.default)().then(function () {
                      assertFieldStatusAfterSelect(assert, _this4, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);
                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];
                      assertFieldStatusBeforeClick(assert, _this4, 'cfCountry', 'Country', indiaObj, false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'));
                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);
                      assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 38); //  Press Key-down

                      //  Press Key-down
                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfCountry"] .ember-power-select-trigger'), 13); //  Press Enter

                      //  Press Enter
                      return (0, _wait.default)().then(function () {
                        assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'USA', usaObj, 4, false);
                        assertModelStatus(assert, _this4, [usaObj, punjabObj, undefined, patialaObj, undefined], false);
                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                      });
                    });
                  });
                }));

              case 20:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this5 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(25);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');
                });
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'india_id', 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'punjab_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'mandi_id', 5, true);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 18:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerio by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this6 = this;

        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(25);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                Ember.run(function () {
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldModel.cfCountry', indiaObj);
                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', punjabObj);
                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', patialaObj);
                });
                _context6.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 10:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, true);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, true);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, true);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 21:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this7 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(25);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');
                });
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'India', false);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'India', 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'Punjab', false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'Punjab', 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'Mandi', 5, false);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this8 = this;

        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(25);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                Ember.run(function () {
                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);
                });
                _context8.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 10:
                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, false);
                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);
                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, false);
                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, false);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 21:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this9 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(5);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this9, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this9, 'defaultFieldModel.cfNorthState', 'punjab_id');
                  Ember.set(_this9, 'defaultFieldModel.cfNorthStateUrbanCity', 'Amritsar');
                });
                _context9.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'));
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context9.abrupt("return", (0, _wait.default)().then(function () {
                  assertModelStatus(assert, _this9, ['india_id', 'himachal_pradesh_id', undefined, undefined, undefined], true);
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                }));

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this10 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(5);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this10, 'customFieldModel.customField.cfCountry', 'India');
                  Ember.set(_this10, 'customFieldModel.customField.cfNorthState', 'Punjab');
                  Ember.set(_this10, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');
                });
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'));
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'), 40); //  Press Key-down

                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="customField.cfNorthState"] .ember-power-select-trigger'), 13); //  Press Enter

                return _context10.abrupt("return", (0, _wait.default)().then(function () {
                  assertModelStatus(assert, _this10, ['India', 'Himachal Pradesh', undefined, undefined, undefined], false);
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                }));

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/dependent-selects/radio-group/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-test-helpers/wait", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  (0, _qunit.module)('Integration | Component | form fields/dependent selects/radio group', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          cfCountry: undefined,
          cfNorthState: undefined,
          cfSouthState: undefined,
          cfNorthStateUrbanCity: undefined,
          cfNorthStateRuralCity: undefined
        },
        customFieldModel: {
          customField: {
            cfCountry: undefined,
            cfNorthState: undefined,
            cfSouthState: undefined,
            cfNorthStateUrbanCity: undefined,
            cfNorthStateRuralCity: undefined
          }
        },
        defaultFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'radio',
            position: 1,
            required: false,
            editable: true,
            custom: false,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'radio-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'id',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'radio',
              position: 1,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: ["shimla_id", "solan_id"]
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'radio',
                position: 1,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'radio',
                position: 2,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'radio',
              position: 2,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        },
        customFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'radio',
            position: 1,
            required: false,
            editable: true,
            custom: true,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'radio-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'value',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'radio',
              position: 1,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: ["shimla_id", "solan_id"]
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'radio',
                position: 1,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'radio',
                position: 2,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'radio',
              position: 2,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        }
      });
    });

    function assertFieldStatus(assert, testScope, fieldName, fieldLabel, valueInModel, choices, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] .control-label')['innerText'], fieldLabel, 'Label for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input').length, choices.length, 'All choices for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input')[0]['type'], 'radio', 'Choices are displayed as radio buttons for \'' + fieldName + '\' field');
      var choicePos = 0;

      var _iterator = _createForOfIteratorHelper(choices),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var choice = _step.value;
          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] .radio-field label')[choicePos]['innerText'].trim(), choice, 'Choice ' + (choicePos + 1) + ' is \'' + choice + '\' for \'' + fieldName + '\' field');
          choicePos++;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    function assertChoiceStatus(assert, fieldName, choiceValues, fieldsCnt, isDefault) {
      var choicePos = 0;
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-group')['length'], fieldsCnt, 'All dependent selects for \'' + fieldName + '\' field renders properly');

      var _iterator2 = _createForOfIteratorHelper(choiceValues),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var choice = _step2.value;
          var checkboxStatus = choiceValues[choicePos] ? 'selected' : 'unselected';
          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input')[choicePos]['checked'], choice, 'Choice ' + (choicePos + 1) + ' is \'' + checkboxStatus + '\' for \'' + fieldName + '\' field');
          choicePos++;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {
      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';
      var fieldNameIndex = 0;

      for (var fieldName in Ember.get(testScope, model)) {
        var pathName = isDefault ? fieldName : 'customField.' + fieldName;
        var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \'' + valuesInModel[fieldNameIndex] + '\' as value for \'' + fieldName + '\' field');
        fieldNameIndex++;
      }
    }

    (0, _qunit.test)('dependent-radio-field (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(9);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(9);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(58);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assertFieldStatus(assert, _this, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                  return (0, _testHelpers.settled)().then(function () {
                    assertFieldStatus(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);
                    assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);
                    return (0, _testHelpers.settled)().then(function () {
                      assertFieldStatus(assert, _this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, true);
                      assertModelStatus(assert, _this, ['usa_id', undefined, undefined, undefined, undefined], true);
                    });
                  });
                }));

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this2 = this;

        var usaObj, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(58);
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "t7ijM873",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);
                return _context4.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatus(assert, _this2, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                  return (0, _wait.default)().then(function () {
                    assertFieldStatus(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);
                    assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);
                    return (0, _wait.default)().then(function () {
                      assertFieldStatus(assert, _this2, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, true);
                      assertModelStatus(assert, _this2, [usaObj, undefined, undefined, undefined, undefined], true);
                    });
                  });
                }));

              case 15:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(58);
                _context5.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);
                return _context5.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assertFieldStatus(assert, _this3, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                  return (0, _testHelpers.settled)().then(function () {
                    assertFieldStatus(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);
                    assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);
                    return (0, _testHelpers.settled)().then(function () {
                      assertFieldStatus(assert, _this3, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, false);
                      assertModelStatus(assert, _this3, ['USA', undefined, undefined, undefined, undefined], false);
                    });
                  });
                }));

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this4 = this;

        var usaObj, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(58);
                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                assertFieldStatus(assert, this, 'cfCountry', 'Country', null, ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);
                return _context6.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatus(assert, _this4, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                  return (0, _wait.default)().then(function () {
                    assertFieldStatus(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);
                    assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);
                    return (0, _wait.default)().then(function () {
                      assertFieldStatus(assert, _this4, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, false);
                      assertModelStatus(assert, _this4, [usaObj, undefined, undefined, undefined, undefined], false);
                    });
                  });
                }));

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(45);
                Ember.run(function () {
                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'punjab_id', ['Punjab', 'Himachal Pradesh'], true);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', ['Mandi', 'Ajdhar'], true);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, true);

              case 14:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this6 = this;

        var indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(45);
                Ember.run(function () {
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldModel.cfCountry', Ember.get(_this6, 'defaultFieldSchema.fields.0.getChoices.1'));
                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', Ember.get(_this6, 'defaultFieldSchema.fields.0.fields.0.getChoices.1'));
                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', Ember.get(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1'));
                });
                _context8.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], true);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], true);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], true);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, true);

              case 17:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(45);
                Ember.run(function () {
                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');
                });
                _context9.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'Punjab', ['Punjab', 'Himachal Pradesh'], false);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', ['Mandi', 'Ajdhar'], false);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, false);

              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this8 = this;

        var indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(45);
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                Ember.run(function () {
                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);
                });
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], false);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], false);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], false);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, false);

              case 17:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field: allow dependency mapping with \'None\' choice', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(27);
                Ember.run(function () {
                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');
                });
                _context11.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 3, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', undefined, ['New York', 'Punjab'], true);
                assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 3, true);

              case 10:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : Required-fieldIds is honoured', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(20);
                Ember.run(function () {
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.getChoices.1.dependentIds.field', ['north_state_id']);
                  Ember.set(_this10, 'defaultFieldSchema.fields.0.getChoices.1.dependentIds.required_field', ['north_state_id']);
                  Ember.set(_this10, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this10, 'defaultFieldModel.cfNorthState', 'new_york_id');
                  Ember.set(_this10, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');
                });
                _context12.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State *', 'new_york_id', ['New York', 'Punjab', 'New Jersey', 'Himachal Pradesh'], true);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 3, true);

              case 8:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : Required-fieldIds is not honoured', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this11 = this;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(20);
                Ember.run(function () {
                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices.1.dependentIds.field', ['north_state_id']);
                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['north_state_id']);
                  Ember.set(_this11, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this11, 'defaultFieldModel.cfNorthState', 'new_york_id');
                  Ember.set(_this11, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');
                });
                _context13.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'new_york_id', ['New York', 'Punjab', 'New Jersey', 'Himachal Pradesh'], true);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 3, true);

              case 8:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field: allow Required-fieldIds mapping with \'None\' choice', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this12 = this;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(20);
                Ember.run(function () {
                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');
                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions.dependent_field_ids_for_none', 'north_state_id');
                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions.dependent_required_field_ids_for_none', 'north_state_id');
                });
                _context14.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 3, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State *', undefined, ['New York', 'Punjab', 'New Jersey', 'Himachal Pradesh'], true);
                assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);

              case 8:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/dependent-selects/radio-group/prevent-resetting-of-child-fields/component-test", ["qunit", "ember-qunit", "ember-test-helpers/wait", "ember-native-dom-helpers", "@ember/test-helpers"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  (0, _qunit.module)('Integration | Component | form fields/dependent selects/radio group', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        defaultFieldModel: {
          cfCountry: undefined,
          cfNorthState: undefined,
          cfSouthState: undefined,
          cfNorthStateUrbanCity: undefined,
          cfNorthStateRuralCity: undefined
        },
        customFieldModel: {
          customField: {
            cfCountry: undefined,
            cfNorthState: undefined,
            cfSouthState: undefined,
            cfNorthStateUrbanCity: undefined,
            cfNorthStateRuralCity: undefined
          }
        },
        defaultFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'radio',
            position: 1,
            required: false,
            editable: true,
            custom: false,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "punjab_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'radio-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'id',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'radio',
              position: 1,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: ["shimla_id", "solan_id"]
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'radio',
                position: 1,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'radio',
                position: 2,
                required: false,
                editable: true,
                custom: false,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'id',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'radio',
              position: 2,
              required: false,
              editable: true,
              custom: false,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'id',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        },
        customFieldSchema: {
          name: 'Dependent Select Test Form',
          description: 'A form designed to test the rendering of dependent select in formserv-addon.',
          active: true,
          fields: [{
            id: "country_id",
            name: "cfCountry",
            label: "Country",
            type: 'radio',
            position: 1,
            required: false,
            editable: true,
            custom: true,
            getChoices: [{
              id: "usa_id",
              value: "USA",
              position: 1,
              dependentIds: {
                choice: ["new_york_id", "punjab_id", "new_jersey_id"]
              }
            }, {
              id: "india_id",
              value: "India",
              position: 2,
              dependentIds: {
                choice: ["himachal_pradesh_id", "punjab_id", "tamilnadu_id", "kerala_id"]
              }
            }],
            inputType: 'radio-dependent-field',
            fieldOptions: {
              dependent: true
            },
            optionValuePath: 'value',
            optionLabelPath: 'value',
            fields: [{
              id: "north_state_id",
              name: "cfNorthState",
              label: "North State",
              type: 'radio',
              position: 1,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "new_york_id",
                value: "New York",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "punjab_id",
                value: "Punjab",
                position: 2,
                dependentIds: {
                  choice: ["amritsar_id", "chandigarh_id", "patiala_id", "ajdhar_id", "mandi_id"]
                }
              }, {
                id: "new_jersey_id",
                value: "New Jersey",
                position: 3,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "himachal_pradesh_id",
                value: "Himachal Pradesh",
                position: 4,
                dependentIds: {
                  choice: ["shimla_id", "solan_id"]
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: [{
                id: "northern_state_urban_city_id",
                name: "cfNorthStateUrbanCity",
                label: "North State Urban City",
                type: 'radio',
                position: 1,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "amritsar_id",
                  value: "Amritsar",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "patiala_id",
                  value: "Patiala",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }, {
                id: "northern_state_rural_city_id",
                name: "cfNorthStateRuralCity",
                label: "North State Rural City",
                type: 'radio',
                position: 2,
                required: false,
                editable: true,
                custom: true,
                getChoices: [{
                  id: "mandi_id",
                  value: "Mandi",
                  position: 1,
                  dependentIds: {
                    choice: []
                  }
                }, {
                  id: "ajdhar_id",
                  value: "Ajdhar",
                  position: 2,
                  dependentIds: {
                    choice: []
                  }
                }],
                inputType: 'radio-dependent-field',
                fieldOptions: {
                  dependent: true
                },
                optionValuePath: 'value',
                optionLabelPath: 'value',
                fields: []
              }]
            }, {
              id: "south_state_id",
              name: "cfSouthState",
              label: "South State",
              type: 'radio',
              position: 2,
              required: false,
              editable: true,
              custom: true,
              getChoices: [{
                id: "tamilnadu_id",
                value: "Tamil Nadu",
                position: 1,
                dependentIds: {
                  choice: []
                }
              }, {
                id: "kerala_id",
                value: "Kerala",
                position: 2,
                dependentIds: {
                  choice: []
                }
              }],
              inputType: 'radio-dependent-field',
              fieldOptions: {
                dependent: true
              },
              optionValuePath: 'value',
              optionLabelPath: 'value',
              fields: []
            }]
          }]
        }
      });
    });

    function assertFieldStatus(assert, testScope, fieldName, fieldLabel, valueInModel, choices, isDefault) {
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;
      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \'' + valueInModel + '\' as value for \'' + fieldName + '\' field');
      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="' + pathName + '"] .control-label')['innerText'], fieldLabel, 'Label for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input').length, choices.length, 'All choices for \'' + fieldName + '\' field renders properly');
      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input')[0]['type'], 'radio', 'Choices are displayed as radio buttons for \'' + fieldName + '\' field');
      var choicePos = 0;

      var _iterator = _createForOfIteratorHelper(choices),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var choice = _step.value;
          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] .radio-field label')[choicePos]['innerText'].trim(), choice, 'Choice ' + (choicePos + 1) + ' is \'' + choice + '\' for \'' + fieldName + '\' field');
          choicePos++;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    function assertChoiceStatus(assert, fieldName, choiceValues, fieldsCnt, isDefault) {
      var choicePos = 0;
      var pathName = isDefault ? fieldName : 'customField.' + fieldName;
      assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-group')['length'], fieldsCnt, 'All dependent selects for \'' + fieldName + '\' field renders properly');

      var _iterator2 = _createForOfIteratorHelper(choiceValues),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var choice = _step2.value;
          var checkboxStatus = choiceValues[choicePos] ? 'selected' : 'unselected';
          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="' + pathName + '"] input')[choicePos]['checked'], choice, 'Choice ' + (choicePos + 1) + ' is \'' + checkboxStatus + '\' for \'' + fieldName + '\' field');
          choicePos++;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {
      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';
      var fieldNameIndex = 0;

      for (var fieldName in Ember.get(testScope, model)) {
        var pathName = isDefault ? fieldName : 'customField.' + fieldName;
        var relativeName = isDefault ? "defaultFieldModel." + pathName : 'customFieldModel.' + pathName;
        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \'' + valuesInModel[fieldNameIndex] + '\' as value for \'' + fieldName + '\' field');
        fieldNameIndex++;
      }
    }

    (0, _qunit.test)('dependent-radio-field (as default field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(58);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);
                return _context.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatus(assert, _this, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                  return (0, _wait.default)().then(function () {
                    assertFieldStatus(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);
                    assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);
                    return (0, _wait.default)().then(function () {
                      assertFieldStatus(assert, _this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, true);
                      assertModelStatus(assert, _this, ['usa_id', 'punjab_id', undefined, 'patiala_id', undefined], true);
                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                    });
                  });
                }));

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var formConfig, dependentSelectConfig, usaObj, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(58);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context2.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "t7ijM873",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                assertFieldStatus(assert, this, 'cfCountry', 'Country', null, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);
                return _context2.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatus(assert, _this2, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                  return (0, _wait.default)().then(function () {
                    assertFieldStatus(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);
                    assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);
                    return (0, _wait.default)().then(function () {
                      assertFieldStatus(assert, _this2, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, true);
                      assertModelStatus(assert, _this2, [usaObj, punjabObj, undefined, patialaObj, undefined], true);
                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                    });
                  });
                }));

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(58);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);
                return _context3.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatus(assert, _this3, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                  return (0, _wait.default)().then(function () {
                    assertFieldStatus(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);
                    assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);
                    return (0, _wait.default)().then(function () {
                      assertFieldStatus(assert, _this3, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, false);
                      assertModelStatus(assert, _this3, ['USA', 'Punjab', undefined, 'Patiala', undefined], false);
                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                    });
                  });
                }));

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this4 = this;

        var formConfig, dependentSelectConfig, usaObj, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(58);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                _context4.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                assertFieldStatus(assert, this, 'cfCountry', 'Country', null, ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[1]);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);
                return _context4.abrupt("return", (0, _wait.default)().then(function () {
                  assertFieldStatus(assert, _this4, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);
                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);
                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthState"] input')[0]);
                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                  return (0, _wait.default)().then(function () {
                    assertFieldStatus(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);
                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthStateUrbanCity"] input')[1]);
                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);
                    assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);
                    return (0, _wait.default)().then(function () {
                      assertFieldStatus(assert, _this4, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);
                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfCountry"] input')[0]);
                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, false);
                      assertModelStatus(assert, _this4, [usaObj, punjabObj, undefined, patialaObj, undefined], false);
                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                    });
                  });
                }));

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this5 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(45);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');
                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');
                });
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'punjab_id', ['Punjab', 'Himachal Pradesh'], true);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', ['Mandi', 'Ajdhar'], true);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, true);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 18:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this6 = this;

        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(45);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                Ember.run(function () {
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this6, 'defaultFieldModel.cfCountry', indiaObj);
                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', punjabObj);
                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', patialaObj);
                });
                _context6.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 10:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], true);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], true);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], true);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, true);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 21:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this7 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(45);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');
                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');
                });
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'Punjab', ['Punjab', 'Himachal Pradesh'], false);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', ['Mandi', 'Ajdhar'], false);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, false);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \'\'', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this8 = this;

        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(45);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');
                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');
                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');
                Ember.run(function () {
                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');
                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);
                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);
                });
                _context8.next = 10;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 10:
                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);
                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);
                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], false);
                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);
                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);
                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], false);
                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);
                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], false);
                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, false);
                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);

              case 21:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as default field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var _this9 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(5);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this9, 'defaultFieldModel.cfCountry', 'india_id');
                  Ember.set(_this9, 'defaultFieldModel.cfNorthState', 'punjab_id');
                  Ember.set(_this9, 'defaultFieldModel.cfNorthStateUrbanCity', 'Amritsar');
                });
                _context9.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="cfNorthState"] input')[1]);
                return _context9.abrupt("return", (0, _wait.default)().then(function () {
                  assertModelStatus(assert, _this9, ['india_id', 'himachal_pradesh_id', undefined, undefined, undefined], true);
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                }));

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('dependent-power-select-field (as custom field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this10 = this;

        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(5);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    resetChildFields: false,
                    choiceMappingAttr: 'id'
                  });
                });
                Ember.run(function () {
                  Ember.set(_this10, 'customFieldModel.customField.cfCountry', 'India');
                  Ember.set(_this10, 'customFieldModel.customField.cfNorthState', 'Punjab');
                  Ember.set(_this10, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');
                });
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.cfNorthState"] input')[1]);
                return _context10.abrupt("return", (0, _wait.default)().then(function () {
                  assertModelStatus(assert, _this10, ['India', 'Himachal Pradesh', undefined, undefined, undefined], false);
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                }));

              case 9:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/email-field/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _createField, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/email field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("Check the email component renders hint as default field", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);

                _createField.default.email(this);

                _context.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check the email component renders hint as custom field', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);

                _createField.default.email(this, {
                  custom: true
                });

                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the email component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "française";

                _createField.default.email(this, {
                  label: sampleLabel
                });

                _context3.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check if the email component follows accessibility features related to required attribute', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var inputElement;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(2);

                _createField.default.email(this, {
                  required: true
                });

                _context4.next = 4;
                return _createField.default.renderForm(this);

              case 4:
                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];
                assert.equal(true, inputElement["required"]);
                assert.equal(null, inputElement["ariaRequired"]);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/checkbox-field/custom/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field/checkbox field | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');
                this.schema.fields[0].custom = true;
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context3.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context3.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return (0, _emberNativeDomHelpers.click)(inputs[0]);

                        case 2:
                          assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Formula field NOT updated");
                          assert.notOk(_this.model.customField.drive, "Check property 'drive' is set to false on the model");
                          _context2.next = 6;
                          return (0, _emberNativeDomHelpers.click)(inputs[1]);

                        case 6:
                          return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Formula field is updated");
                                    assert.ok(_this.model.customField.drive, "Check value 'true' is updated on the model");
                                    _context.next = 4;
                                    return (0, _emberNativeDomHelpers.click)(inputs[0]);

                                  case 4:
                                    assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Formula field is updated");
                                    assert.notOk(_this.model.customField.drive, "Check value 'false' is updated on the model");

                                  case 6:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee);
                          }))));

                        case 7:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }))));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated when controlling field changes, formula-field custom', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                _context4.next = 9;
                return (0, _emberNativeDomHelpers.click)(inputs[0]);

              case 9:
                assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Formula field NOT updated");
                assert.notOk(this.model.customField.drive, "Check property 'drive' is set to false on the model");
                _context4.next = 13;
                return (0, _emberNativeDomHelpers.click)(inputs[1]);

              case 13:
                assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Formula field is updated");
                assert.ok(this.model.customField.drive, "Check value 'true' is updated on the model");
                _context4.next = 17;
                return (0, _emberNativeDomHelpers.click)(inputs[0]);

              case 17:
                assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Formula field is updated");
                assert.notOk(this.model.customField.drive, "Check value 'false' is updated on the model");

              case 19:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated when controlling field changes, formula-field and 1 input custom', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context5.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                _context5.next = 10;
                return (0, _emberNativeDomHelpers.click)(inputs[0]);

              case 10:
                assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Formula field NOT updated");
                assert.notOk(this.model.customField.drive, "Check property 'drive' is set to false on the model");
                _context5.next = 14;
                return (0, _emberNativeDomHelpers.click)(inputs[1]);

              case 14:
                assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Formula field is updated");
                assert.ok(this.model.customField.drive, "Check value 'true' is updated on the model");
                _context5.next = 18;
                return (0, _emberNativeDomHelpers.click)(inputs[0]);

              case 18:
                assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Formula field is updated");
                assert.notOk(this.model.customField.drive, "Check value 'false' is updated on the model");

              case 20:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x3) {
        return _ref6.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/checkbox-field/custom/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | checkbox-field | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                _context.next = 3;
                return (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');

              case 3:
                this.schema.fields[0].custom = true;
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {
                    age: true,
                    licence: true
                  }
                };
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Formula field is updated");
                  assert.ok(_this.model.customField.drive, "property 'drive' is set as true in model");
                }));

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated when controlling field changes, formula-field custom', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');
                this.schema.fields[2].custom = true;
                this.model = {
                  age: true,
                  licence: true,
                  customField: {}
                };
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Formula field is updated");
                  assert.ok(_this2.model.customField.drive, "property 'drive' is set as true in model");
                }));

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated when controlling field changes, formula-field and 1 input custom', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  age: true,
                  customField: {
                    licence: true
                  }
                };
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Formula field is updated");
                  assert.ok(_this3.model.customField.drive, "property 'drive' is set as true in model");
                }));

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/checkbox-field/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | checkbox-field | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.click)(inputs[0]);
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Check formula is NOT updated");
                  assert.notOk(_this.model.drive, "property 'drive' is set to 'false' on the model");
                  (0, _emberNativeDomHelpers.click)(inputs[1]);
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Check formula is updated");
                    assert.ok(_this.model.drive, "value 'true' is updated in model");
                    (0, _emberNativeDomHelpers.click)(inputs[0]);
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].hasAttribute('paramchecked'), false, "Check formula is updated");
                      assert.notOk(_this.model.drive, "value 'false' is updated in model");
                    });
                  });
                }));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/checkbox-field/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | checkbox-field | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');
                this.model = {
                  age: true,
                  licence: true
                };
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, "Check formula field 'drive' is updated as 'true'");
                }));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/class-name-bindings/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | class-name-bindings', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("#TEST1 check css class 'expression-eval-failed' is attached to formula-field when evaluation failed", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[2].fieldOptions.expr = "#{revenue_from_product_a}/#{revenue_from_product_b}";
                this.model = {};
                _context3.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                _context3.next = 9;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 100);

              case 9:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return (0, _emberNativeDomHelpers.fillIn)(inputs[1], 0);

                        case 2:
                          return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    assert.ok((0, _emberNativeDomHelpers.find)('.expression-eval-failed'), "check class name 'expression-eval-failed' is bound to formula-field");

                                  case 1:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee);
                          }))));

                        case 3:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }))));

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 check css class 'expression-eval-failed' is removed when a subsequent evaluation is success", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[2].fieldOptions.expr = "#{revenue_from_product_a}/#{revenue_from_product_b}";
                this.model = {};
                _context7.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                _context7.next = 9;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 800);

              case 9:
                return _context7.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          _context6.next = 2;
                          return (0, _emberNativeDomHelpers.fillIn)(inputs[1], 0);

                        case 2:
                          assert.ok((0, _emberNativeDomHelpers.find)('.expression-eval-failed'), "check class name 'expression-eval-failed' is bound to the formula-field");
                          return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                              while (1) {
                                switch (_context5.prev = _context5.next) {
                                  case 0:
                                    _context5.next = 2;
                                    return (0, _emberNativeDomHelpers.fillIn)(inputs[1], 2);

                                  case 2:
                                    return _context5.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                      return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                        while (1) {
                                          switch (_context4.prev = _context4.next) {
                                            case 0:
                                              assert.notOk((0, _emberNativeDomHelpers.find)('.expression-eval-failed'), "check class name 'expression-eval-failed' is removed from the formula-field");

                                            case 1:
                                            case "end":
                                              return _context4.stop();
                                          }
                                        }
                                      }, _callee4);
                                    }))));

                                  case 3:
                                  case "end":
                                    return _context5.stop();
                                }
                              }
                            }, _callee5);
                          }))));

                        case 4:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }))));

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x2) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 check css class 'expression-eval-in-progress' is attached to the element when evaluation is in progress", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[2].fieldOptions.expr = "#{revenue_from_product_a}/#{revenue_from_product_b}";
                this.model = {};
                _context10.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                _context10.next = 9;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 800);

              case 9:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          (0, _emberNativeDomHelpers.fillIn)(inputs[1], 4);
                          assert.ok((0, _emberNativeDomHelpers.find)('.expression-eval-in-progress'), "check class name 'expression-eval-in-progress' is bound to the formula-field");
                          return _context9.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                            return regeneratorRuntime.wrap(function _callee8$(_context8) {
                              while (1) {
                                switch (_context8.prev = _context8.next) {
                                  case 0:
                                    assert.notOk((0, _emberNativeDomHelpers.find)('.expression-eval-in-progress'), "check class name 'expression-eval-in-progress' removed from the formula-field");

                                  case 1:
                                  case "end":
                                    return _context8.stop();
                                }
                              }
                            }, _callee8);
                          }))));

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 10:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x3) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/fieldOptions/evalservRequestHeaders/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field", "ember-cli-fake-server"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField, _emberCliFakeServer) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | fieldOptions | evalservRequestHeaders', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)("#TEST1 formula field: Should send http request to server with specified header options", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var dynamicFormConfig, url, inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(5);
                dynamicFormConfig = this.owner.lookup('service:dynamic-form/config');
                url = Ember.get(dynamicFormConfig, 'formulaDefaultConfig.evalservUrl');
                (0, _emberCliFakeServer.stubRequest)('post', url, function (request) {
                  assert.equal(request.url, url, 'received a request for formserv url');
                  assert.equal(request.requestHeaders["Access-Control-Allow-Origin"], "https://foo.bar.org", "'Access-Control-Allow-Origin' is present");
                  assert.equal(request.requestHeaders["Access-Control-Max-Age"], 86400, "'Access-Control-Max-Age' is present");
                  request.ok({
                    result: "Bruce Wayne"
                  });
                });
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[2].fieldOptions.evalserv_request_headers = {
                  "Access-Control-Allow-Origin": 'https://foo.bar.org',
                  "Access-Control-Max-Age": 86400
                };
                this.model = {};
                _context.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], "Bruce ");
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], "Wayne");
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('input')[2].value, "Bruce Wayne", "formula field should get updated");
                  assert.equal(_this.model.fullName, "Bruce Wayne", "model should get updated");
                }));

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/fieldOptions/evaluateOnOperandDataUpdate/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | fieldOptions | evaluateOnOperandDataUpdate', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)("#TEST1 formula field: Should not evaluate expression when 'evaluateOnOperandDataUpdate' is set to false", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[2].fieldOptions.evaluate_on_operand_data_update = false;
                this.model = {};
                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], "Bruce ");
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], "Wayne");
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('input')[2].value, "", "formula field should not get updated");
                  assert.equal(_this.model.fullName, undefined, "model should not get updated");
                }));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 formula field: Should evaluate expression when 'evaluateOnOperandDataUpdate' is set to true", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[2].fieldOptions.evaluate_on_operand_data_update = true;
                this.model = {};
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], "Bruce ");
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], "Wayne");
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)('input')[2].value, "Bruce Wayne", "formula field should get updated");
                  assert.equal(_this2.model.fullName, "Bruce Wayne", "model should get updated");
                }));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/number-field/custom/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[0].custom = true;
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 100);
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 200);
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 300, "Check formula field gets expected value");
                  assert.equal(_this.model.customField.total_revenue, 300, "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 101);
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, 301, "Check formula field gets new updated value");
                    assert.equal(_this.model.customField.total_revenue, 301, "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 400);
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, 501, "Check formula field gets new updated value");
                      assert.equal(_this.model.customField.total_revenue, 501, "Check value is updated on the model");
                    });
                  });
                }));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated when controlling field changes, formula-field custom', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 11);
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 22);
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 33, "Check formula field gets expected value");
                  assert.equal(_this2.model.customField.total_revenue, 33, "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 10);
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, 32, "Check formula field gets new updated value");
                    assert.equal(_this2.model.customField.total_revenue, 32, "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 400);
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, 410, "Check formula field gets new updated value");
                      assert.equal(_this2.model.customField.total_revenue, 410, "Check value is updated on the model");
                    });
                  });
                }));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated when controlling field changes, formula-field and 1 input custom', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 1200);
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 800);
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 2000, "Check formula field gets expected value");
                  assert.equal(_this3.model.customField.total_revenue, 2000, "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 1);
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, 801, "Check formula field gets new updated value");
                    assert.equal(_this3.model.customField.total_revenue, 801, "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 12);
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, 13, "Check formula field gets new updated value");
                      assert.equal(_this3.model.customField.total_revenue, 13, "Check value is updated on the model");
                    });
                  });
                }));

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST4 formula field: Check if formula-field gets created when expression has no controlling fields', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this4 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.schema.fields[2].fieldOptions.expr = "2000+3000";
                this.schema.fields[2].fieldOptions.expression_field_ids = null;
                this.model = {
                  customField: {}
                };
                _context4.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context4.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 5000, "Check formula field gets expected value");
                  assert.equal(_this4.model.customField.total_revenue, 5000, "Check value is updated on the model");
                }));

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/number-field/custom/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value, all fields custom', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[0].custom = true;
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {
                    revenue_from_product_a: 60,
                    revenue_from_product_b: 70
                  }
                };
                _context.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 130, "Check formula field gets expected value");
                  assert.equal(_this.model.customField.total_revenue, 130, "Check value is updated on the model");
                }));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated with previously loaded value, only formula field custom', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {},
                  revenueFromProductA: 12,
                  revenueFromProductB: 13
                };
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 25, "Check formula field gets expected value");
                  assert.equal(_this2.model.customField.total_revenue, 25, "Check value is updated on the model");
                }));

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated with previously loaded value, formula field and 1 input custom', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.schema.fields[0].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {
                    revenue_from_product_a: 30
                  },
                  revenueFromProductB: 50
                };
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 80, "Check formula field gets expected value");
                  assert.equal(_this3.model.customField.total_revenue, 80, "Check value is updated on the model");
                }));

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/number-field/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 100);
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 200);
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 300, "Check formula field gets expected value");
                  assert.equal(_this.model.totalRevenue, 300, "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 101);
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, 301, "Check formula field gets new updated value");
                    assert.equal(_this.model.totalRevenue, 301, "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 400);
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, 501, "Check formula field gets new updated value");
                      assert.equal(_this.model.totalRevenue, 501, "Check value is updated on the model");
                    });
                  });
                }));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/number-field/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'number-field');
                this.model = {
                  revenueFromProductA: 12,
                  revenueFromProductB: 13
                };
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, 25, "Check formula field gets expected value");
                  assert.equal(_this.model.totalRevenue, 25, "Check value is updated on the model");
                }));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field", "dummy/tests/helpers/ember-power-select"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField, _emberPowerSelect) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | power-select-field| default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(4);
                (0, _createFormulaField.createFormulaField)(this, 'power-select-field');
                this.model = {};
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="country"]');
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="country"] .ember-power-select-trigger')[0], 13);
                (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="state"]');
                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="state"] .ember-power-select-trigger')[0], 13);
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[0].value, "INDIA KERALA", "Check value 'INDIA KERALA' is updated in text field");
                  assert.strictEqual(_this.model.address, "INDIA KERALA", "Check value 'INDIA KERALA' is updated on the model");
                  (0, _emberPowerSelect.clickTrigger)('[data-test-field-name="state"]');
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="state"] .ember-power-select-trigger')[0], 40);
                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="state"] .ember-power-select-trigger')[0], 13);
                  return (0, _testHelpers.settled)().then(function () {
                    assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[0].value, "INDIA TAMIL NADU", "Check value 'INDIA TAMIL NADU' is updated in text field");
                    assert.strictEqual(_this.model.address, "INDIA TAMIL NADU", "Check value 'INDIA TAMIL NADU' is updated on the model");
                  });
                }));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | power-select-field | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'power-select-field');
                this.model = {
                  country: {
                    id: "india_id",
                    value: "INDIA",
                    position: 1,
                    parentChoiceIds: null
                  },
                  state: "TAMIL NADU"
                };
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[0].value, "INDIA TAMIL NADU", "Check value 'INDIA TAMIL NADU' is updated in text field");
                  assert.strictEqual(_this.model.address, "INDIA TAMIL NADU", "Check value 'INDIA TAMIL NADU' is updated on the model");
                }));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/selectable-fields/radio-field/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | radio-field| default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(4);
                (0, _createFormulaField.createFormulaField)(this, 'radio-field');
                this.model = {};
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.click)(inputs[0]);
                (0, _emberNativeDomHelpers.click)(inputs[2]);
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[4].hasAttribute('paramvalue'), true, "Check value 'true' is checked");
                  assert.strictEqual(_this.model.drive, true, "Check value 'true' is updated on the model");
                  (0, _emberNativeDomHelpers.click)(inputs[1]);
                  return (0, _testHelpers.settled)().then(function () {
                    assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[5].hasAttribute('paramvalue'), false, "Check value 'false' is checked");
                    assert.strictEqual(_this.model.drive, false, "Check value 'false' is updated on the model");
                  });
                }));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/selectable-fields/radio-field/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | radio-field| default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'radio-field');
                this.model = {
                  licence: {
                    id: "can_drive_id",
                    parentChoiceIds: null,
                    position: 1,
                    value: "Yes"
                  },
                  age: "No"
                };
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[4].hasAttribute('paramvalue'), false, "Check value 'false' is checked");
                  assert.strictEqual(_this.model.drive, false, "Check value 'false' is checked");
                }));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/text-field/custom/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[0].custom = true;
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], "John");
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Doe");
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Doe", "Check formula field gets expected value");
                  assert.equal(_this.model.customField.full_name, "John Doe", "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], "Mark");
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, "Mark Doe", "Check formula field gets new updated value");
                    assert.equal(_this.model.customField.full_name, "Mark Doe", "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Wayne");
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, "Mark Wayne", "Check formula field gets new updated value");
                      assert.equal(_this.model.customField.full_name, "Mark Wayne", "Check value is updated on the model");
                    });
                  });
                }));

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated with previously loaded value, only formula field custom', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], "John");
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Doe");
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Doe", "Check formula field gets expected value");
                  assert.equal(_this2.model.customField.full_name, "John Doe", "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], "Mark");
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, "Mark Doe", "Check formula field gets new updated value");
                    assert.equal(_this2.model.customField.full_name, "Mark Doe", "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Wayne");
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, "Mark Wayne", "Check formula field gets new updated value");
                      assert.equal(_this2.model.customField.full_name, "Mark Wayne", "Check value is updated on the model");
                    });
                  });
                }));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated with previously loaded value, formula field and 1 input custom', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {}
                };
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], "John");
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Doe");
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Doe", "Check formula field gets expected value");
                  assert.equal(_this3.model.customField.full_name, "John Doe", "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], "Mark");
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, "Mark Doe", "Check formula field gets new updated value");
                    assert.equal(_this3.model.customField.full_name, "Mark Doe", "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Wayne");
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, "Mark Wayne", "Check formula field gets new updated value");
                      assert.equal(_this3.model.customField.full_name, "Mark Wayne", "Check value is updated on the model");
                    });
                  });
                }));

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/text-field/custom/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value, all fields custom', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[0].custom = true;
                this.schema.fields[1].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {
                    first_name: "John",
                    last_name: " Doe"
                  }
                };
                _context.next = 8;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 8:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Doe", "Check formula field gets expected value");
                  assert.equal(_this.model.customField.full_name, "John Doe", "Check value is updated on the model");
                }));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated with previously loaded value, only formula field custom', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {},
                  firstName: "John",
                  lastName: " Doe"
                };
                _context2.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Doe", "Check formula field gets expected value");
                  assert.equal(_this2.model.customField.full_name, "John Doe", "Check value is updated on the model");
                }));

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated with previously loaded value, formula field and 1 input custom', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.schema.fields[0].custom = true;
                this.schema.fields[2].custom = true;
                this.model = {
                  customField: {
                    first_name: "John"
                  },
                  lastName: " Doe"
                };
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Doe", "Check formula field gets expected value");
                  assert.equal(_this3.model.customField.full_name, "John Doe", "Check value is updated on the model");
                }));

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/text-field/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(6);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                (0, _emberNativeDomHelpers.fillIn)(inputs[0], "John");
                (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Doe");
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Doe", "Check formula field gets expected value");
                  assert.equal(_this.model.fullName, "John Doe", "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], "Mark");
                  return (0, _testHelpers.settled)().then(function () {
                    assert.equal(inputs[2].value, "Mark Doe", "Check formula field gets new updated value");
                    assert.equal(_this.model.fullName, "Mark Doe", "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], " Wayne");
                    return (0, _testHelpers.settled)().then(function () {
                      assert.equal(inputs[2].value, "Mark Wayne", "Check formula field gets new updated value");
                      assert.equal(_this.model.fullName, "Mark Wayne", "Check value is updated on the model");
                    });
                  });
                }));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/formula-field/text-field/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-formula-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(2);
                (0, _createFormulaField.createFormulaField)(this, 'text-field');
                this.model = {
                  firstName: "John",
                  lastName: " Wick"
                };
                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Ou6csUKL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal(inputs[2].value, "John Wick", "Check formula field gets expected value");
                  assert.equal(_this.model.fullName, "John Wick", "Check value is updated on the model");
                }));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/group-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/string-helper-methods", "dummy/tests/helpers/create-field"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/group field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    Ember.setProperties(this, {
      defaultModel: {},
      customModel: {},
      defaultSchema: {
        name: 'Some Form',
        fields: [{
          id: 'my_emails_id',
          parent: null,
          type: 'group_field',
          label: 'My Emails',
          hint: 'personal_email',
          name: 'my_emails',
          position: 1,
          editable: true,
          custom: false,
          inputType: 'group-field',
          placeholder: 'Email Address',
          fieldOptions: {
            group_type: 'email',
            max_items: 2
          },
          fields: []
        }]
      },
      customSchema: {
        name: 'Some Form',
        fields: [{
          id: 'my_emails_id',
          parent: null,
          type: 'group_field',
          label: 'My Emails',
          hint: 'personal_email',
          name: 'my_emails',
          position: 1,
          editable: true,
          custom: true,
          inputType: 'group-field',
          placeholder: '',
          fieldOptions: {
            group_type: 'email',
            max_items: 2
          },
          fields: []
        }]
      },
      groupFieldAsADependentFieldSchema: {
        name: 'Some Form',
        fields: [{
          id: 'has_email_id',
          parent: null,
          type: 'dropdown',
          label: 'Has Email',
          name: 'has_email',
          position: 1,
          editable: true,
          custom: false,
          inputType: 'power-select-dependent-field',
          placeholder: '',
          fieldOptions: {
            dependent: true
          },
          getChoices: [{
            id: "yes_id",
            name: "Yes",
            position: 1,
            dependentIds: {
              field: ["my_emails_id"],
              choice: []
            }
          }, {
            id: "no_id",
            name: "No",
            position: 2,
            dependentIds: {
              field: [],
              choice: []
            }
          }],
          fields: [{
            id: 'my_emails_id',
            parent: null,
            type: 'group_field',
            label: 'My Emails',
            name: 'my_emails',
            position: 1,
            editable: true,
            custom: false,
            inputType: 'group-field',
            placeholder: '',
            fieldOptions: {
              group_type: 'email',
              max_items: 2,
              dependent: true
            },
            fields: []
          }],
          optionValuePath: 'id',
          optionLabelPath: 'name'
        }]
      },
      fieldMap: Ember.computed({
        get: function get() {
          return {
            section: {
              single: 'nested-section',
              dependent: 'nested-section'
            },
            dropdown: {
              single: 'power-select-field',
              dependent: 'power-select-dependent-field'
            },
            dependent_dropdown: {
              single: 'dependent-dropdown',
              dependent: 'dependent-dropdown'
            },
            text: {
              single: 'text-field',
              dependent: 'text-field'
            },
            checkbox: {
              single: 'checkbox-field',
              dependent: 'checkbox-dependent-field'
            },
            number: {
              single: 'number-field',
              dependent: 'number-field'
            },
            paragraph: {
              single: 'textarea-field',
              dependent: 'textarea-field'
            },
            radio: {
              single: 'radio-field',
              dependent: 'radio-dependent-field'
            },
            date: {
              single: 'datetime-field',
              dependent: 'datetime-field'
            },
            date_time: {
              single: 'datetime-field',
              dependent: 'datetime-field'
            },
            auto_complete: {
              single: 'auto-complete',
              dependent: 'auto-complete'
            },
            email: {
              single: 'email-field',
              dependent: 'email-field'
            },
            phone_number: {
              single: 'text-field',
              dependent: 'text-field'
            },
            url: {
              single: 'url-field',
              dependent: 'url-field'
            },
            decimal: {
              single: 'number-field',
              dependent: 'number-field'
            },
            multi_select_dropdown: {
              single: 'multi-select-dropdown-field',
              dependent: 'multi-select-dropdown-field'
            },
            date_time_split: {
              single: 'date-time-split-field',
              dependent: 'date-time-split-field'
            },
            group_field: {
              single: 'group-field',
              dependent: 'group-field'
            }
          };
        }
      }).readOnly()
    });
    (0, _qunit.test)('group-field (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(5);
                Ember.setProperties(this, {
                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),
                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)
                });
                Ember.set(this, 'defaultFieldModel', {
                  myEmails: Ember.A([])
                });
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'The \'Add more...\' button renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');
                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('myEmails_hint'), 'Hint id for the hint component gets populated properly');

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Render custom hint component for group-field', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                this.owner.register('component:custom-tooltip', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "wpQ1P2uR",
                    "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[9,\"class\",\"my_tooltip\"],[7],[0,\"This_is_custom_tooltip\"],[8]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                Ember.setProperties(this, {
                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),
                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true),
                  fieldNameToHintComponentMap: {
                    my_emails: 'custom-tooltip'
                  }
                });
                Ember.set(this, 'defaultFieldModel', {
                  myEmails: Ember.A([])
                });
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context2.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "G8ajctLL",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldNameToHintComponentMap\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]],[20,[\"fieldNameToHintComponentMap\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Custom hint for field renders properly');
                Ember.run(function () {
                  _this.owner.unregister('component:custom-tooltip');
                });

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field (as default field) : Check if the placeholder gets rendered for all fields', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(4);
                Ember.setProperties(this, {
                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),
                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)
                });
                Ember.set(this, 'defaultFieldModel', {
                  myEmails: Ember.A([])
                });
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.max_items', 4);
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context3.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[0]['placeholder'], 'Email Address');
                _context3.next = 10;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));

              case 10:
                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[1]['placeholder'], 'Email Address');
                _context3.next = 13;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));

              case 13:
                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[2]['placeholder'], 'Email Address');
                _context3.next = 16;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));

              case 16:
                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[3]['placeholder'], 'Email Address');

              case 17:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(5);
                Ember.setProperties(this, {
                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),
                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)
                });
                Ember.set(this, 'customFieldModel', {
                  customField: {
                    my_emails: Ember.A([])
                  }
                });
                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context4.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'The \'Add more...\' button renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');
                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('customField.my_emails_hint'), 'Hint id for the hint component gets populated properly');

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field (as default field) : Clicking \'Add more...\' button allows user to add more group field items', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(5);
                Ember.setProperties(this, {
                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),
                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)
                });
                Ember.set(this, 'defaultFieldModel', {
                  myEmails: Ember.A([])
                });
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context5.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User is allowed to add more items, if needed');
                _context5.next = 11;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));

              case 11:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 2, 'Two items are currently shown in group field');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field (as custom field) : Clicking \'Add more...\' button allows user to add more group field items', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(5);
                Ember.setProperties(this, {
                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),
                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)
                });
                Ember.set(this, 'customFieldModel', {
                  customField: {
                    my_emails: Ember.A([])
                  }
                });
                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context6.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User is allowed to add more items, if needed');
                _context6.next = 11;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));

              case 11:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 2, 'Two items are currently shown in group field');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field (as default field) : User is able to add items and mark one such item as primary', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(6);
                Ember.setProperties(this, {
                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),
                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)
                });
                Ember.set(this, 'defaultFieldModel', {
                  myEmails: Ember.A([])
                });
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                Ember.set(this, 'defaultFieldModel.myEmails', Ember.A([{
                  id: 1,
                  value: 'xyz@example.com',
                  is_primary: true
                }, {
                  id: 2,
                  value: 'abc@test.com',
                  is_primary: false
                }]));
                _context7.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'First item is marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), 'xyz@example.com', 'First item contains \'xyz@example.com\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1].checked, false, 'Second item is not marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[1]['value']), 'abc@test.com', 'Second item contains \'abc@test.com\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control')[0]['innerText'], 'Remove', 'Second item\'s \'Remove\' button renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field (as custom field) : User is able to add items and mark one such item as primary', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(6);
                Ember.setProperties(this, {
                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),
                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)
                });
                Ember.set(this, 'customFieldModel', {
                  customField: {
                    my_emails: Ember.A([])
                  }
                });
                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                Ember.set(this, 'customFieldModel.customField.my_emails', Ember.A([{
                  id: 1,
                  value: 'xyz@example.com',
                  is_primary: true
                }, {
                  id: 2,
                  value: 'abc@test.com',
                  is_primary: false
                }]));
                _context8.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'First item is marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), 'xyz@example.com', 'First item contains \'xyz@example.com\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1].checked, false, 'Second item is not marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[1]['value']), 'abc@test.com', 'Second item contains \'abc@test.com\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control')[0]['innerText'], 'Remove', 'Second item\'s \'Remove\' button renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field : Apps can configure minimum number of items to be always rendered', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(6);
                Ember.setProperties(this, {
                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),
                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)
                });
                Ember.set(this, 'customFieldModel', {
                  customField: {
                    my_emails: Ember.A([])
                  }
                });
                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions.min_items', 2);
                _context9.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'First item is marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), '', 'First item contains \'\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1].checked, false, 'Second item is not marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[1]['value']), '', 'Second item contains \'\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control').length, 0, 'Remove button does not appear next to each item, as minimum items limit is reached');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');

              case 13:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field : Removing an item sets \'_destroy\' meta as true for the item', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(5);
                Ember.setProperties(this, {
                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),
                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)
                });
                Ember.set(this, 'customFieldModel', {
                  customField: {
                    my_emails: Ember.A([])
                  }
                });
                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                Ember.set(this, 'customFieldModel.customField.my_emails', Ember.A([{
                  id: 1,
                  value: 'xyz@example.com',
                  is_primary: true
                }, {
                  id: 2,
                  value: 'abc@test.com',
                  is_primary: false
                }]));
                _context10.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "SIw1GWIn",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context10.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1]);

              case 9:
                _context10.next = 11;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.remove-button-control'));

              case 11:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')['length'], 1, 'There is only one item');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'Item is marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), 'abc@test.com', 'Item contains \'abc@test.com\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control')['length'], 0, 'User cannot remove primary item');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User can add more items');

              case 16:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field : Works properly as a dependent field', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(4);
                Ember.setProperties(this, {
                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),
                  groupFieldAsDependentFieldSchema: Ember.copy(Ember.get(this, 'groupFieldAsADependentFieldSchema'), true)
                });
                Ember.set(this, 'defaultFieldModel', {
                  myEmails: Ember.A([])
                });
                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context11.next = 7;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "NSPcukJo",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"groupFieldAsDependentFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context11.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'));

              case 9:
                _context11.next = 11;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'), 13);

              case 11:
                _context11.next = 13;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="myEmails"] .add-button-control'));

              case 13:
                _context11.next = 15;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .radio-control input')[1]);

              case 15:
                _context11.next = 17;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'));

              case 17:
                _context11.next = 19;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'), 40);

              case 19:
                _context11.next = 21;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'), 13);

              case 21:
                _context11.next = 23;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'));

              case 23:
                _context11.next = 25;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'), 38);

              case 25:
                _context11.next = 27;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-trigger'), 13);

              case 27:
                //  Press Enter
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')['length'], 1, 'There is only one item');
                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .radio-control input')[0].checked, true, 'First item is marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .field-type-control input')[0]['value']), '', 'First item contains \'\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User can add more items');

              case 31:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('group-field : Works properly as a dependent field, in edit scenario', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(7);
                Ember.setProperties(this, {
                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),
                  groupFieldAsDependentFieldSchema: Ember.copy(Ember.get(this, 'groupFieldAsADependentFieldSchema'), true)
                });
                Ember.set(this, 'defaultFieldModel', {
                  myEmails: Ember.A([])
                });
                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                Ember.set(this, 'defaultFieldModel.hasEmail', 'yes_id');
                Ember.set(this, 'defaultFieldModel.myEmails', Ember.A([{
                  id: 1,
                  value: 'xyz@example.com',
                  is_primary: false
                }, {
                  id: 2,
                  value: 'abc@test.com',
                  is_primary: true
                }]));
                _context12.next = 9;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "NSPcukJo",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"groupFieldAsDependentFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 9:
                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="hasEmail"] .ember-power-select-selected-item')['innerText'], 'Yes', 'Choice \'Yes\' is selected in parent field');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')['length'], 2, 'There are two items shown');
                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .radio-control input')[0].checked, false, 'First item is not marked as primary');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .field-type-control input')[0]['value']), 'xyz@example.com', 'First item contains \'xyz@example.com\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .radio-control input')[1].checked, true, 'Second item is marked as primary');
                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .field-type-control input')[1]['value'].trim(), 'abc@test.com', 'Second item contains \'abc@test.com\' as value');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');

              case 16:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the group_field component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "여보세요";

                _createField.default.group(this, {
                  label: sampleLabel
                });

                _context13.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/group-field/custom-palette/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/group field | custom-palette', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    Ember.setProperties(this, {
      defaultFieldModel: {
        myEmails: Ember.A([])
      },
      defaultFieldSchema: {
        name: 'Some Form',
        fields: [{
          id: 'my_emails_id',
          parent: null,
          type: 'group_field',
          label: 'My Emails',
          hint: 'personal_email',
          name: 'my_emails',
          position: 1,
          editable: true,
          custom: false,
          inputType: 'group-field',
          placeholder: 'Email Address',
          fieldOptions: {
            group_type: 'email',
            max_items: 2
          },
          getChoices: [{
            id: "work_id",
            value: "Work",
            position: 1
          }, {
            id: "personal_id",
            value: "Personal",
            position: 2
          }],
          fields: []
        }]
      },
      fieldMap: Ember.computed({
        get: function get() {
          return {
            section: {
              single: 'nested-section',
              dependent: 'nested-section'
            },
            dropdown: {
              single: 'power-select-field',
              dependent: 'power-select-dependent-field'
            },
            dependent_dropdown: {
              single: 'dependent-dropdown',
              dependent: 'dependent-dropdown'
            },
            text: {
              single: 'text-field',
              dependent: 'text-field'
            },
            checkbox: {
              single: 'checkbox-field',
              dependent: 'checkbox-dependent-field'
            },
            number: {
              single: 'number-field',
              dependent: 'number-field'
            },
            paragraph: {
              single: 'textarea-field',
              dependent: 'textarea-field'
            },
            radio: {
              single: 'radio-field',
              dependent: 'radio-dependent-field'
            },
            date: {
              single: 'datetime-field',
              dependent: 'datetime-field'
            },
            date_time: {
              single: 'datetime-field',
              dependent: 'datetime-field'
            },
            auto_complete: {
              single: 'auto-complete',
              dependent: 'auto-complete'
            },
            email: {
              single: 'email-field',
              dependent: 'email-field'
            },
            phone_number: {
              single: 'text-field',
              dependent: 'text-field'
            },
            url: {
              single: 'url-field',
              dependent: 'url-field'
            },
            decimal: {
              single: 'number-field',
              dependent: 'number-field'
            },
            multi_select_dropdown: {
              single: 'multi-select-dropdown-field',
              dependent: 'multi-select-dropdown-field'
            },
            date_time_split: {
              single: 'date-time-split-field',
              dependent: 'date-time-split-field'
            },
            group_field: {
              single: 'group-field',
              dependent: 'group-field'
            }
          };
        }
      }).readOnly()
    });
    (0, _qunit.test)('group-field : Custom component passed by products gets rendered properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var formConfig, selectedDropdownItems;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(4);
                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                this.owner.register('component:my-custom-palette', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "Fp/D24JC",
                    "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-controls/power-select\",null,[[\"options\",\"optionValuePath\",\"optionLabelPath\",\"object\",\"propertyName\",\"schema\",\"update\",\"allowClear\"],[[20,[\"options\"]],\"value\",\"value\",[20,[\"object\"]],\"category\",[20,[\"schema\"]],[20,[\"update\"]],true]]],false]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                formConfig = this.owner.lookup('service:dynamic-form/config');
                Ember.set(formConfig, 'groupFieldDefaultConfig.customPalette', 'my-custom-palette');
                _context.next = 7;
                return this.render(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 7:
                _context.next = 9;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));

              case 9:
                _context.next = 11;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .ember-power-select-trigger')[0], 13);

              case 11:
                _context.next = 13;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .ember-power-select-trigger')[0], 13);

              case 13:
                _context.next = 15;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .ember-power-select-trigger')[1], 13);

              case 15:
                _context.next = 17;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .ember-power-select-trigger')[1], 40);

              case 17:
                _context.next = 19;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .ember-power-select-trigger')[1], 13);

              case 19:
                selectedDropdownItems = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="myEmails"] .ember-power-select-selected-item');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(selectedDropdownItems[0]['innerText']), 'Work', 'First item contains \'Work\' rendered in the custom dropdown.');
                assert.equal(Ember.get(this, 'defaultFieldModel.myEmails.0.category'), 'Work', 'First item contains \'Work\' populated as \'category\' value.');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(selectedDropdownItems[1]['innerText']), 'Personal', 'Second item contains \'Personal\' rendered in the custom dropdown.');
                assert.equal(Ember.get(this, 'defaultFieldModel.myEmails.1.category'), 'Personal', 'Second item contains \'Personal\' populated as \'category\' value.');
                Ember.set(formConfig, 'groupFieldDefaultConfig.customPalette', undefined);
                this.owner.unregister('component:my-custom-palette');

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/group-field/field-view-toggle-button/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/group field | field-view-toggle-button | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        model: {
          myEmails: Ember.A([])
        },
        schema: {
          name: 'Some Form',
          fields: [{
            id: 'my_emails_id',
            parent: null,
            type: 'group_field',
            label: 'My Emails',
            name: 'my_emails',
            position: 1,
            editable: true,
            custom: false,
            inputType: 'group-field',
            placeholder: 'Email Address',
            fieldOptions: {
              group_type: 'email',
              max_items: 10,
              max_fields_to_be_shown: 3
            },
            fields: []
          }]
        },
        fieldMap: Ember.computed({
          get: function get() {
            return {
              section: {
                single: 'nested-section',
                dependent: 'nested-section'
              },
              dropdown: {
                single: 'power-select-field',
                dependent: 'dependent-selects/power-select-field'
              },
              dependent_dropdown: {
                single: 'dependent-dropdown',
                dependent: 'dependent-dropdown'
              },
              text: {
                single: 'text-field',
                dependent: 'text-field'
              },
              checkbox: {
                single: 'checkbox-field',
                dependent: 'dependent-selects/checkbox-field'
              },
              number: {
                single: 'number-field',
                dependent: 'number-field'
              },
              paragraph: {
                single: 'textarea-field',
                dependent: 'textarea-field'
              },
              radio: {
                single: 'radio-field',
                dependent: 'dependent-selects/radio-group'
              },
              date: {
                single: 'datetime-field',
                dependent: 'datetime-field'
              },
              date_time: {
                single: 'datetime-field',
                dependent: 'datetime-field'
              },
              auto_complete: {
                single: 'auto-complete',
                dependent: 'auto-complete'
              },
              email: {
                single: 'email-field',
                dependent: 'email-field'
              },
              phone_number: {
                single: 'text-field',
                dependent: 'text-field'
              },
              url: {
                single: 'url-field',
                dependent: 'url-field'
              },
              decimal: {
                single: 'number-field',
                dependent: 'number-field'
              },
              multi_select_dropdown: {
                single: 'multi-select-dropdown-field',
                dependent: 'multi-select-dropdown-field'
              },
              date_time_split: {
                single: 'date-time-split-field',
                dependent: 'date-time-split-field'
              },
              group_field: {
                single: 'group-field',
                dependent: 'group-field'
              }
            };
          }
        }).readOnly(),
        isViewButtonShown: function isViewButtonShown() {
          return !Ember.isNone((0, _emberNativeDomHelpers.find)('.view-toggle-btn'));
        },
        isViewButtonNotShown: function isViewButtonNotShown() {
          return !this.isViewButtonShown();
        },
        addItem: function addItem() {
          var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

          for (var times = 0; times < count; times++) {
            (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));
          }
        },
        removeItem: function removeItem(fields) {
          var removeBtns = (0, _emberNativeDomHelpers.findAll)('.remove-button-control');
          fields.forEach(function (index) {
            return (0, _emberNativeDomHelpers.click)(removeBtns[index]);
          });
        },
        toggleViewButton: function toggleViewButton() {
          (0, _emberNativeDomHelpers.click)('.view-toggle-btn input');
        },
        getViewButtonText: function getViewButtonText() {
          return (0, _emberNativeDomHelpers.find)('.view-toggle-btn input').value;
        },
        getFieldCountSetOnToggleButton: function getFieldCountSetOnToggleButton() {
          var text = this.getViewButtonText();
          return parseInt(text.substring(text.indexOf('(') + 1, text.indexOf(')')));
        },
        getNumberOfFieldsShown: function getNumberOfFieldsShown() {
          return (0, _emberNativeDomHelpers.findAll)('input[type=email]').length;
        },
        renderForm: function () {
          var _renderForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                      "id": "pjgPaD/c",
                      "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"            \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"]],\"hasEval\":false}",
                      "meta": {}
                    }));

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function renderForm() {
            return _renderForm.apply(this, arguments);
          }

          return renderForm;
        }()
      });
    });
    (0, _qunit.test)("#TEST1 check 'view less' button does not appears by default", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context2.next = 4;
                return this.renderForm();

              case 4:
                assert.equal(true, this.isViewButtonNotShown(), "'view less' button should not be shown by default");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 check 'view less' button appears when fieldCount > 'max_fields_to_be_shown' configured", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context3.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(2);
                assert.equal(true, this.isViewButtonNotShown(), "'view less' is not shown since fieldCount < max_fields_to_be_shown");
                this.addItem();
                assert.equal(true, this.isViewButtonShown(), "'view less' is shown since fieldCount > max_fields_to_be_shown");

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 check 'view less' button disappears when fieldCount is < 'max_fields_to_be_shown' configured", /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context4.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(5);
                assert.equal(true, this.isViewButtonShown(), "'view less' is shown since fieldCount > max_fields_to_be_shown");
                this.removeItem([1, 2, 3]);
                assert.equal(true, this.isViewButtonNotShown(), "'view less' is not shown since fieldCount < max_fields_to_be_shown");

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 check 'view less' toggles to 'view all' when clicked", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context5.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(3);
                assert.equal("View Less", this.getViewButtonText(), "'view less' changed to 'view all'");
                this.toggleViewButton();
                assert.equal("View All(4)", this.getViewButtonText(), "'view less' changed to 'view all'");

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 check 'view all' toggles to 'view less' when clicked", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context6.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(3);
                this.toggleViewButton();
                assert.equal("View All(4)", this.getViewButtonText(), "'view less' changed to 'view all'");
                this.toggleViewButton();
                assert.equal("View Less", this.getViewButtonText(), "'view all' changed to 'view less'");

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST6 check field count is properly displayed when fields are added and removed", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(4);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context7.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(5);
                this.toggleViewButton();
                assert.equal(6, this.getFieldCountSetOnToggleButton(), "fieldCount is set as 6");
                this.addItem(2);
                this.toggleViewButton();
                assert.equal(8, this.getFieldCountSetOnToggleButton(), "fieldCount is set as 8");
                this.removeItem([0, 1]);
                assert.equal(6, this.getFieldCountSetOnToggleButton(), "fieldCount is set as 6");
                this.toggleViewButton();
                this.removeItem([3, 4]);
                this.toggleViewButton();
                assert.equal(4, this.getFieldCountSetOnToggleButton(), "fieldCount is set as 4");

              case 16:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST7 check all fields are displayed when 'addMore' button is clicked", /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context8.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(6);
                assert.equal(7, this.getNumberOfFieldsShown(), "fieldCount is set as 7");
                this.addItem(1);
                assert.equal(8, this.getNumberOfFieldsShown(), "fieldCount gets updated as 8");

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST8 check all fields are displayed 'view all' is clicked", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context9.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(7);
                this.toggleViewButton();
                this.toggleViewButton();
                assert.equal(8, this.getNumberOfFieldsShown(), "only 8 fields are shown");

              case 8:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST9 check only 'max_fields_to_be_shown' are shown when 'view less' is clicked", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                _context10.next = 4;
                return this.renderForm();

              case 4:
                this.addItem(7);
                this.toggleViewButton();
                assert.equal(3, this.getNumberOfFieldsShown(), "only 3 fields are shown");

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/group-field/field-view-toggle-button/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/group field | field-view-toggle-button | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      Ember.setProperties(this, {
        model: {
          myEmails: Ember.A([])
        },
        schema: {
          name: 'Some Form',
          fields: [{
            id: 'my_emails_id',
            parent: null,
            type: 'group_field',
            label: 'My Emails',
            name: 'my_emails',
            position: 1,
            editable: true,
            custom: false,
            inputType: 'group-field',
            placeholder: 'Email Address',
            fieldOptions: {
              group_type: 'email',
              max_items: 10,
              max_fields_to_be_shown: 3
            },
            fields: []
          }]
        },
        fieldMap: Ember.computed({
          get: function get() {
            return {
              section: {
                single: 'nested-section',
                dependent: 'nested-section'
              },
              dropdown: {
                single: 'power-select-field',
                dependent: 'dependent-selects/power-select-field'
              },
              dependent_dropdown: {
                single: 'dependent-dropdown',
                dependent: 'dependent-dropdown'
              },
              text: {
                single: 'text-field',
                dependent: 'text-field'
              },
              checkbox: {
                single: 'checkbox-field',
                dependent: 'dependent-selects/checkbox-field'
              },
              number: {
                single: 'number-field',
                dependent: 'number-field'
              },
              paragraph: {
                single: 'textarea-field',
                dependent: 'textarea-field'
              },
              radio: {
                single: 'radio-field',
                dependent: 'dependent-selects/radio-group'
              },
              date: {
                single: 'datetime-field',
                dependent: 'datetime-field'
              },
              date_time: {
                single: 'datetime-field',
                dependent: 'datetime-field'
              },
              auto_complete: {
                single: 'auto-complete',
                dependent: 'auto-complete'
              },
              email: {
                single: 'email-field',
                dependent: 'email-field'
              },
              phone_number: {
                single: 'text-field',
                dependent: 'text-field'
              },
              url: {
                single: 'url-field',
                dependent: 'url-field'
              },
              decimal: {
                single: 'number-field',
                dependent: 'number-field'
              },
              multi_select_dropdown: {
                single: 'multi-select-dropdown-field',
                dependent: 'multi-select-dropdown-field'
              },
              date_time_split: {
                single: 'date-time-split-field',
                dependent: 'date-time-split-field'
              },
              group_field: {
                single: 'group-field',
                dependent: 'group-field'
              }
            };
          }
        }).readOnly(),
        isViewButtonShown: function isViewButtonShown() {
          return !Ember.isNone((0, _emberNativeDomHelpers.find)('.view-toggle-btn'));
        },
        isViewButtonNotShown: function isViewButtonNotShown() {
          return !this.isViewButtonShown();
        },
        getViewButtonText: function getViewButtonText() {
          return (0, _emberNativeDomHelpers.find)('.view-toggle-btn input').value;
        },
        getFieldCountSetOnToggleButton: function getFieldCountSetOnToggleButton() {
          var text = this.getViewButtonText();
          return parseInt(text.substring(text.indexOf('(') + 1, text.indexOf(')')));
        },
        renderForm: function () {
          var _renderForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                      "id": "pjgPaD/c",
                      "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"            \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"]],\"hasEval\":false}",
                      "meta": {}
                    }));

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function renderForm() {
            return _renderForm.apply(this, arguments);
          }

          return renderForm;
        }()
      });
    });
    (0, _qunit.test)("#TEST1 should not show 'view more' button when number of saved fields < 'max_fields_to_be_shown'", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var savedValues;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                savedValues = Ember.A([{
                  id: 1,
                  value: 'abc@example.com',
                  is_primary: true
                }, {
                  id: 2,
                  value: 'xyz@example.com',
                  is_primary: false
                }, {
                  id: 3,
                  value: 'pqr@example.com',
                  is_primary: false
                }]);
                Ember.set(this, 'model.myEmails', savedValues);
                _context2.next = 6;
                return this.renderForm();

              case 6:
                assert.equal(true, this.isViewButtonNotShown(), "'view less' button is not shown since fieldCount < 'max_fields_to_be_shown'");

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 should show 'view more' button when number of saved fields > 'max_fields_to_be_shown'", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var savedValues;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));
                savedValues = Ember.A([{
                  id: 1,
                  value: 'abc@example.com',
                  is_primary: true
                }, {
                  id: 2,
                  value: 'xyz@example.com',
                  is_primary: false
                }, {
                  id: 3,
                  value: 'pqr@example.com',
                  is_primary: false
                }, {
                  id: 4,
                  value: 'def@example.com',
                  is_primary: false
                }, {
                  id: 5,
                  value: 'ghi@example.com',
                  is_primary: false
                }]);
                Ember.set(this, 'model.myEmails', savedValues);
                _context3.next = 6;
                return this.renderForm();

              case 6:
                assert.equal(true, this.isViewButtonShown(), "'view less' button is shown since fieldCount > 'max_fields_to_be_shown'");
                assert.equal(5, this.getFieldCountSetOnToggleButton(), "'view all' button has count 5");

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/multi-select-dropdown-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/string-helper-methods", "ember-cli-fake-server"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, createField, _emberPowerSelect, _stringHelperMethods, _emberCliFakeServer) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/multi select dropdown field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {
      _emberCliFakeServer.default.start();

      Ember.setProperties(this, {
        defaultFieldModel: {
          fSkills: ''
        },
        customFieldModel: {
          customField: {
            fSkills: ''
          }
        },
        defaultFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'skills_field_id',
            parent: null,
            type: 'multi_select_dropdown',
            label: 'Skills',
            hint: "select_intermediate_level_of_proficiency",
            name: 'fSkills',
            position: 1,
            editable: true,
            custom: false,
            getChoices: [{
              id: 'ember_js_choice_id',
              name: 'EmberJS',
              position: 1
            }, {
              id: 'java_choice_id',
              name: 'Java',
              position: 2
            }, {
              id: 'ruby_on_rails_choice_id',
              name: 'Ruby on Rails',
              position: 3
            }],
            inputType: 'multi-select-dropdown-field',
            fields: [],
            optionValuePath: 'id',
            optionLabelPath: 'name'
          }]
        },
        customFieldSchema: {
          name: 'Some Form',
          fields: [{
            id: 'skills_field_id',
            parent: null,
            type: 'multi_select_dropdown',
            label: 'Skills',
            hint: "select_intermediate_level_of_proficiency",
            name: 'fSkills',
            position: 1,
            editable: true,
            custom: true,
            getChoices: [{
              id: 'ember_js_choice_id',
              value: 'EmberJS',
              position: 1
            }, {
              id: 'java_choice_id',
              value: 'Java',
              position: 2
            }, {
              id: 'ruby_on_rails_choice_id',
              value: 'Ruby on Rails',
              position: 3
            }],
            inputType: 'multi-select-dropdown-field',
            optionValuePath: 'value',
            optionLabelPath: 'value',
            fields: []
          }]
        }
      });
    });
    hooks.afterEach(function () {
      _emberCliFakeServer.default.stop();
    });
    (0, _qunit.test)('multi-select (as default field) : component renders properly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(3);
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')['length'], 1, 'A dropdown component renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) : component renders properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(3);
                _context2.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')['length'], 1, 'A dropdown component renders properly');
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as default field) : clicking the field expands to show dropdown content', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(6);
                _context3.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                _context3.next = 5;
                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');

              case 5:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');
                assert.equal(Ember.$('.ember-power-select-option')[0]['innerText'].trim(), 'EmberJS', 'Emberjs option is rendered');
                assert.equal(Ember.$('.ember-power-select-option')[1]['innerText'].trim(), 'Java', 'java option is rendered');
                assert.equal(Ember.$('.ember-power-select-option')[2]['innerText'].trim(), 'Ruby on Rails', 'ruby on rails option is rendered');
                _context3.next = 12;
                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');

              case 12:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select with link renders autocomplete without add option', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(3);
                createField.multiSelectDropdown(this, {
                  link: 'url/search'
                });
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok();
                });
                _context5.next = 5;
                return createField.renderForm(this);

              case 5:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Known Programming Langugages', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');
                _context5.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context5.next = 11;
                return (0, _emberPowerSelect.typeInSearch)('john');

              case 11:
                return _context5.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          assert.equal(Ember.$('.ember-power-select-option')[0]['innerText'].trim(), 'No results found', 'add option is not rendered');

                        case 1:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }))));

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as default field): checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(3);
                Ember.run(function () {
                  Ember.set(_this, 'defaultFieldSchema.fields.0.fieldOptions', {
                    minOptionsToEnableSearch: 4
                  });
                });
                _context6.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context6.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 0, 'search is disabled');

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x5) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as default field): checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(3);
                Ember.run(function () {
                  Ember.set(_this2, 'defaultFieldSchema.fields.0.fieldOptions', {
                    minOptionsToEnableSearch: 2
                  });
                });
                _context7.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context7.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x6) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as default field) :checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is modified in config file', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(3);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    minOptionsToEnableSearch: 2
                  });
                });
                _context8.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context8.next = 10;
                return (0, _emberPowerSelect.clickTrigger)();

              case 10:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                });

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x7) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as default field) :checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is modified in config file', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(3);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    minOptionsToEnableSearch: 4
                  });
                });
                _context9.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context9.next = 10;
                return (0, _emberPowerSelect.clickTrigger)();

              case 10:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 0, 'search is disabled');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                });

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x8) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select with link renders autocomplete with requested choices and data is saved as delimiter separated', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(8);
                createField.multiSelectDropdown(this, {
                  label: 'Contacts',
                  name: 'contact',
                  link: 'url/search'
                });
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  assert.equal(request.url, 'url/search?q=tim&qf=name', 'query field is populated');
                  request.ok([{
                    id: 'contact_1',
                    name: 'timmy',
                    position: 1
                  }, {
                    id: 'contact_2',
                    name: 'timothy',
                    position: 2
                  }, {
                    id: 'contact_3',
                    name: 'tim',
                    position: 3
                  }]);
                });
                _context12.next = 5;
                return createField.renderForm(this);

              case 5:
                _context12.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context12.next = 9;
                return (0, _emberPowerSelect.typeInSearch)('tim');

              case 9:
                return _context12.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                  return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, 'results are loaded');
                          _context11.next = 3;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                        case 3:
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×timothy', 'choices are selected properly');
                          assert.equal(Ember.get(_this3, 'model.contact'), 'contact_2', 'selected data is saved properly');
                          (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                            assert.equal(request.url, 'url/search?q=timmy&qf=name', 'query field is populated');
                            request.ok([{
                              id: 'contact_1',
                              name: 'timmy',
                              position: 1
                            }]);
                          });
                          _context11.next = 8;
                          return (0, _emberPowerSelect.typeInSearch)('timmy');

                        case 8:
                          return _context11.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                            return regeneratorRuntime.wrap(function _callee10$(_context10) {
                              while (1) {
                                switch (_context10.prev = _context10.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 1, 'results are loaded');
                                    _context10.next = 3;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                                  case 3:
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×timothy×timmy', 'choices are selected properly');
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.get(_this3, 'model.contact')), 'contact_2;contact_1', 'selected data is saved properly');

                                  case 5:
                                  case "end":
                                    return _context10.stop();
                                }
                              }
                            }, _callee10);
                          }))));

                        case 9:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))));

              case 10:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x9) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select renders already saved values along with link choices and data is saved as delimiter separated after edit', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(5);
                createField.multiSelectDropdown(this, {
                  label: 'Contacts',
                  name: 'contact',
                  link: 'url/search',
                  optionValuePath: 'name'
                }, {
                  contact: 'test_contact1;test_contact2'
                });
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  assert.equal(request.url, 'url/search?q=tim&qf=name', 'query field is populated');
                  request.ok([{
                    id: 'contact_1',
                    name: 'tim',
                    position: 1
                  }, {
                    id: 'contact_2',
                    name: 'timothy',
                    position: 2
                  }]);
                });
                _context15.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context15.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×test_contact1×test_contact2', 'already selected choices are rendered properly');
                          _context14.next = 3;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);

                        case 3:
                          _context14.next = 5;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 5:
                          _context14.next = 7;
                          return (0, _emberPowerSelect.typeInSearch)('tim');

                        case 7:
                          return _context14.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                            return regeneratorRuntime.wrap(function _callee13$(_context13) {
                              while (1) {
                                switch (_context13.prev = _context13.next) {
                                  case 0:
                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 2, 'results are loaded');
                                    _context13.next = 3;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);

                                  case 3:
                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×test_contact1×timothy', 'choices are selected properly');
                                    assert.equal(Ember.get(_this4, 'model.contact'), 'test_contact1;timothy', 'selected data is saved properly');

                                  case 5:
                                  case "end":
                                    return _context13.stop();
                                }
                              }
                            }, _callee13);
                          }))));

                        case 8:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))));

              case 6:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x10) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select field with link meta populated does not save empty values', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                assert.expect(2);
                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {
                  request.ok([{
                    id: 'contact_1',
                    name: null,
                    position: 1
                  }]);
                });
                createField.multiSelectDropdown(this, {
                  label: 'Contacts',
                  name: 'contact',
                  link: 'url/search',
                  optionValuePath: 'name'
                }, {
                  contact: ';   ;tim'
                }); // if already saved values are combination of empty , non-empty and no value strings

                _context17.next = 5;
                return createField.renderForm(this);

              case 5:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×tim', 'choices are selected properly');
                _context17.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                _context17.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('tim');

              case 10:
                return _context17.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                  return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                      switch (_context16.prev = _context16.next) {
                        case 0:
                          _context16.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);

                        case 2:
                          assert.equal(Ember.get(_this5, 'model.contact'), 'tim', 'selected data is saved properly');

                        case 3:
                        case "end":
                          return _context16.stop();
                      }
                    }
                  }, _callee16);
                }))));

              case 11:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x11) {
        return _ref17.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) : clicking the field expands to show dropdown content', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(6);
                _context18.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                _context18.next = 5;
                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');

              case 5:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');
                assert.equal(Ember.$('.ember-power-select-option')[0]['innerText'].trim(), 'EmberJS', 'Emberjs option is rendered');
                assert.equal(Ember.$('.ember-power-select-option')[1]['innerText'].trim(), 'Java', 'java option is rendered');
                assert.equal(Ember.$('.ember-power-select-option')[2]['innerText'].trim(), 'Ruby on Rails', 'ruby on rails option is rendered');
                _context18.next = 12;
                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');

              case 12:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');

              case 13:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      return function (_x12) {
        return _ref19.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                assert.expect(3);
                Ember.run(function () {
                  Ember.set(_this6, 'customFieldSchema.fields.0.fieldOptions', {
                    minOptionsToEnableSearch: 4
                  });
                });
                _context19.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context19.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-selsect-trigger-multiple-input')['length'], 0, 'search is disabled');

              case 9:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      return function (_x13) {
        return _ref20.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                assert.expect(3);
                Ember.run(function () {
                  Ember.set(_this7, 'customFieldSchema.fields.0.fieldOptions', {
                    minOptionsToEnableSearch: 2
                  });
                });
                _context20.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "3iU2AzQ6",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"          \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context20.next = 8;
                return (0, _emberPowerSelect.clickTrigger)();

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');

              case 9:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));

      return function (_x14) {
        return _ref21.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is modified in config file', /*#__PURE__*/function () {
      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                assert.expect(3);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    minOptionsToEnableSearch: 2
                  });
                });
                _context21.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context21.next = 10;
                return (0, _emberPowerSelect.clickTrigger)();

              case 10:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                });

              case 12:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      return function (_x15) {
        return _ref22.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is modified in config file', /*#__PURE__*/function () {
      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {
        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                assert.expect(3);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    minOptionsToEnableSearch: 4
                  });
                });
                _context22.next = 6;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');
                _context22.next = 10;
                return (0, _emberPowerSelect.clickTrigger)();

              case 10:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 0, 'search is disabled');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                });

              case 12:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      return function (_x16) {
        return _ref23.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (optionValuePath is not specified) : clicking the field expands to show dropdown content', /*#__PURE__*/function () {
      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {
        var _this8 = this;

        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                assert.expect(2);
                Ember.run(function () {
                  Ember.set(_this8, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);
                });
                _context23.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "qYGQjtl7",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionValuePath\",\"optionLabelPath\"],[\"\",\"\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                _context23.next = 6;
                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');

              case 6:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');
                _context23.next = 9;
                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');

              case 9:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');

              case 10:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }));

      return function (_x17) {
        return _ref24.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as default field) : all choices renders properly', /*#__PURE__*/function () {
      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {
        var _this9 = this;

        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                assert.expect(1);
                _context25.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                _context25.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                return _context25.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
                  return regeneratorRuntime.wrap(function _callee24$(_context24) {
                    while (1) {
                      switch (_context24.prev = _context24.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, Ember.get(_this9, 'defaultFieldSchema.fields.0.getChoices.length'), 'All choices are getting displayed');

                        case 1:
                        case "end":
                          return _context24.stop();
                      }
                    }
                  }, _callee24);
                }))));

              case 6:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }));

      return function (_x18) {
        return _ref25.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) : all choices renders properly', /*#__PURE__*/function () {
      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {
        var _this10 = this;

        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                assert.expect(1);
                _context27.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                _context27.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                return _context27.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
                  return regeneratorRuntime.wrap(function _callee26$(_context26) {
                    while (1) {
                      switch (_context26.prev = _context26.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, Ember.get(_this10, 'customFieldSchema.fields.0.getChoices.length'), 'All choices are getting displayed');

                        case 1:
                        case "end":
                          return _context26.stop();
                      }
                    }
                  }, _callee26);
                }))));

              case 6:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }));

      return function (_x19) {
        return _ref27.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (optionValuePath is not specified) : all choices renders properly', /*#__PURE__*/function () {
      var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {
        var _this11 = this;

        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                assert.expect(1);
                Ember.run(function () {
                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);
                });
                _context29.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "qYGQjtl7",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionValuePath\",\"optionLabelPath\"],[\"\",\"\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                _context29.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                return _context29.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
                  return regeneratorRuntime.wrap(function _callee28$(_context28) {
                    while (1) {
                      switch (_context28.prev = _context28.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, Ember.get(_this11, 'customFieldSchema.fields.0.getChoices.length'), 'All choices are getting displayed');

                        case 1:
                        case "end":
                          return _context28.stop();
                      }
                    }
                  }, _callee28);
                }))));

              case 7:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      }));

      return function (_x20) {
        return _ref29.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as default field) : choices contain proper content and can be selected and removed', /*#__PURE__*/function () {
      var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(assert) {
        var _this12 = this;

        return regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                assert.expect(10);
                _context33.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'defaultFieldModel.fSkills'), '', 'Initially the field is rendered empty');
                _context33.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                _context33.next = 8;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 8:
                return _context33.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee32$(_context32) {
                    while (1) {
                      switch (_context32.prev = _context32.next) {
                        case 0:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                          assert.equal(optionDomElement.length, 1, 'A choice is now selected');
                          assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \'EmberJS\' is now selected');
                          assert.equal(Ember.get(_this12, 'defaultFieldModel.fSkills'), 'ember_js_choice_id', 'Model contains \'EmberJS\' as field value');
                          _context32.next = 6;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 6:
                          _context32.next = 8;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

                        case 8:
                          return _context32.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
                            return regeneratorRuntime.wrap(function _callee31$(_context31) {
                              while (1) {
                                switch (_context31.prev = _context31.next) {
                                  case 0:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                                    assert.equal(optionDomElement.length, 2, 'Two choices are now selected');
                                    assert.equal(optionDomElement[1]['innerText'], '× Java', 'Choice \'Java\' is also selected now');
                                    assert.equal(Ember.get(_this12, 'defaultFieldModel.fSkills'), 'ember_js_choice_id;java_choice_id', 'Model contains \'EmberJS;Java\' as field value');
                                    _context31.next = 6;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                  case 6:
                                    return _context31.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
                                      return regeneratorRuntime.wrap(function _callee30$(_context30) {
                                        while (1) {
                                          switch (_context30.prev = _context30.next) {
                                            case 0:
                                              optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                                              assert.equal(optionDomElement.length, 1, 'A choice is removed now');
                                              assert.equal(optionDomElement[0]['innerText'], '× Java', 'Choice \'EmberJS\' is removed from selected list');
                                              assert.equal(Ember.get(_this12, 'defaultFieldModel.fSkills'), 'java_choice_id', 'Model contains \'Java\' as field value');

                                            case 4:
                                            case "end":
                                              return _context30.stop();
                                          }
                                        }
                                      }, _callee30);
                                    }))));

                                  case 7:
                                  case "end":
                                    return _context31.stop();
                                }
                              }
                            }, _callee31);
                          }))));

                        case 9:
                        case "end":
                          return _context32.stop();
                      }
                    }
                  }, _callee32);
                }))));

              case 9:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      return function (_x21) {
        return _ref31.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as custom field) : choices contain proper content and can be selected and removed', /*#__PURE__*/function () {
      var _ref35 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(assert) {
        var _this13 = this;

        return regeneratorRuntime.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                assert.expect(10);
                _context37.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(Ember.get(this, 'customFieldModel.customField.fSkills'), '', 'Initially the field is rendered empty');
                _context37.next = 6;
                return (0, _emberPowerSelect.clickTrigger)();

              case 6:
                _context37.next = 8;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 8:
                return _context37.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee36$(_context36) {
                    while (1) {
                      switch (_context36.prev = _context36.next) {
                        case 0:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fSkills"] .ember-power-select-multiple-option');
                          assert.equal(optionDomElement.length, 1, 'A choice is now selected');
                          assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \'EmberJS\' is now selected');
                          assert.equal(Ember.get(_this13, 'customFieldModel.customField.fSkills'), 'EmberJS', 'Model contains \'EmberJS\' as field value');
                          _context36.next = 6;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 6:
                          _context36.next = 8;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

                        case 8:
                          return _context36.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
                            return regeneratorRuntime.wrap(function _callee35$(_context35) {
                              while (1) {
                                switch (_context35.prev = _context35.next) {
                                  case 0:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fSkills"] .ember-power-select-multiple-option');
                                    assert.equal(optionDomElement.length, 2, 'Two choices are now selected');
                                    assert.equal(optionDomElement[1]['innerText'], '× Java', 'Choice \'Java\' is also selected now');
                                    assert.equal(Ember.get(_this13, 'customFieldModel.customField.fSkills'), 'EmberJS;Java', 'Model contains \'EmberJS;Java\' as field value');
                                    _context35.next = 6;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                  case 6:
                                    return _context35.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
                                      return regeneratorRuntime.wrap(function _callee34$(_context34) {
                                        while (1) {
                                          switch (_context34.prev = _context34.next) {
                                            case 0:
                                              optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fSkills"] .ember-power-select-multiple-option');
                                              assert.equal(optionDomElement.length, 1, 'A choice is removed now');
                                              assert.equal(optionDomElement[0]['innerText'], '× Java', 'Choice \'EmberJS\' is removed from selected list');
                                              assert.equal(Ember.get(_this13, 'customFieldModel.customField.fSkills'), 'Java', 'Model contains \'Java\' as field value');

                                            case 4:
                                            case "end":
                                              return _context34.stop();
                                          }
                                        }
                                      }, _callee34);
                                    }))));

                                  case 7:
                                  case "end":
                                    return _context35.stop();
                                }
                              }
                            }, _callee35);
                          }))));

                        case 9:
                        case "end":
                          return _context36.stop();
                      }
                    }
                  }, _callee36);
                }))));

              case 9:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      return function (_x22) {
        return _ref35.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (optionValuePath is not specified) : choices contain proper content and can be selected and removed', /*#__PURE__*/function () {
      var _ref39 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(assert) {
        var _this14 = this;

        return regeneratorRuntime.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                assert.expect(10);
                Ember.run(function () {
                  Ember.set(_this14, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);
                  Ember.set(_this14, 'defaultFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this14, 'defaultFieldSchema.fields.0.optionLabelPath', '');
                });
                _context41.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "AOmButnt",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n      \"],[1,[25,\"log\",[[20,[\"defaultFieldSchema\"]]],null],false],[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(Ember.get(this, 'defaultFieldModel.fSkills'), '', 'Initially the field is rendered empty');
                _context41.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context41.next = 9;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 9:
                return _context41.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee40$(_context40) {
                    while (1) {
                      switch (_context40.prev = _context40.next) {
                        case 0:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                          assert.equal(optionDomElement.length, 1, 'A choice is now selected');
                          assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \'EmberJS\' is now selected');
                          assert.equal(Ember.get(_this14, 'defaultFieldModel.fSkills'), 'EmberJS', 'Model contains \'EmberJS\' as field value');
                          _context40.next = 6;
                          return (0, _emberPowerSelect.clickTrigger)();

                        case 6:
                          _context40.next = 8;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

                        case 8:
                          return _context40.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39() {
                            return regeneratorRuntime.wrap(function _callee39$(_context39) {
                              while (1) {
                                switch (_context39.prev = _context39.next) {
                                  case 0:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                                    assert.equal(optionDomElement.length, 2, 'Two choices are now selected');
                                    assert.equal(optionDomElement[1]['innerText'], '× Java', 'Choice \'Java\' is also selected now');
                                    assert.equal(Ember.get(_this14, 'defaultFieldModel.fSkills'), 'EmberJS;Java', 'Model contains \'EmberJS;Java\' as field value');
                                    _context39.next = 6;
                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                                  case 6:
                                    return _context39.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
                                      return regeneratorRuntime.wrap(function _callee38$(_context38) {
                                        while (1) {
                                          switch (_context38.prev = _context38.next) {
                                            case 0:
                                              optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                                              assert.equal(optionDomElement.length, 1, 'A choice is removed now');
                                              assert.equal(optionDomElement[0]['innerText'], '× Java', 'Choice \'EmberJS\' is removed from selected list');
                                              assert.equal(Ember.get(_this14, 'defaultFieldModel.fSkills'), 'Java', 'Model contains \'Java\' as field value');

                                            case 4:
                                            case "end":
                                              return _context38.stop();
                                          }
                                        }
                                      }, _callee38);
                                    }))));

                                  case 7:
                                  case "end":
                                    return _context39.stop();
                                }
                              }
                            }, _callee39);
                          }))));

                        case 9:
                        case "end":
                          return _context40.stop();
                      }
                    }
                  }, _callee40);
                }))));

              case 10:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));

      return function (_x23) {
        return _ref39.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select : able to enable and disable the field based on \'editable\' property of schema', /*#__PURE__*/function () {
      var _ref43 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42(assert) {
        var _this15 = this;

        return regeneratorRuntime.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                assert.expect(2);
                _context42.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                Ember.run(function () {
                  Ember.set(_this15, 'defaultFieldSchema.fields.0.editable', false);
                });
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-disabled'].value, 'true', 'Field is disabled when \'editable\' is \'true\'');
                Ember.run(function () {
                  Ember.set(_this15, 'defaultFieldSchema.fields.0.editable', true);
                });
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled when \'editable\' is \'false\'');

              case 7:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42);
      }));

      return function (_x24) {
        return _ref43.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select : filtering based on search works', /*#__PURE__*/function () {
      var _ref44 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43(assert) {
        return regeneratorRuntime.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                assert.expect(3);
                _context43.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "Y4N/tsN5",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionLabelPath\"],[\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                _context43.next = 5;
                return (0, _emberPowerSelect.clickTrigger)();

              case 5:
                _context43.next = 7;
                return (0, _emberPowerSelect.typeInSearch)('J');

              case 7:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 2, 'Choice \'Ruby on Rails\' gets filtered out');
                _context43.next = 10;
                return (0, _emberPowerSelect.typeInSearch)('Jav');

              case 10:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 1, 'Choice \'EmberJS\' also gets filtered out');
                _context43.next = 13;
                return (0, _emberPowerSelect.typeInSearch)('abc');

              case 13:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]['innerText'], 'No results found', 'All choices are filtered out');

              case 14:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43);
      }));

      return function (_x25) {
        return _ref44.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as a default field) : it allows rendering of already selected options', /*#__PURE__*/function () {
      var _ref45 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46(assert) {
        var _this16 = this;

        return regeneratorRuntime.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                assert.expect(9);
                Ember.run(function () {
                  Ember.set(_this16, 'defaultFieldSchema.fields.0.optionValuePath', 'name');
                  Ember.set(_this16, 'defaultFieldSchema.fields.0.optionLabelPath', 'name');
                  Ember.set(_this16, 'defaultFieldModel.fSkills', 'Ruby on Rails;EmberJS');
                });
                _context46.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 2, 'Both the choices gets rendered inside the field properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[0]['innerText'], '× Ruby on Rails', 'Choice \'Ruby on Rails\' is rendered properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[1]['innerText'], '× EmberJS', 'Choice \'EmberJS\' is rendered properly');
                _context46.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context46.next = 11;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);

              case 11:
                _context46.next = 13;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 13:
                return _context46.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee45$(_context45) {
                    while (1) {
                      switch (_context45.prev = _context45.next) {
                        case 0:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                          assert.equal(optionDomElement.length, 3, 'All three choice are now selected');
                          assert.equal(optionDomElement[2]['innerText'], '× Java', 'Choice \'Java\' is also selected now');
                          assert.equal(Ember.get(_this16, 'defaultFieldModel.fSkills'), 'Ruby on Rails;EmberJS;Java', 'Model contains \'EmberJS\' as field value');
                          _context45.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 6:
                          return _context45.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44() {
                            return regeneratorRuntime.wrap(function _callee44$(_context44) {
                              while (1) {
                                switch (_context44.prev = _context44.next) {
                                  case 0:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                                    assert.equal(optionDomElement.length, 2, 'A choice is removed now');
                                    assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \'Ruby on Rails\' is removed from selected list');
                                    assert.equal(Ember.get(_this16, 'defaultFieldModel.fSkills'), 'EmberJS;Java', 'Model contains \'EmberJS;Java\' as field value');

                                  case 4:
                                  case "end":
                                    return _context44.stop();
                                }
                              }
                            }, _callee44);
                          }))));

                        case 7:
                        case "end":
                          return _context45.stop();
                      }
                    }
                  }, _callee45);
                }))));

              case 14:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46);
      }));

      return function (_x26) {
        return _ref45.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (as a custom field) : its allows rendering of already selected options', /*#__PURE__*/function () {
      var _ref48 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49(assert) {
        var _this17 = this;

        return regeneratorRuntime.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                assert.expect(9);
                Ember.run(function () {
                  Ember.set(_this17, 'customFieldModel.customField.fSkills', 'Ruby on Rails;EmberJS');
                });
                _context49.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "59Pal/FU",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"customFieldModel\"]],[20,[\"customFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionValuePath\",\"optionLabelPath\"],[\"value\",\"value\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 2, 'Both the choices gets rendered inside the field properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[0]['innerText'], '× Ruby on Rails', 'Choice \'Ruby on Rails\' is rendered properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[1]['innerText'], '× EmberJS', 'Choice \'EmberJS\' is rendered properly');
                _context49.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context49.next = 11;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);

              case 11:
                _context49.next = 13;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 13:
                return _context49.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee48$(_context48) {
                    while (1) {
                      switch (_context48.prev = _context48.next) {
                        case 0:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fSkills"] .ember-power-select-multiple-option');
                          assert.equal(optionDomElement.length, 3, 'All three choice are now selected');
                          assert.equal(optionDomElement[2]['innerText'], '× Java', 'Choice \'Java\' is also selected now');
                          assert.equal(Ember.get(_this17, 'customFieldModel.customField.fSkills'), 'Ruby on Rails;EmberJS;Java', 'Model contains \'EmberJS\' as field value');
                          _context48.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 6:
                          return _context48.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
                            return regeneratorRuntime.wrap(function _callee47$(_context47) {
                              while (1) {
                                switch (_context47.prev = _context47.next) {
                                  case 0:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="customField.fSkills"] .ember-power-select-multiple-option');
                                    assert.equal(optionDomElement.length, 2, 'A choice is removed now');
                                    assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \'Ruby on Rails\' is removed from selected list');
                                    assert.equal(Ember.get(_this17, 'customFieldModel.customField.fSkills'), 'EmberJS;Java', 'Model contains \'EmberJS;Java\' as field value');

                                  case 4:
                                  case "end":
                                    return _context47.stop();
                                }
                              }
                            }, _callee47);
                          }))));

                        case 7:
                        case "end":
                          return _context48.stop();
                      }
                    }
                  }, _callee48);
                }))));

              case 14:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49);
      }));

      return function (_x27) {
        return _ref48.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (optionValuePath is not specified) : its allows rendering of already selected options', /*#__PURE__*/function () {
      var _ref51 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52(assert) {
        var _this18 = this;

        return regeneratorRuntime.wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                assert.expect(9);
                Ember.run(function () {
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this18, 'defaultFieldSchema.fields.0.optionLabelPath', '');
                  Ember.set(_this18, 'defaultFieldModel.fSkills', 'Ruby on Rails;EmberJS');
                });
                _context52.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "qYGQjtl7",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionValuePath\",\"optionLabelPath\"],[\"\",\"\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 2, 'Both the choices gets rendered inside the field properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[0]['innerText'], '× Ruby on Rails', 'Choice \'Ruby on Rails\' is rendered properly');
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[1]['innerText'], '× EmberJS', 'Choice \'EmberJS\' is rendered properly');
                _context52.next = 9;
                return (0, _emberPowerSelect.clickTrigger)();

              case 9:
                _context52.next = 11;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);

              case 11:
                _context52.next = 13;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);

              case 13:
                return _context52.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51() {
                  var optionDomElement;
                  return regeneratorRuntime.wrap(function _callee51$(_context51) {
                    while (1) {
                      switch (_context51.prev = _context51.next) {
                        case 0:
                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                          assert.equal(optionDomElement.length, 3, 'All three choice are now selected');
                          assert.equal(optionDomElement[2]['innerText'], '× Java', 'Choice \'Java\' is also selected now');
                          assert.equal(Ember.get(_this18, 'defaultFieldModel.fSkills'), 'Ruby on Rails;EmberJS;Java', 'Model contains \'EmberJS\' as field value');
                          _context51.next = 6;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);

                        case 6:
                          return _context51.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50() {
                            return regeneratorRuntime.wrap(function _callee50$(_context50) {
                              while (1) {
                                switch (_context50.prev = _context50.next) {
                                  case 0:
                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name="fSkills"] .ember-power-select-multiple-option');
                                    assert.equal(optionDomElement.length, 2, 'A choice is removed now');
                                    assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \'Ruby on Rails\' is removed from selected list');
                                    assert.equal(Ember.get(_this18, 'defaultFieldModel.fSkills'), 'EmberJS;Java', 'Model contains \'EmberJS;Java\' as field value');

                                  case 4:
                                  case "end":
                                    return _context50.stop();
                                }
                              }
                            }, _callee50);
                          }))));

                        case 7:
                        case "end":
                          return _context51.stop();
                      }
                    }
                  }, _callee51);
                }))));

              case 14:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52);
      }));

      return function (_x28) {
        return _ref51.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('The placeholder is only visible when no options are selected', /*#__PURE__*/function () {
      var _ref54 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54(assert) {
        var _this19 = this;

        return regeneratorRuntime.wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                assert.expect(2);
                Ember.run(function () {
                  Ember.set(_this19, 'defaultFieldSchema.fields.0.placeholder', 'Select your skills...');
                });
                _context54.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "FVyp1cOy",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[25,\"component\",[[19,1,[\"drawForm\"]]],[[\"optionValuePath\",\"optionLabelPath\"],[\"name\",\"name\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger-multiple-input')['placeholder'], 'Select your skills...', 'There is a placeholder');
                _context54.next = 7;
                return (0, _emberPowerSelect.clickTrigger)();

              case 7:
                _context54.next = 9;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger-multiple-input'), 13);

              case 9:
                return _context54.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53() {
                  return regeneratorRuntime.wrap(function _callee53$(_context53) {
                    while (1) {
                      switch (_context53.prev = _context53.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger-multiple-input')['placeholder'], '', 'The placeholder is gone');

                        case 1:
                        case "end":
                          return _context53.stop();
                      }
                    }
                  }, _callee53);
                }))));

              case 10:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54);
      }));

      return function (_x29) {
        return _ref54.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (optionValuePath is present): if an option not present in dropdown options is set as selected, nothing is rendered in power-select', /*#__PURE__*/function () {
      var _ref56 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55(assert) {
        var _this20 = this;

        return regeneratorRuntime.wrap(function _callee55$(_context55) {
          while (1) {
            switch (_context55.prev = _context55.next) {
              case 0:
                assert.expect(1);
                Ember.run(function () {
                  Ember.set(_this20, 'defaultFieldModel.fSkills', 'Python');
                  Ember.set(_this20, 'defaultFieldSchema.fields.0.optionValuePath', 'name');
                  Ember.set(_this20, 'defaultFieldSchema.fields.0.optionLabelPath', 'name');
                });
                _context55.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 0, 'No choices gets rendered inside the field');

              case 5:
              case "end":
                return _context55.stop();
            }
          }
        }, _callee55);
      }));

      return function (_x30) {
        return _ref56.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('multi-select (optionValuePath is not specified): if an option not present in dropdown options is set as selected, nothing is rendered in power-select', /*#__PURE__*/function () {
      var _ref57 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56(assert) {
        var _this21 = this;

        return regeneratorRuntime.wrap(function _callee56$(_context56) {
          while (1) {
            switch (_context56.prev = _context56.next) {
              case 0:
                assert.expect(1);
                Ember.run(function () {
                  Ember.set(_this21, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);
                  Ember.set(_this21, 'defaultFieldSchema.fields.0.optionValuePath', '');
                  Ember.set(_this21, 'defaultFieldSchema.fields.0.optionLabelPath', '');
                  Ember.set(_this21, 'defaultFieldModel.fSkills', 'Python');
                });
                _context56.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "ZUT4xtiT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"defaultFieldModel\"]],[20,[\"defaultFieldSchema\"]]]],{\"statements\":[[0,\"        \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 0, 'No choices gets rendered inside the field');

              case 5:
              case "end":
                return _context56.stop();
            }
          }
        }, _callee56);
      }));

      return function (_x31) {
        return _ref57.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the multi_select_dropdown component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref58 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "Hello";
                createField.multiSelectDropdown(this, {
                  label: sampleLabel
                });
                _context57.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));

      return function (_x32) {
        return _ref58.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/number-field/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/string-helper-methods", "@ember/test-helpers", "ember-test-helpers/wait"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods, _testHelpers, _wait) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/number field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 Component will not render when propertyName and object are not passed', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Ember.set(this, 'object', {});
                Ember.set(this, 'propertyName', ' ');
                _context.next = 4;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "3fh9TxlU",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"form-fields/number-field\",null,[[\"propertyName\",\"object\"],[[20,[\"propertyName\"]],[20,[\"object\"]]]]],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 4:
                assert.equal(this.$().text().trim(), '');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 Check the number component renders hint as default field', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.number(this);
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_annual_income', 'Hint for the field renders properly');

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 Check the number component renders hint as custom field', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                createField.number(this, {
                  custom: true
                });
                this.model = {
                  customField: {}
                };
                _context3.next = 5;
                return createField.renderForm(this);

              case 5:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_annual_income', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST4 Create and edit Number field without number value formatting', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var _this = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(7);
                createField.number(this, {
                  custom: true
                });
                this.model = {
                  customField: {}
                };
                _context4.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['placeholder'], "income in '\u20B9'", "Check if placeholder gets rendered");
                _context4.next = 9;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229);

              case 9:
                return _context4.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['value'], "45229", "Check if value gets rendered");
                  assert.equal(_this.model.customField.income, 45229, "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229.456789);
                  return (0, _wait.default)().then(function () {
                    assert.equal(inputs[0]['value'], "45229.456789", "Check if value gets rendered");
                    assert.equal(_this.model.customField.income, 45229.456789, "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[0], null);
                    return (0, _wait.default)().then(function () {
                      assert.equal(inputs[0]['value'], '', "Check if value gets rendered");
                      assert.equal(_this.model.customField.income, '', "Check value is updated on the model");
                    });
                  });
                }));

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST5 Get existing number from model when given', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                createField.number(this, {
                  custom: true
                });
                this.model = {
                  customField: {
                    income: 45229
                  }
                };
                _context5.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], "45229", "Check if value gets rendered");

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST6 Create and edit number field when formatting is enabled', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this2 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(7);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'en-US'
                  }
                });
                this.model = {
                  customField: {}
                };
                _context6.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['placeholder'], "income in '\u20B9'", "Check if placeholder gets rendered");
                _context6.next = 9;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229);

              case 9:
                return _context6.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['value'], "45,229", "Check if value gets rendered");
                  assert.equal(_this2.model.customField.income, 45229, "Check value is updated on the model");
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229.456789);
                  return (0, _wait.default)().then(function () {
                    assert.equal(inputs[0]['value'], "45,229.456789", "Check if value gets rendered");
                    assert.equal(_this2.model.customField.income, 45229.456789, "Check value is updated on the model");
                    (0, _emberNativeDomHelpers.fillIn)(inputs[0], '');
                    return (0, _wait.default)().then(function () {
                      assert.equal(inputs[0]['value'], '', "Check if value gets rendered");
                      assert.equal(_this2.model.customField.income, null, "Check value is updated on the model");
                    });
                  });
                }));

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST7 When formatting is enabled, data is formatted properly in edit scenario', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(1);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'hi-IN'
                  }
                });
                this.model = {
                  customField: {
                    income: 452290
                  }
                };
                _context7.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], "4,52,290", "Check if value gets rendered");

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST8 When locale is incorrect no formatting should be done', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this3 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'en_EUR'
                  }
                });
                this.model = {
                  customField: {}
                };
                _context8.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                _context8.next = 8;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229);

              case 8:
                return _context8.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['value'], "45229", "Check if value gets rendered");
                  assert.equal(_this3.model.customField.income, 45229, "Check value is updated on the model");
                }));

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST9 Check if null value is stored in model when no value is provided on number formatting', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        var inputs;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(2);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'en-US'
                  }
                });
                this.model = {
                  customField: {}
                };
                _context9.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], '', "Check if null value gets rendered");
                assert.equal(this.model.customField.income, undefined, "Check if null value gets updated in the model");

              case 8:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST10 Should not allow users to enter non-numeric characters', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this4 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(4);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'en-US'
                  }
                });
                this.model = {
                  customField: {}
                };
                _context10.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');
                assert.equal(this.model.customField.income, undefined, 'Check if existing value is in the model');
                _context10.next = 10;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 'abcd');

              case 10:
                return _context10.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');
                  assert.equal(_this4.model.customField.income, undefined, 'Check value is updated on the model');
                }));

              case 11:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST11 The entered value can have decimal character at the end', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var _this5 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(6);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'en-US'
                  }
                });
                this.model = {
                  customField: {}
                };
                _context11.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');
                assert.equal(this.model.customField.income, undefined, 'Check if existing value is in the model');
                _context11.next = 10;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '12345.');

              case 10:
                return _context11.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['value'], '12,345.', 'Check if value gets rendered');
                  assert.equal(_this5.model.customField.income, 12345, 'Check value is updated on the model');
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], '12345..');
                  return (0, _wait.default)().then(function () {
                    assert.equal(inputs[0]['value'], '12,345.', 'Check if value gets rendered');
                    assert.equal(_this5.model.customField.income, 12345, 'Check value is updated on the model');
                  });
                }));

              case 11:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST12 Trailing zeros entered by the user in the decimal part must be preserved', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        var _this6 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(4);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'en-US'
                  }
                });
                this.model = {
                  customField: {}
                };
                _context12.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');
                assert.equal(this.model.customField.income, undefined, 'Check if existing value is in the model');
                _context12.next = 10;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '12345678.9000');

              case 10:
                return _context12.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['value'], '12,345,678.9000', 'Check if value gets rendered');
                  assert.equal(_this6.model.customField.income, 12345678.9, 'Check value is updated on the model');
                }));

              case 11:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref13.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST13 Should work properly when thousands separator is "." and decimal separator is ","', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        var _this7 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                // Test written for es locale (Spain)
                assert.expect(5);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'es'
                  }
                });
                this.model = {
                  customField: {
                    income: 452290456.789012
                  }
                };
                _context13.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], '452.290.456,789012', 'Check if value gets rendered');
                _context13.next = 9;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '452.290.456.789.012,');

              case 9:
                return _context13.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['value'], '452.290.456.789.012,', 'Check if value gets rendered');
                  assert.equal(_this7.model.customField.income, 452290456789012, 'Check value is updated on the model');
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], '452.290.456.789.012,,');
                  return (0, _wait.default)().then(function () {
                    assert.equal(inputs[0]['value'], '452.290.456.789.012,', 'Check if value gets rendered');
                    assert.equal(_this7.model.customField.income, 452290456789012, 'Check value is updated on the model');
                  });
                }));

              case 10:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST14 Non-numeric data should not get rendered in edit scenario', /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
        var _this8 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                assert.expect(6);
                createField.number(this, {
                  custom: true,
                  fieldOptions: {
                    locale: 'en-US'
                  }
                });
                this.model = {
                  customField: {
                    income: '4522w'
                  }
                };
                _context14.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                assert.equal(inputs[0]['value'], 'NaN', 'Check if value gets rendered');
                assert.equal(this.model.customField.income, '4522w', 'Check if existing value is in the model');
                _context14.next = 10;
                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '45229w');

              case 10:
                return _context14.abrupt("return", (0, _wait.default)().then(function () {
                  // Till wrong format is removed, restore previous model value
                  assert.equal(inputs[0]['value'], 'NaN', 'Check if value gets rendered');
                  assert.equal(_this8.model.customField.income, '4522w', 'Check value is updated on the model');
                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229.456789);
                  return (0, _wait.default)().then(function () {
                    assert.equal(inputs[0]['value'], '45,229.456789', 'Check if value gets rendered');
                    assert.equal(_this8.model.customField.income, 45229.456789, 'Check value is updated on the model');
                  });
                }));

              case 11:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      return function (_x14) {
        return _ref15.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST15 Passing editable as false must disable the field, when number formatting is not enabled', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var _this9 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(3);
                createField.number(this, {
                  custom: true,
                  editable: false
                });
                this.model = {
                  customField: {
                    income: 45229.456789
                  }
                };
                _context15.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context15.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['disabled'], true, 'Check if field is disabled');
                  assert.equal(inputs[0]['value'], '45229.456789', 'Check if value gets rendered');
                  assert.equal(_this9.model.customField.income, 45229.456789, 'Check value is updated on the model');
                }));

              case 7:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x15) {
        return _ref16.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST16 Passing editable as false must disable the field, when number formatting is enabled', /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
        var _this10 = this;

        var inputs;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                assert.expect(3);
                createField.number(this, {
                  custom: true,
                  editable: false,
                  fieldOptions: {
                    locale: 'en-US'
                  }
                });
                this.model = {
                  customField: {
                    income: 45229.456789
                  }
                };
                _context16.next = 5;
                return createField.renderForm(this);

              case 5:
                inputs = (0, _emberNativeDomHelpers.findAll)('input');
                return _context16.abrupt("return", (0, _wait.default)().then(function () {
                  assert.equal(inputs[0]['disabled'], true, 'Check if field is disabled');
                  assert.equal(inputs[0]['value'], '45,229.456789', 'Check if value gets rendered');
                  assert.equal(_this10.model.customField.income, 45229.456789, 'Check value is updated on the model');
                }));

              case 7:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      return function (_x16) {
        return _ref17.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the number component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "হ্যালো";
                createField.number(this, {
                  label: sampleLabel
                });
                _context17.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x17) {
        return _ref18.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check if the number component follows accessibility features related to required attribute', /*#__PURE__*/function () {
      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var inputElement;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(2);
                createField.number(this, {
                  required: true
                });
                _context18.next = 4;
                return createField.renderForm(this);

              case 4:
                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];
                assert.equal(true, inputElement["required"]);
                assert.equal(null, inputElement["ariaRequired"]);

              case 7:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x18) {
        return _ref19.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/power-select-field/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/ember-power-select", "dummy/tests/helpers/string-helper-methods", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, createField, _emberPowerSelect, _stringHelperMethods, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/power select field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('#TEST1 (default-field): Check if the field renders and value is updated in the model', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(6);
                createField.dropdown(this, {
                  hint: 'current_residance'
                });
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), "Check if the component is rendered");
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residance', 'Hint for the field renders properly');
                _context.next = 8;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

              case 8:
                assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[0].outerText, "Kerala", "Check options are listed correctly");
                assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[1].outerText, "Tamil Nadu", "Check options are listed correctly");
                assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[2].outerText, "Karnataka", "Check options are listed correctly");
                /* Select second choices */

                _context.next = 13;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 40);

              case 13:
                _context.next = 15;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

              case 15:
                assert.equal(Ember.get(this, 'model.states'), "tamil_nadu_id", "Check if selected optionValuePath is updated in the model");

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 (custom-field): Check if the field renders and value is updated in the model', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this = this;

        var model;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(7);
                createField.dropdown(this, {
                  custom: true,
                  hint: 'current_residance'
                });
                model = {
                  customField: {}
                };
                Ember.set(this, 'model', model);
                _context3.next = 6;
                return createField.renderForm(this);

              case 6:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          assert.ok((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), "Check if the component is rendered");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residance', 'Hint for the field renders properly');
                          _context2.next = 4;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 4:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[0].outerText, "Kerala", "Check options are listed correctly");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[1].outerText, "Tamil Nadu", "Check options are listed correctly");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[2].outerText, "Karnataka", "Check options are listed correctly");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residance', 'Hint for the field renders properly');
                          /* Select second choices */

                          _context2.next = 10;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 40);

                        case 10:
                          _context2.next = 12;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 12:
                          assert.equal(Ember.get(_this, 'model.customField.states'), "tamil_nadu_id", "Check if selected optionValuePath is updated in the model");

                        case 13:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }))));

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 (edit-scenario && default-field): Check if the field renders with value', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                createField.dropdown(this);
                Ember.set(this, 'model.states', 'tamil_nadu_id');
                _context5.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context5.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), "Tamil Nadu");

                        case 1:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }))));

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST4 (edit-scenario && custom-field): Check if the field renders with value', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var model;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(1);
                createField.dropdown(this, {
                  custom: true
                });
                model = {
                  customField: {
                    'states': 'tamil_nadu_id'
                  }
                };
                Ember.set(this, 'model', model);
                _context7.next = 6;
                return createField.renderForm(this);

              case 6:
                return _context7.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), "Tamil Nadu");

                        case 1:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }))));

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x4) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST5 : allowClear Meta is enabled should be able to clear selected option', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(2);
                createField.dropdown(this, {
                  fieldOptions: {
                    allowClear: true
                  }
                });
                _context9.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context9.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 2:
                          _context8.next = 4;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 4:
                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), "Kerala", "Check selected value appears in DOM");
                          _context8.next = 7;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-clear-btn'));

                        case 7:
                          assert.notOk((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item'), "Check the previous value is removed from DOM");

                        case 8:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }))));

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x5) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST6 : checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(2);
                createField.dropdown(this, {
                  fieldOptions: {
                    minOptionsToEnableSearch: 2
                  }
                });
                _context11.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context11.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                  return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          _context10.next = 2;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');
                          _context10.next = 5;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 5:
                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), "Kerala", "Check selected value appears in DOM");

                        case 6:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }))));

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x6) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST7 : checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(2);
                createField.dropdown(this, {
                  fieldOptions: {
                    minOptionsToEnableSearch: 4
                  }
                });
                _context13.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context13.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          _context12.next = 2;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 0, 'search is disabled');
                          _context12.next = 5;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 5:
                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), "Kerala", "Check selected value appears in DOM");

                        case 6:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12);
                }))));

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x7) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST8 : checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                assert.expect(2);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    minOptionsToEnableSearch: 4
                  });
                });
                createField.dropdown(this, {});
                _context15.next = 7;
                return createField.renderForm(this);

              case 7:
                return _context15.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                  return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          _context14.next = 2;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 0, 'search is disabled');
                          _context14.next = 5;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 5:
                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), "Kerala", "Check selected value appears in DOM");
                          Ember.run(function () {
                            formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                          });

                        case 7:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))));

              case 8:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      return function (_x8) {
        return _ref14.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST9 : checking whether search is enabled/diabled when \'minOptionsToEnableSearch\' is passed through fieldOptions', /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {
        var formConfig, dependentSelectConfig;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                assert.expect(2);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');
                Ember.run(function () {
                  formConfig.set('dependentSelectDefaultConfig', {
                    minOptionsToEnableSearch: 2
                  });
                });
                createField.dropdown(this, {});
                _context17.next = 7;
                return createField.renderForm(this);

              case 7:
                return _context17.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                  return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                      switch (_context16.prev = _context16.next) {
                        case 0:
                          _context16.next = 2;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 2:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');
                          _context16.next = 5;
                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="States"] .ember-power-select-trigger'), 13);

                        case 5:
                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), "Kerala", "Check selected value appears in DOM");
                          Ember.run(function () {
                            formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);
                          });

                        case 7:
                        case "end":
                          return _context16.stop();
                      }
                    }
                  }, _callee16);
                }))));

              case 8:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      return function (_x9) {
        return _ref16.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the dropdown component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "Բարեւ Ձեզ";
                createField.dropdown(this, {
                  label: sampleLabel
                });
                _context18.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      return function (_x10) {
        return _ref18.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/radio-field/component-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Integration | Component | form fields/radio field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
  });
});
define("dummy/tests/integration/components/form-fields/radio-group/component-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Integration | Component | form fields/radio group', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
  });
});
define("dummy/tests/integration/components/form-fields/radio-group/custom/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/radio group | custom | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("#TEST1 Check the component renders as custom field, optionLabelPath='value'", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(5);
                createField.radioGroup(this, {
                  custom: true
                });
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  var options;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          options = (0, _emberNativeDomHelpers.findAll)("label");
                          assert.equal(options.length, 4, "Check 3 options are displayed");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), "Red", "First Option is 'Red'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), "Green", "Second Option is 'Green'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), "Blue", "Third Option is 'Blue'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?most_favourite_color', 'Hint for the field renders properly');

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 Check the component renders as custom field, optionLabelPath='hexValue'", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(4);
                createField.radioGroup(this, {
                  custom: true,
                  optionLabelPath: 'hexValue'
                });
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  var options;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          options = (0, _emberNativeDomHelpers.findAll)("label");
                          assert.equal(options.length, 4, "Check 3 options are displayed");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), "#FF0000", "First Option is 'Red'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), "#00FF00", "Second Option is 'Green'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), "#0000FF", "Third Option is 'Blue'");

                        case 5:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 Check options are updated on model, optionValuePath='value'", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(2);
                createField.radioGroup(this, {
                  custom: true
                });
                this.model = {
                  customField: {}
                };
                _context6.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[2]);

                        case 2:
                          assert.equal(_this.model.customField.colors, "Blue", "'Blue' option is selected");
                          _context5.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[0]);

                        case 5:
                          assert.equal(_this.model.customField.colors, "Red", "'Red' option is selected");

                        case 6:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 Check options are updated on model, optionValuePath='hexValue'", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                createField.radioGroup(this, {
                  custom: true,
                  optionValuePath: 'hexValue'
                });
                this.model = {
                  customField: {}
                };
                _context8.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context8.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[1]);

                        case 2:
                          assert.equal(_this2.model.customField.colors, "#00FF00", "'Green' option is selected");
                          _context7.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[2]);

                        case 5:
                          assert.equal(_this2.model.customField.colors, "#0000FF", "'Blue' option is selected");

                        case 6:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 6:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 Check options are updated on model, optionValuePath=''", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                createField.radioGroup(this, {
                  custom: true,
                  optionValuePath: ''
                });
                this.model = {
                  customField: {}
                };
                _context10.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[1]);

                        case 2:
                          assert.deepEqual(_this3.model.customField.colors, {
                            id: "green_id",
                            value: "Green",
                            hexValue: "#00FF00",
                            position: 2,
                            parentChoiceIds: null
                          }, "'Green' option is selected");
                          _context9.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[0]);

                        case 5:
                          assert.deepEqual(_this3.model.customField.colors, {
                            id: "red_id",
                            value: "Red",
                            hexValue: "#FF0000",
                            position: 1,
                            parentChoiceIds: null
                          }, "'Red' option is selected");

                        case 6:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 6:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/radio-group/custom/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/radio group | custom | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("#TEST1 Check the component renders as custom field with prepopulated data, optionValuePath='value'", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(3);
                createField.radioGroup(this, {
                  custom: true,
                  optionValuePath: 'value'
                });
                this.model = {
                  customField: {
                    colors: "Red"
                  }
                };
                _context2.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[0]['attributes']['paramvalue'].value, "Red", "Check Option 'Red' is selected");
                          assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[1]['attributes']['paramvalue'].value, "Red", "Check Option 'Red' is selected");
                          assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[2]['attributes']['paramvalue'].value, "Red", "Check Option 'Red' is selected");

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 Check the component renders as custom field with prepopulated data, optionValuePath='id'", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(3);
                createField.radioGroup(this, {
                  custom: true,
                  optionValuePath: 'id'
                });
                this.model = {
                  customField: {
                    colors: "blue_id"
                  }
                };
                _context4.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[0]['attributes']['paramvalue'].value, "blue_id", "Check Option 'Blue' is selected");
                          assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[1]['attributes']['paramvalue'].value, "blue_id", "Check Option 'Blue' is selected");
                          assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[2]['attributes']['paramvalue'].value, "blue_id", "Check Option 'Blue' is selected");

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 Check the component renders as custom field with prepopulated data, optionValuePath=''", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);
                createField.radioGroup(this, {
                  custom: true,
                  optionValuePath: ''
                });
                this.model = {
                  colors: {
                    id: "green_id",
                    value: "Green",
                    hexValue: "#00FF00",
                    position: 2,
                    parentChoiceIds: null
                  }
                };
                _context6.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.ok(true, "To be fixed, Refer [FSERV-259]");

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/radio-group/default/create/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/radio group | default | create', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("#TEST1 Check the component renders as default field, optionLabelPath='value'", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(5);
                createField.radioGroup(this);
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  var options;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          options = (0, _emberNativeDomHelpers.findAll)("label");
                          assert.equal(options.length, 4, "Check 3 options are displayed");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), "Red", "First Option is 'Red'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), "Green", "Second Option is 'Green'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), "Blue", "Third Option is 'Blue'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?most_favourite_color', 'Hint for the field renders properly');

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 Check the component renders as default field, optionLabelPath='hexValue'", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(4);
                createField.radioGroup(this, {
                  optionLabelPath: 'hexValue'
                });
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  var options;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          options = (0, _emberNativeDomHelpers.findAll)("label");
                          assert.equal(options.length, 4, "Check 3 options are displayed");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), "#FF0000", "First Option is 'Red'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), "#00FF00", "Second Option is 'Green'");
                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), "#0000FF", "Third Option is 'Blue'");

                        case 5:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 Check options are updated on model, optionValuePath='value'", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(2);
                createField.radioGroup(this);
                _context6.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[0]);

                        case 2:
                          assert.equal(_this.model.colors, "Red", "'Red' option is selected");
                          _context5.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[2]);

                        case 5:
                          assert.equal(_this.model.colors, "Blue", "'Blue' option is selected");

                        case 6:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST4 Check options are updated on model, optionValuePath='hexValue'", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(2);
                createField.radioGroup(this, {
                  optionValuePath: 'hexValue'
                });
                _context8.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context8.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[1]);

                        case 2:
                          assert.equal(_this2.model.colors, "#00FF00", "'Green' option is selected");
                          _context7.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[0]);

                        case 5:
                          assert.equal(_this2.model.colors, "#FF0000", "'Red' option is selected");

                        case 6:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }))));

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x4) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST5 Check options are updated on model, optionValuePath=''", /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(2);
                createField.radioGroup(this, {
                  optionValuePath: ''
                });
                _context10.next = 4;
                return createField.renderForm(this);

              case 4:
                return _context10.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[1]);

                        case 2:
                          assert.deepEqual(_this3.model.colors, {
                            id: "green_id",
                            value: "Green",
                            hexValue: "#00FF00",
                            position: 2,
                            parentChoiceIds: null
                          }, "'Green' option is selected");
                          _context9.next = 5;
                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)("input[type=radio")[2]);

                        case 5:
                          assert.deepEqual(_this3.model.colors, {
                            id: "blue_id",
                            value: "Blue",
                            hexValue: "#0000FF",
                            position: 3,
                            parentChoiceIds: null
                          }, "'Blue' option is selected");

                        case 6:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))));

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x5) {
        return _ref9.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the radioGroup component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "Բարեւ Ձեզ";
                createField.radioGroup(this, {
                  label: sampleLabel
                });
                _context11.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x6) {
        return _ref11.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/radio-group/default/edit/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/create-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/radio group | default | edit', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)("#TEST1 Check the component renders as default field with prepopulated data, optionValuePath='value'", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(3);
                createField.radioGroup(this, {
                  optionValuePath: 'value'
                });
                this.model = {
                  colors: "Red"
                };
                _context.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[0]['attributes']['paramvalue'].value, "Red", "Check Option 'Red' is selected");
                  assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[1]['attributes']['paramvalue'].value, "Red", "Check Option 'Red' is selected");
                  assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[2]['attributes']['paramvalue'].value, "Red", "Check Option 'Red' is selected");
                }));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST2 Check the component renders as default field with prepopulated data, optionValuePath='id'", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(3);
                createField.radioGroup(this, {
                  optionValuePath: 'id'
                });
                this.model = {
                  colors: "blue_id"
                };
                _context2.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[0]['attributes']['paramvalue'].value, "blue_id", "Check Option 'Blue' is selected");
                  assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[1]['attributes']['paramvalue'].value, "blue_id", "Check Option 'Blue' is selected");
                  assert.equal((0, _emberNativeDomHelpers.findAll)("[type=radio]")[2]['attributes']['paramvalue'].value, "blue_id", "Check Option 'Blue' is selected");
                }));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)("#TEST3 Check the component renders as default field with prepopulated data, optionValuePath=''", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                createField.radioGroup(this, {
                  optionValuePath: ''
                });
                this.model = {
                  colors: {
                    id: "green_id",
                    value: "Green",
                    hexValue: "#00FF00",
                    position: 2,
                    parentChoiceIds: null
                  }
                };
                _context3.next = 5;
                return createField.renderForm(this);

              case 5:
                return _context3.abrupt("return", (0, _testHelpers.settled)().then(function () {
                  assert.ok(true, "To be fixed, Refer [FSERV-259]");
                }));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/select-field/component-test", ["qunit", "ember-qunit"], function (_qunit, _emberQunit) {
  "use strict";

  (0, _qunit.module)('Integration | Component | form fields/select field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
  });
});
define("dummy/tests/integration/components/form-fields/static-rich-text-field/component-test", ["ember-qunit", "@ember/test-helpers", "ember-native-dom-helpers", "dummy/tests/helpers/create-field"], function (_emberQunit, _testHelpers, _emberNativeDomHelpers, _createField) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _emberQunit.module)('Integration | Component | form fields/static rich text field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _emberQunit.test)('#TEST1 check if the static rich text field renders the html headers and paragraph properly', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(8);

                _createField.default.staticRichText(this, {
                  label: "<h1 class=\"header1\">Freshworks</h1><h2 class=\"header2\">Formserv</h2><h3 class=\"header3\">Guidelines</h3><h4 class=\"header4\">header4</h4><h5 class=\"header5\">header5</h5><h6 class=\"header6\">header6</h6><p class=\"paragraph\">Please refer <a href=\"https://www.example.com\" class=\"anchor\">this</a> link.</p> <ol class=\"orderd\"><li>Coffee</li><li>Tea</li><li>Milk</li></ol>"
                });

                this.model = {};
                _context2.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context2.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header1')[0]["innerText"], "Freshworks", 'header1 renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header2')[0]["innerText"], "Formserv", 'header2 renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header3')[0]["innerText"], "Guidelines", 'header3 renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header4')[0]["innerText"], "header4", 'header4 renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header5')[0]["innerText"], "header5", 'header5 renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header6')[0]["innerText"], "header6", 'header6 renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.paragraph')[0]["innerText"], "Please refer this link.", 'paragraph renders properly');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.anchor')[0]["href"], "https://www.example.com/", 'anchor link renders properly');

                        case 8:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }))));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _emberQunit.test)('#TEST2 check if the static rich text field renders the ordered list properly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(4);

                _createField.default.staticRichText(this, {
                  label: "<ol class=\"ordered_list\"><li>Coffee</li><li>Tea</li><li>Milk</li></ol>"
                });

                this.model = {};
                _context4.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context4.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0]["childElementCount"], 3, 'orderd list contains 3 child nodes');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0]["children"][0]["textContent"], "Coffee", "orderd list first element");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0]["children"][1]["textContent"], "Tea", "orderd list second element");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0]["children"][2]["textContent"], "Milk", "orderd list third element");

                        case 4:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _emberQunit.test)('#TEST3 check if the static rich text field renders the unordered list properly', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(5);

                _createField.default.staticRichText(this, {
                  label: "<hr class=\"horizontal_rule\"><ul class=\"unordered_list\"><li>Coffee</li><li>Tea</li><li>Milk</li></ul>"
                });

                this.model = {};
                _context6.next = 5;
                return _createField.default.renderForm(this);

              case 5:
                return _context6.abrupt("return", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.horizontal_rule').length, 1, 'A horizontal line break');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0]["childElementCount"], 3, 'unorderd list contains 3 child nodes');
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0]["children"][0]["textContent"], "Coffee", "unorderd list first element");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0]["children"][1]["textContent"], "Tea", "unorderd list second element");
                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0]["children"][2]["textContent"], "Milk", "unorderd list third element");

                        case 5:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }))));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-fields/text-field/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/text field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Check the text component renders hint as default field', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                createField.text(this);
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_in_captial_letters', 'Hint for the field renders properly');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check the text component renders hint as custom field', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.text(this, {
                  custom: true
                });
                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return createField.renderForm(this);

              case 5:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_in_captial_letters', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check the text component renders hint with set symbol as parameter', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var formConfig, tooltipConfig;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                formConfig = this.owner.lookup('service:dynamic-form/config');
                tooltipConfig = Ember.get(formConfig, 'tooltipDefaultConfig');
                Ember.run(function () {
                  formConfig.set('tooltipDefaultConfig', {
                    symbol: '(i)',
                    componentName: ''
                  });
                });
                createField.text(this);
                _context3.next = 7;
                return createField.renderForm(this);

              case 7:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '(i)enter_in_captial_letters', 'Hint for the field renders properly');
                Ember.run(function () {
                  formConfig.set('tooltipDefaultConfig', tooltipConfig);
                });

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check if text component does not render hint when it is empty', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);
                createField.text(this, {
                  hint: ''
                });
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '', 'Hint does not render when empty');

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check the text component renders hint with dynamic component when component name is set as parameter', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        var _this = this;

        var formConfig, tooltipConfig;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                this.owner.register('component:custom-tooltip', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "8z2q2G+7",
                    "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[9,\"class\",\"my_tooltip\"],[7],[0,\" This_is_custom_tooltip\"],[8]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                formConfig = this.owner.lookup('service:dynamic-form/config');
                tooltipConfig = Ember.copy(Ember.get(formConfig, 'tooltipDefaultConfig'), true);
                Ember.run(function () {
                  formConfig.set('tooltipDefaultConfig', {
                    symbol: '?',
                    componentName: 'custom-tooltip'
                  });
                });
                createField.text(this);
                _context5.next = 8;
                return createField.renderForm(this);

              case 8:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('div.my_tooltip').text()), 'This_is_custom_tooltip', 'Hint for the field renders properly');
                Ember.run(function () {
                  formConfig.set('tooltipDefaultConfig', tooltipConfig);

                  _this.owner.unregister('component:custom-tooltip');
                });

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the text component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "여보세요";
                createField.text(this, {
                  label: sampleLabel
                });
                _context6.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check if the text component follows accessibility features related to required attribute', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        var inputElement;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(2);
                createField.text(this, {
                  required: true
                });
                _context7.next = 4;
                return createField.renderForm(this);

              case 4:
                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];
                assert.equal(true, inputElement["required"]);
                assert.equal(null, inputElement["ariaRequired"]);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref8.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/textarea-field/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/textarea field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Check the textarea component renders hint as default field', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                createField.textarea(this);
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?movie_review', 'Hint for the field renders properly');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check the textarea component renders hint as custom field', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.textarea(this, {
                  custom: true
                });
                this.model = {
                  customField: {}
                };
                _context2.next = 5;
                return createField.renderForm(this);

              case 5:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?movie_review', 'Hint for the field renders properly');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the textarea component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "مرحبا";
                createField.textarea(this, {
                  label: sampleLabel
                });
                _context3.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check if the textarea component follows accessibility features related to required attribute', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var inputElement;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(2);
                createField.textarea(this, {
                  required: true
                });
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                inputElement = (0, _emberNativeDomHelpers.findAll)('textarea')[0];
                assert.equal(true, inputElement["required"]);
                assert.equal(null, inputElement["ariaRequired"]);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-fields/url-field/component-test", ["qunit", "ember-qunit", "ember-native-dom-helpers", "dummy/tests/helpers/create-field", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form fields/url field', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Check the url component renders hint as default field', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                createField.url(this);
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?valid_url', 'Hint for the field renders properly');

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check the url component renders hint as custom field', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                _context2.next = 3;
                return createField.url(this, {
                  custom: true
                });

              case 3:
                this.model = {
                  customField: {}
                };
                _context2.next = 6;
                return createField.renderForm(this);

              case 6:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?valid_url', 'Hint for the field renders properly');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests begins here -----------------

    (0, _qunit.test)('Check if the url component follows accessibility features related to label attribute', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var sampleLabel, inputElement;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                sampleLabel = "مرحبا";
                createField.url(this, {
                  label: sampleLabel
                });
                _context3.next = 5;
                return createField.renderForm(this);

              case 5:
                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported

                assert.equal(sampleLabel, inputElement["innerText"].trim());

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Check if the url component follows accessibility features related to required attribute', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var inputElement;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(2);
                createField.url(this, {
                  required: true
                });
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];
                assert.equal(true, inputElement["required"]);
                assert.equal(null, inputElement["ariaRequired"]);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }()); // ------------ accessibility features related tests ends here -----------------
  });
});
define("dummy/tests/integration/components/form-for/component-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | form for', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "WLDLOIcf",
                  "block": "{\"symbols\":[],\"statements\":[[1,[18,\"form-for\"],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 2:
                assert.equal(this.$().text().trim(), ''); // Template block usage:

                _context.next = 5;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "qAPa2/le",
                  "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"form-for\",null,null,{\"statements\":[[0,\"        template block text\\n\"]],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 5:
                assert.equal(this.$().text().trim(), 'template block text');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/components/form-hint/component-test", ["qunit", "ember-qunit", "@ember/test-helpers", "dummy/tests/helpers/field-map", "dummy/tests/helpers/string-helper-methods"], function (_qunit, _emberQunit, _testHelpers, _fieldMap, _stringHelperMethods) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('form-hint', 'Integration | Component | form hint', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    (0, _qunit.test)('Render custom hint component depending on fieldNameToHintComponentMap', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        var _this = this;

        var fieldTypeMap, fieldType, fieldInputType;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(18);
                this.owner.register('component:custom-tooltip', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "wpQ1P2uR",
                    "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[9,\"class\",\"my_tooltip\"],[7],[0,\"This_is_custom_tooltip\"],[8]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema

                delete fieldTypeMap.dependent_dropdown;
                delete fieldTypeMap.group_field;
                delete fieldTypeMap.static_rich_text;
                delete fieldTypeMap.formula;
                _context.t0 = regeneratorRuntime.keys(fieldTypeMap);

              case 8:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 17;
                  break;
                }

                fieldType = _context.t1.value;
                fieldInputType = fieldTypeMap[fieldType]['single'];
                Ember.setProperties(this, {
                  model: {},
                  schema: {
                    fields: [{
                      id: 1,
                      type: fieldType,
                      label: 'Sample',
                      name: 'sample_name',
                      position: 1,
                      inputType: fieldInputType,
                      hint: 'sample_hint',
                      fields: []
                    }]
                  },
                  fieldNameToHintComponentMap: {
                    sample_name: 'custom-tooltip'
                  }
                });
                _context.next = 14;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "lldXsPfT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldNameToHintComponentMap\"],[[20,[\"model\"]],[20,[\"schema\"]],[20,[\"fieldNameToHintComponentMap\"]]]],{\"statements\":[[0,\"          \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 14:
                assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Hint for the field renders properly');
                _context.next = 8;
                break;

              case 17:
                Ember.run(function () {
                  _this.owner.unregister('component:custom-tooltip');
                });

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Render default hint component when hint component information is not in fieldNameToHintComponentMap', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        var _this2 = this;

        var fieldTypeMap, fieldType, fieldInputType;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(36);
                this.owner.register('component:custom-tooltip', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "wpQ1P2uR",
                    "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[9,\"class\",\"my_tooltip\"],[7],[0,\"This_is_custom_tooltip\"],[8]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema

                delete fieldTypeMap.dependent_dropdown;
                delete fieldTypeMap.group_field;
                delete fieldTypeMap.static_rich_text;
                delete fieldTypeMap.formula;
                _context2.t0 = regeneratorRuntime.keys(fieldTypeMap);

              case 8:
                if ((_context2.t1 = _context2.t0()).done) {
                  _context2.next = 18;
                  break;
                }

                fieldType = _context2.t1.value;
                fieldInputType = fieldTypeMap[fieldType]['single'];
                Ember.setProperties(this, {
                  model: {
                    customField: {}
                  },
                  schema: {
                    fields: [{
                      id: 1234,
                      type: fieldType,
                      label: 'Sample',
                      name: 'sample_name',
                      position: 1,
                      custom: true,
                      inputType: fieldInputType,
                      hint: 'sample_hint',
                      fields: []
                    }]
                  },
                  fieldNameToHintComponentMap: {
                    sample: 'custom-tooltip'
                  }
                });
                _context2.next = 14;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "lldXsPfT",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\",\"fieldNameToHintComponentMap\"],[[20,[\"model\"]],[20,[\"schema\"]],[20,[\"fieldNameToHintComponentMap\"]]]],{\"statements\":[[0,\"          \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 14:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?sample_hint', 'Hint for the field renders properly');
                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('customField.sample_name_hint'), 'Hint id for the hint component gets populated properly for a custom field');
                _context2.next = 8;
                break;

              case 18:
                Ember.run(function () {
                  _this2.owner.unregister('component:custom-tooltip');
                });

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Render default hint component when fieldNameToHintComponentMap is not passed to dynamic-form-for', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        var _this3 = this;

        var fieldTypeMap, fieldType, fieldInputType;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(36);
                this.owner.register('component:custom-tooltip', Ember.Component.extend({
                  layout: Ember.HTMLBars.template({
                    "id": "wpQ1P2uR",
                    "block": "{\"symbols\":[],\"statements\":[[6,\"div\"],[9,\"class\",\"my_tooltip\"],[7],[0,\"This_is_custom_tooltip\"],[8]],\"hasEval\":false}",
                    "meta": {}
                  })
                }));
                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema

                delete fieldTypeMap.dependent_dropdown;
                delete fieldTypeMap.group_field;
                delete fieldTypeMap.static_rich_text;
                delete fieldTypeMap.formula;
                _context3.t0 = regeneratorRuntime.keys(fieldTypeMap);

              case 8:
                if ((_context3.t1 = _context3.t0()).done) {
                  _context3.next = 18;
                  break;
                }

                fieldType = _context3.t1.value;
                fieldInputType = fieldTypeMap[fieldType]['single'];
                Ember.setProperties(this, {
                  model: {},
                  schema: {
                    fields: [{
                      type: fieldType,
                      label: 'Sample',
                      name: 'sample_name',
                      position: 1,
                      default: true,
                      inputType: fieldInputType,
                      hint: 'sample_hint',
                      fields: []
                    }]
                  }
                });
                _context3.next = 14;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "rI7ooH6v",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"          \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 14:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?sample_hint', 'Hint for the field renders properly');
                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('sampleName_hint'), 'Hint id for the hint component gets populated properly for a default field');
                _context3.next = 8;
                break;

              case 18:
                Ember.run(function () {
                  _this3.owner.unregister('component:custom-tooltip');
                });

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('Should not render hint component when hint is not given', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        var fieldTypeMap, fieldType, fieldInputType;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(18);
                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema

                delete fieldTypeMap.dependent_dropdown;
                delete fieldTypeMap.group_field;
                delete fieldTypeMap.static_rich_text;
                delete fieldTypeMap.formula;
                _context4.t0 = regeneratorRuntime.keys(fieldTypeMap);

              case 7:
                if ((_context4.t1 = _context4.t0()).done) {
                  _context4.next = 16;
                  break;
                }

                fieldType = _context4.t1.value;
                fieldInputType = fieldTypeMap[fieldType]['single'];
                Ember.setProperties(this, {
                  model: {},
                  schema: {
                    fields: [{
                      type: fieldType,
                      label: 'Sample',
                      name: 'sample_name',
                      position: 1,
                      inputType: fieldInputType,
                      fields: []
                    }]
                  }
                });
                _context4.next = 13;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "rI7ooH6v",
                  "block": "{\"symbols\":[\"f\"],\"statements\":[[0,\"\\n\"],[4,\"dynamic-form-for\",null,[[\"model\",\"schema\"],[[20,[\"model\"]],[20,[\"schema\"]]]],{\"statements\":[[0,\"          \"],[1,[19,1,[\"drawForm\"]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"      \"]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 13:
                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '', 'Hint does not get rendered when empty');
                _context4.next = 7;
                break;

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/helpers/date-field-format-date-test", ["qunit", "ember-qunit", "@ember/test-helpers"], function (_qunit, _emberQunit, _testHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Helper | date-field-format-date', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.

    (0, _qunit.test)('it renders', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.set('inputValue', '1234');
                _context.next = 3;
                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                  "id": "dzyshlP4",
                  "block": "{\"symbols\":[],\"statements\":[[1,[25,\"date-field-format-date\",[[20,[\"inputValue\"]]],null],false]],\"hasEval\":false}",
                  "meta": {}
                }));

              case 3:
                assert.equal(this.element.textContent.trim(), '1234');

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/metadata/field/structure_related/editable/editable-test", ["qunit", "ember-qunit", "dummy/tests/helpers/create-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | editable', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)('#TEST1 : auto-complete : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                createField.autoComplete(this, {
                  editable: false
                });
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), "Check field is disabled");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 : date-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.date(this, {
                  editable: false
                });
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 : date-field-split-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                createField.dateTimeSplit(this, {
                  editable: false
                });
                _context3.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST4 : email-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);
                createField.email(this, {
                  editable: false
                });
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST5 : number-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                createField.number(this, {
                  editable: false
                });
                _context5.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST6 : text-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);
                createField.text(this, {
                  editable: false
                });
                _context6.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST7 : textarea-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(1);
                createField.textarea(this, {
                  editable: false
                });
                _context7.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('textarea')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST8 : url-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);
                createField.url(this, {
                  editable: false
                });
                _context8.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(1);
                createField.dependentDropdown(this, {
                  editable: false
                });
                _context9.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), "Check field is disabled");

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST10 : group-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(1);
                createField.group(this, {
                  editable: false
                });
                _context10.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok(true, "To Checked with Mithun on what is the expected behaviour");

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(1);
                createField.multiSelectDropdown(this, {
                  editable: false
                });
                _context11.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), "Check field is disabled");

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST12 : checkbox-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(1);
                createField.checkbox(this, {
                  editable: false
                });
                _context12.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], "Check field is disabled");

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST13 : power-select-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(1);
                createField.dropdown(this, {
                  editable: false
                });
                _context13.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), "Check field is disabled");

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref13.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/metadata/field/structure_related/label/label-test", ["qunit", "ember-qunit", "dummy/tests/helpers/create-field", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers, _emberPowerSelect) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | label', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)('#TEST1 : auto-complete : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                createField.autoComplete(this);
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Area Code', "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 : date-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.date(this);
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Date of Birth', "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 : date-field-split-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                createField.dateTimeSplit(this);
                _context3.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Date And Time of Birth', "Check label is rendered in DOM for date-field");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST4 : email-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);
                createField.email(this);
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Email Address', "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST5 : number-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                createField.number(this);
                _context5.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), "Net Income", "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST6 : text-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);
                createField.text(this);
                _context6.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'First Name', "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST7 : textarea-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(1);
                createField.textarea(this);
                _context7.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Your review', "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST8 : url-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);
                createField.url(this);
                _context8.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'URL to validate', "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(2);
                createField.dependentDropdown(this);
                _context9.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Country', "Check label is rendered in DOM");
                _context9.next = 7;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="country"] .ember-power-select-trigger'));

              case 7:
                _context9.next = 9;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="country"] .ember-power-select-trigger'), 40);

              case 9:
                _context9.next = 11;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="country"] .ember-power-select-trigger'), 13);

              case 11:
                //  Press Enter
                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[1].innerText.trim(), 'States', "Check label is rendered in DOM");

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST10 : group-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(1);
                createField.group(this);
                _context10.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), "Email Address", "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(1);
                createField.multiSelectDropdown(this);
                _context11.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), "Known Programming Langugages", "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST12 : checkbox-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(1);
                createField.checkbox(this);
                _context12.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), "Male ?", "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST13 : power-select-field : Check label is rendered correctly', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(1);
                createField.dropdown(this);
                _context13.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), "Indian states", "Check label is rendered in DOM");

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref13.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/metadata/field/structure_related/placeholder/placeholder-test", ["qunit", "ember-qunit", "dummy/tests/helpers/create-field", "ember-native-dom-helpers", "dummy/tests/helpers/ember-power-select"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers, _emberPowerSelect) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | placeholder', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)('#TEST1 : auto-complete : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                createField.autoComplete(this);
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), 'Search...', "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 : date-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.date(this);
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], '00/00/0000', "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 : date-field-split-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(2);
                createField.dateTimeSplit(this);
                _context3.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], '00/00/0000', "Check placeholder is rendered in DOM for date-field");
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '00:00 AM', "Check placeholder is rendered in DOM for time-field");

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST4 : email-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);
                createField.email(this);
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], 'abc@xyz.com', "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST5 : number-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                createField.number(this);
                _context5.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], "income in '₹'", "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST6 : text-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);
                createField.text(this);
                _context6.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], 'FirstName', "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST7 : textarea-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(1);
                createField.textarea(this);
                _context7.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('textarea')["placeholder"], 'How was the movie', "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST8 : url-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);
                createField.url(this);
                _context8.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], 'http://www.domain.com', "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(2);
                createField.dependentDropdown(this);
                _context9.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="country"] .ember-power-select-placeholder').innerText.trim(), 'Choose a Country', "Check placeholder is rendered in DOM");
                _context9.next = 7;
                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name="country"] .ember-power-select-trigger'));

              case 7:
                _context9.next = 9;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="country"] .ember-power-select-trigger'), 40);

              case 9:
                _context9.next = 11;
                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name="country"] .ember-power-select-trigger'), 13);

              case 11:
                //  Press Enter
                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name="states"] .ember-power-select-placeholder').innerText.trim(), 'Choose a State', "Check placeholder is rendered in DOM");

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST10 : group-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(1);
                createField.group(this);
                _context10.next = 4;
                return createField.renderForm(this);

              case 4:
                /* Change the assert once the fix from group-field branch pulled in */
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], "", "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(1);
                createField.multiSelectDropdown(this);
                _context11.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('input')["placeholder"], "select known programming langugages", "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST12 : power-select-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(1);
                createField.dropdown(this);
                _context12.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), "Select State of Residance", "Check placeholder is rendered in DOM");

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref12.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/integration/metadata/field/structure_related/required/required-test", ["qunit", "ember-qunit", "dummy/tests/helpers/create-field", "ember-native-dom-helpers"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Integration | Component | required', function (hooks) {
    (0, _emberQunit.setupRenderingTest)(hooks);
    hooks.beforeEach(function () {});
    hooks.afterEach(function () {});
    (0, _qunit.test)('#TEST1 : auto-complete : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                assert.expect(1);
                createField.autoComplete(this, {
                  required: true
                });
                _context.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST2 : date-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                assert.expect(1);
                createField.date(this, {
                  required: true
                });
                _context2.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST3 : date-field-split-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                assert.expect(1);
                createField.dateTimeSplit(this, {
                  required: true
                });
                _context3.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST4 : email-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                assert.expect(1);
                createField.email(this, {
                  required: true
                });
                _context4.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST5 : number-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                assert.expect(1);
                createField.number(this, {
                  required: true
                });
                _context5.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST6 : text-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                assert.expect(1);
                createField.text(this, {
                  required: true
                });
                _context6.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x6) {
        return _ref6.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST7 : textarea-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                assert.expect(1);
                createField.textarea(this, {
                  required: true
                });
                _context7.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function (_x7) {
        return _ref7.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST8 : url-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                assert.expect(1);
                createField.url(this, {
                  required: true
                });
                _context8.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function (_x8) {
        return _ref8.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                assert.expect(1);
                createField.dependentDropdown(this, {
                  required: true
                });
                _context9.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function (_x9) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST10 : group-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                assert.expect(1);
                createField.group(this, {
                  required: true
                });
                _context10.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function (_x10) {
        return _ref10.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                assert.expect(1);
                createField.multiSelectDropdown(this, {
                  required: true
                });
                _context11.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x11) {
        return _ref11.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST12 : checkbox-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                assert.expect(1);
                createField.checkbox(this, {
                  required: true
                });
                _context12.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x12) {
        return _ref12.apply(this, arguments);
      };
    }());
    (0, _qunit.test)('#TEST13 : power-select-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                assert.expect(1);
                createField.dropdown(this, {
                  required: true
                });
                _context13.next = 4;
                return createField.renderForm(this);

              case 4:
                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', "Check field has '*' next to it");

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x13) {
        return _ref13.apply(this, arguments);
      };
    }());
  });
});
define("dummy/tests/page-object", ["exports", "ember-cli-page-object/test-support/-private/deprecate", "ember-cli-page-object"], function (_exports, _deprecate, _emberCliPageObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "alias", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.alias;
    }
  });
  Object.defineProperty(_exports, "attribute", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.attribute;
    }
  });
  Object.defineProperty(_exports, "clickOnText", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.clickOnText;
    }
  });
  Object.defineProperty(_exports, "clickable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.clickable;
    }
  });
  Object.defineProperty(_exports, "collection", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.collection;
    }
  });
  Object.defineProperty(_exports, "contains", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.contains;
    }
  });
  Object.defineProperty(_exports, "count", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.count;
    }
  });
  Object.defineProperty(_exports, "create", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.create;
    }
  });
  Object.defineProperty(_exports, "fillable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.fillable;
    }
  });
  Object.defineProperty(_exports, "selectable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.fillable;
    }
  });
  Object.defineProperty(_exports, "focusable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.focusable;
    }
  });
  Object.defineProperty(_exports, "hasClass", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.hasClass;
    }
  });
  Object.defineProperty(_exports, "is", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.is;
    }
  });
  Object.defineProperty(_exports, "isHidden", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.isHidden;
    }
  });
  Object.defineProperty(_exports, "isPresent", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.isPresent;
    }
  });
  Object.defineProperty(_exports, "isVisible", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.isVisible;
    }
  });
  Object.defineProperty(_exports, "notHasClass", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.notHasClass;
    }
  });
  Object.defineProperty(_exports, "property", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.property;
    }
  });
  Object.defineProperty(_exports, "text", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.text;
    }
  });
  Object.defineProperty(_exports, "triggerable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.triggerable;
    }
  });
  Object.defineProperty(_exports, "value", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.value;
    }
  });
  Object.defineProperty(_exports, "visitable", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.visitable;
    }
  });
  Object.defineProperty(_exports, "buildSelector", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.buildSelector;
    }
  });
  Object.defineProperty(_exports, "findElementWithAssert", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.findElementWithAssert;
    }
  });
  Object.defineProperty(_exports, "findElement", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.findElement;
    }
  });
  Object.defineProperty(_exports, "getContext", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.getContext;
    }
  });
  Object.defineProperty(_exports, "fullScope", {
    enumerable: true,
    get: function get() {
      return _emberCliPageObject.fullScope;
    }
  });
  _exports.default = void 0;
  var _default = {
    alias: _emberCliPageObject.alias,
    attribute: _emberCliPageObject.attribute,
    blurrable: _emberCliPageObject.blurrable,
    clickOnText: _emberCliPageObject.clickOnText,
    clickable: _emberCliPageObject.clickable,
    collection: _emberCliPageObject.collection,
    contains: _emberCliPageObject.contains,
    count: _emberCliPageObject.count,
    create: _emberCliPageObject.create,
    fillable: _emberCliPageObject.fillable,
    focusable: _emberCliPageObject.focusable,
    hasClass: _emberCliPageObject.hasClass,
    is: _emberCliPageObject.is,
    isHidden: _emberCliPageObject.isHidden,
    isPresent: _emberCliPageObject.isPresent,
    isVisible: _emberCliPageObject.isVisible,
    notHasClass: _emberCliPageObject.notHasClass,
    property: _emberCliPageObject.property,
    selectable: _emberCliPageObject.fillable,
    text: _emberCliPageObject.text,
    triggerable: _emberCliPageObject.triggerable,
    value: _emberCliPageObject.value,
    visitable: _emberCliPageObject.visitable
  };
  _exports.default = _default;
  (0, _deprecate.default)('import-from-test-support', "Importing from \"test-support\" is now deprecated. Please import directly from the \"ember-cli-page-object\" module instead.", '1.16.0', '2.0.0');
});
define("dummy/tests/pages/components/dynamic-fields-for", ["exports", "ember-test-selectors"], function (_exports, _emberTestSelectors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    sectionTitle: (0, _emberTestSelectors.default)('section-header')
  };
  _exports.default = _default;
});
define("dummy/tests/pages/components/dynamic-form-for", ["exports", "ember-test-selectors"], function (_exports, _emberTestSelectors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = {
    nameFieldLabel: "".concat((0, _emberTestSelectors.default)('field-name', 'name'), " label"),
    nameFieldInput: "".concat((0, _emberTestSelectors.default)('field-name', 'name'), " input"),
    reset: 'button[type="reset"]',
    submit: 'button[type="submit"]'
  };
  _exports.default = _default;
});
define('dummy/tests/templates.template.lint-test', [], function () {
  'use strict';

  QUnit.module('TemplateLint');

  QUnit.test('dummy/components/code-snippet/template.hbs', function (assert) {
    assert.expect(1);
    assert.ok(false, 'dummy/components/code-snippet/template.hbs should pass TemplateLint.\n\ndummy/components/code-snippet/template.hbs\n  1:60  error  Usage of triple curly brackets is unsafe  no-triple-curlies\n  2:0  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  3:0  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n');
  });

  QUnit.test('dummy/components/field-tooltip/template.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'dummy/components/field-tooltip/template.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('dummy/components/fields/date-field/template.hbs', function (assert) {
    assert.expect(1);
    assert.ok(false, 'dummy/components/fields/date-field/template.hbs should pass TemplateLint.\n\ndummy/components/fields/date-field/template.hbs\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\n');
  });

  QUnit.test('dummy/components/fields/date-field/tooltip/template.hbs', function (assert) {
    assert.expect(1);
    assert.ok(false, 'dummy/components/fields/date-field/tooltip/template.hbs should pass TemplateLint.\n\ndummy/components/fields/date-field/tooltip/template.hbs\n  1:6  error  elements cannot have inline styles  no-inline-styles\n');
  });

  QUnit.test('dummy/components/sample-form/template.hbs', function (assert) {
    assert.expect(1);
    assert.ok(false, 'dummy/components/sample-form/template.hbs should pass TemplateLint.\n\ndummy/components/sample-form/template.hbs\n  12:4  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  13:4  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  14:4  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  15:4  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  16:4  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  17:4  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  18:4  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  31:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\n  28:6  error  Incorrect indentation for `{{f.formSearchField}}` beginning at L28:C6. Expected `{{f.formSearchField}}` to be at an indentation of 4 but was found at 6.  block-indentation\n  29:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L29:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\n  30:6  error  Incorrect indentation for `{{f.submit}}` beginning at L30:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\n  31:6  error  Incorrect indentation for `<button>` beginning at L31:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\n');
  });

  QUnit.test('dummy/components/suggestion-button/template.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'dummy/components/suggestion-button/template.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('dummy/templates/application.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'dummy/templates/application.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('dummy/templates/docs.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'dummy/templates/docs.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('dummy/templates/docs/date-field.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'dummy/templates/docs/date-field.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('dummy/templates/docs/form.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'dummy/templates/docs/form.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('dummy/templates/docs/index.hbs', function (assert) {
    assert.expect(1);
    assert.ok(false, 'dummy/templates/docs/index.hbs should pass TemplateLint.\n\ndummy/templates/docs/index.hbs\n  2:1  error  Incorrect indentation for `<p>` beginning at L2:C1. Expected `<p>` to be at an indentation of 2 but was found at 1.  block-indentation\n  3:1  error  Incorrect indentation for `<br>` beginning at L3:C1. Expected `<br>` to be at an indentation of 2 but was found at 1.  block-indentation\n  4:1  error  Incorrect indentation for `<p>` beginning at L4:C1. Expected `<p>` to be at an indentation of 2 but was found at 1.  block-indentation\n  5:1  error  Incorrect indentation for `<br>` beginning at L5:C1. Expected `<br>` to be at an indentation of 2 but was found at 1.  block-indentation\n  6:1  error  Incorrect indentation for `<p>` beginning at L6:C1. Expected `<p>` to be at an indentation of 2 but was found at 1.  block-indentation\n  7:1  error  Incorrect indentation for `<br>` beginning at L7:C1. Expected `<br>` to be at an indentation of 2 but was found at 1.  block-indentation\n  8:1  error  Incorrect indentation for `<p>` beginning at L8:C1. Expected `<p>` to be at an indentation of 2 but was found at 1.  block-indentation\n');
  });

  QUnit.test('dummy/templates/index.hbs', function (assert) {
    assert.expect(1);
    assert.ok(true, 'dummy/templates/index.hbs should pass TemplateLint.\n\n');
  });

  QUnit.test('dummy/templates/not-found.hbs', function (assert) {
    assert.expect(1);
    assert.ok(false, 'dummy/templates/not-found.hbs should pass TemplateLint.\n\ndummy/templates/not-found.hbs\n  2:5  error  elements cannot have inline styles  no-inline-styles\n');
  });
});
define("dummy/tests/test-helper", ["dummy/app", "dummy/config/environment", "@ember/test-helpers", "ember-qunit"], function (_app, _environment, _testHelpers, _emberQunit) {
  "use strict";

  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));
  (0, _emberQunit.start)();
});
define('dummy/tests/tests.lint-test', [], function () {
  'use strict';

  QUnit.module('ESLint | tests');

  QUnit.test('helpers/create-auto-complete-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-auto-complete-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-checkbox-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-checkbox-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-checkbox-group-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-checkbox-group-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-date-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-date-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-date-time-split-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-date-time-split-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-dependent-dropdown-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-dependent-dropdown-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-email-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-email-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-formula-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-formula-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-group-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-group-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-multi-select-dropdown-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-multi-select-dropdown-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-number-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-number-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-power-select-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-power-select-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-radio-group-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-radio-group-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-static-rich-text-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-static-rich-text-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-text-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-text-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-textarea-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-textarea-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/create-url-field.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/create-url-field.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/destroy-app.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/field-map.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/field-map.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/module-for-acceptance.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/render-form.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/render-form.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/start-app.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/start-app.js should pass ESLint\n\n');
  });

  QUnit.test('helpers/string-helper-methods.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/string-helper-methods.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/dependent-dropdown/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/dependent-dropdown/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/dynamic-fields-for/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/dynamic-fields-for/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/dynamic-form-for/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/dynamic-form-for/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/fields-for/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/fields-for/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/auto-complete-multiple-with-create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/auto-complete-multiple-with-create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/auto-complete/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/auto-complete/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/date-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/date-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/date-range-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/date-range-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/date-time-split/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/date-time-split/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/dependent-selects/power-select/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/dependent-selects/power-select/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/multi-select-dropdown/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/multi-select-dropdown/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/power-select/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/power-select/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-controls/time-picker-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-controls/time-picker-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-errors/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-errors/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/allowClear/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/allowClear/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/custom/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/custom/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/default/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/default/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/minSearchCharLength/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/minSearchCharLength/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-field/Custom/Create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-field/Custom/Create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-field/Custom/Edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-field/Custom/Edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-field/Default/Create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-field/Default/Create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-field/Default/Edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-field/Default/Edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-group/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-group/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-group/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-group/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-group/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-group/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-group/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-group/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/checkbox-group/option/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/checkbox-group/option/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/date-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/date-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/date-range-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/date-range-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/date-time-split-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/date-time-split-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/dependent-dropdown-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/dependent-dropdown-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/dependent-select/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/dependent-select/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/dependent-selects/checkbox-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/dependent-selects/checkbox-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/dependent-selects/power-select-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/dependent-selects/power-select-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/dependent-selects/power-select-field/prevent-resetting-of-child-fields/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/dependent-selects/power-select-field/prevent-resetting-of-child-fields/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/dependent-selects/radio-group/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/dependent-selects/radio-group/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/dependent-selects/radio-group/prevent-resetting-of-child-fields/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/dependent-selects/radio-group/prevent-resetting-of-child-fields/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/email-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/email-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/class-name-bindings/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/class-name-bindings/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/fieldOptions/evalservRequestHeaders/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/fieldOptions/evalservRequestHeaders/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/fieldOptions/evaluateOnOperandDataUpdate/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/fieldOptions/evaluateOnOperandDataUpdate/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/number-field/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/number-field/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/number-field/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/number-field/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/radio-field/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/radio-field/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/radio-field/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/radio-field/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/text-field/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/text-field/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/text-field/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/formula-field/text-field/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/group-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/group-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/group-field/custom-palette/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/group-field/custom-palette/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/group-field/field-view-toggle-button/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/group-field/field-view-toggle-button/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/group-field/field-view-toggle-button/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/group-field/field-view-toggle-button/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/multi-select-dropdown-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/multi-select-dropdown-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/number-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/number-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/power-select-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/power-select-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/radio-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/radio-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/radio-group/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/radio-group/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/radio-group/custom/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/radio-group/custom/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/radio-group/custom/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/radio-group/custom/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/radio-group/default/create/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/radio-group/default/create/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/radio-group/default/edit/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/radio-group/default/edit/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/select-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/select-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/static-rich-text-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/static-rich-text-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/text-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/text-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/textarea-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/textarea-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-fields/url-field/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-fields/url-field/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-for/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-for/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/components/form-hint/component-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/components/form-hint/component-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/helpers/date-field-format-date-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/helpers/date-field-format-date-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/metadata/field/structure_related/editable/editable-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/metadata/field/structure_related/editable/editable-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/metadata/field/structure_related/label/label-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/metadata/field/structure_related/label/label-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/metadata/field/structure_related/placeholder/placeholder-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/metadata/field/structure_related/placeholder/placeholder-test.js should pass ESLint\n\n');
  });

  QUnit.test('integration/metadata/field/structure_related/required/required-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'integration/metadata/field/structure_related/required/required-test.js should pass ESLint\n\n');
  });

  QUnit.test('pages/components/dynamic-fields-for.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pages/components/dynamic-fields-for.js should pass ESLint\n\n');
  });

  QUnit.test('pages/components/dynamic-form-for.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'pages/components/dynamic-form-for.js should pass ESLint\n\n');
  });

  QUnit.test('test-helper.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'test-helper.js should pass ESLint\n\n');
  });

  QUnit.test('unit/helpers/fserv-is-none-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/helpers/fserv-is-none-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/helpers/get-object-at-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/helpers/get-object-at-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/helpers/sort-fields-by-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/helpers/sort-fields-by-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/mixins/dependent-field-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/mixins/dependent-field-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/mixins/dependent-select-control-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/mixins/dependent-select-control-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/mixins/dependent-select-field-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/mixins/dependent-select-field-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/mixins/fetch-choices-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/mixins/fetch-choices-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/mixins/form-control-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/mixins/form-control-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/models/choice-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/models/choice-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/models/field-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/models/field-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/models/form-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/models/form-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/serializers/choice-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/serializers/choice-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/serializers/field-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/serializers/field-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/services/dynamic-form/config-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/services/dynamic-form/config-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/services/ember-form-for/config-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/services/ember-form-for/config-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/utils/date-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/utils/date-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/utils/date-time-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/utils/date-time-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/utils/field-map-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/utils/field-map-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/utils/field-utils-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/utils/field-utils-test.js should pass ESLint\n\n');
  });

  QUnit.test('unit/utils/time-test.js', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/utils/time-test.js should pass ESLint\n\n');
  });
});
define("dummy/tests/unit/helpers/fserv-is-none-test", ["dummy/helpers/fserv-is-none", "qunit"], function (_fservIsNone, _qunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Helper | fserv is none');
  (0, _qunit.test)('it works for true', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              result = (0, _fservIsNone.fservIsNone)([true]);
              assert.equal(result, false);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  (0, _qunit.test)('it works for false', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              result = (0, _fservIsNone.fservIsNone)([false]);
              assert.equal(result, false);

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  (0, _qunit.test)('it works for string', /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              result = (0, _fservIsNone.fservIsNone)(['abc']);
              assert.equal(result, false);

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }());
  (0, _qunit.test)('it works for blank string', /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              result = (0, _fservIsNone.fservIsNone)(['']);
              assert.equal(result, false);

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4) {
      return _ref4.apply(this, arguments);
    };
  }());
  (0, _qunit.test)('it works for undefined', /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              result = (0, _fservIsNone.fservIsNone)([undefined]);
              assert.equal(result, true);

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x5) {
      return _ref5.apply(this, arguments);
    };
  }());
  (0, _qunit.test)('it works for null', /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              result = (0, _fservIsNone.fservIsNone)([null]);
              assert.equal(result, true);

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x6) {
      return _ref6.apply(this, arguments);
    };
  }());
});
define("dummy/tests/unit/helpers/get-object-at-test", ["dummy/helpers/get-object-at", "qunit"], function (_getObjectAt, _qunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Helper | get object at'); // Replace this with your real tests.

  (0, _qunit.test)('it works', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
      var array, result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              array = Ember.A([{
                value: 'abc'
              }, {
                value: 'xyz'
              }]);
              result = (0, _getObjectAt.getObjectAt)([1, array]);
              assert.equal(result, array[1]);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
});
define("dummy/tests/unit/helpers/sort-fields-by-test", ["dummy/helpers/sort-fields-by", "qunit"], function (_sortFieldsBy, _qunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Helper | sort fields by');
  (0, _qunit.test)('Helper sorts by the key passed for sorting the array of objects', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              result = (0, _sortFieldsBy.sortFieldsBy)([[{
                'id': 2,
                'value': '1'
              }, {
                'id': 1,
                'value': '2'
              }]], {
                keysToSort: 'id'
              });
              assert.deepEqual(result, [{
                'id': 1,
                'value': '2'
              }, {
                'id': 2,
                'value': '1'
              }]);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  (0, _qunit.test)('Helper sorts by the key passed for sorting the array of objects', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
      var result;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              result = (0, _sortFieldsBy.sortFieldsBy)([[{
                'id': 2,
                'value': '1'
              }, {
                'id': 1,
                'value': '2'
              }]], {});
              assert.deepEqual(result, [{
                'id': 2,
                'value': '1'
              }, {
                'id': 1,
                'value': '2'
              }]);

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }());
});
define("dummy/tests/unit/mixins/dependent-field-test", ["ember-dynamic-form/mixins/dependent-field", "qunit"], function (_dependentField, _qunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Mixin | dependent field'); // Replace this with your real tests.

  (0, _qunit.test)('it works', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
      var DependentFieldObject;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              DependentFieldObject = Ember.Component.extend(_dependentField.default);
              assert.ok(DependentFieldObject);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
});
define("dummy/tests/unit/mixins/dependent-select-control-test", ["ember-dynamic-form/mixins/dependent-select-control", "qunit"], function (_dependentSelectControl, _qunit) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  (0, _qunit.module)('Unit | Mixin | dependent select control'); // Replace this with your real tests.

  (0, _qunit.test)('it works', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
      var DependentSelectControlObject;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              DependentSelectControlObject = Ember.Component.extend(_dependentSelectControl.default);
              assert.ok(DependentSelectControlObject);

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
});
define("dummy/tests/unit/mixins/dependent-select-field-test", ["ember-dynamic-form/mixins/dependent-select-field", "qunit"], function (_dependentSelectField, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Mixin | dependent select field'); // Replace this with your real tests.

  (0, _qunit.test)('it works', function (assert) {
    var DependentSelectFieldObject = Ember.Component.extend(_dependentSelectField.default);
    assert.ok(DependentSelectFieldObject);
  });
});
define("dummy/tests/unit/mixins/fetch-choices-test", ["ember-dynamic-form/mixins/fetch-choices", "qunit"], function (_fetchChoices, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Mixin | fetch choices'); // Replace this with your real tests.

  (0, _qunit.test)('it works', function (assert) {
    var FetchChoicesObject = Ember.Object.extend(_fetchChoices.default);
    var subject = FetchChoicesObject.create();
    assert.ok(subject);
  });
});
define("dummy/tests/unit/mixins/form-control-test", ["ember-dynamic-form/mixins/form-control", "qunit"], function (_formControl, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Mixin | form control');
  (0, _qunit.test)('it works', function (assert) {
    var FormControlObject = Ember.Component.extend(_formControl.default);
    assert.ok(FormControlObject);
  });
});
define("dummy/tests/unit/models/choice-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleForModel)('choice', 'Unit | Model | choice', {
    needs: ['model:field']
  });
  (0, _emberQunit.test)('it exists', function (assert) {
    var model = this.subject({
      id: 1,
      value: '1'
    });
    assert.ok(!!model);
  });
});
define("dummy/tests/unit/models/field-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleForModel)('field', 'Unit | Model | field', {
    needs: ['model:choice', 'service:dynamic-form/config']
  });
  (0, _emberQunit.test)('Verify model defaults for a default text field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'text',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'text-field', 'Field is picked properly');
    assert.equal(Ember.get(model, 'isNestedSection'), false, 'Field is not a nested section');
    assert.equal(Ember.get(model, 'getChoices.length'), 0, 'Field does not have choices');
    assert.equal(Ember.get(model, 'hidden'), undefined, 'Field is not hidden');
  });
  (0, _emberQunit.test)('Verify model defaults for a default paragraph field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'paragraph',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'textarea-field', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default number field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'number',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'number-field', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default radio field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'radio',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'radio-field', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default checkbox field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'checkbox',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'checkbox-field', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default date field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'date',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'datetime-field', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default date_time field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'date_time',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'datetime-field', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default dropdown field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'dropdown',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'power-select-field', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default dependent dropdown field', function (assert) {
    var store = this.store();
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': '/dummy/1',
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'dependent_dropdown',
      'validatable': null,
      'visible': true
    });

    Ember.$.getJSON = function () {
      return new Ember.RSVP.Promise(function (resolve) {
        Ember.run.next(function () {
          var choices = store.createRecord('choice', {
            'id': '90',
            'name': 'text',
            'position': 1
          });
          resolve([choices]);
        });
      });
    };

    assert.equal(Ember.get(model, 'inputType'), 'dependent-dropdown', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model defaults for a default auto_complete field', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': '/dummy/1',
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'auto_complete',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'auto-complete', 'Field is picked properly');
  });
  (0, _emberQunit.test)('Verify model for a section', function (assert) {
    var _this = this;

    var store = this.store();
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'first_name',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'First name',
      'link': null,
      'name': 'first_name',
      'parentId': '2',
      'placeholder': 'Enter first name',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'section',
      'validatable': null,
      'visible': true
    });
    Ember.run.next(function () {
      var parent = _this.subject({
        'builder': null,
        'choices': [],
        'columnName': 'first_name',
        'custom': false,
        'dataStore': null,
        'deleted': false,
        'editable': true,
        'fieldClass': 'Tom',
        'field_options': {},
        'fields': [],
        'id': '2',
        'label': 'Application Data',
        'link': null,
        'name': 'application_data',
        'parentId': null,
        'placeholder': 'Enter first name',
        'position': 1,
        'regex': {},
        'required': false,
        'type': 'dropdown',
        'validatable': null,
        'visible': true
      });

      var field = store.createRecord('field', {
        'builder': null,
        'choices': [],
        'columnName': 'work_number',
        'custom': false,
        'dataStore': null,
        'deleted': false,
        'editable': true,
        'fieldClass': 'Tom',
        'field_options': {},
        'fields': [],
        'id': '3',
        'label': 'Work',
        'link': null,
        'name': 'work_number',
        'parentId': '1',
        'placeholder': 'Enter first name',
        'position': 1,
        'regex': {},
        'required': false,
        'type': 'phone_number',
        'validatable': null,
        'visible': true
      });
      Ember.set(model, 'parent', parent);
      Ember.get(model, 'fields').pushObject(field);
      assert.equal(Ember.get(model, 'inputType'), 'nested-section', 'Field is picked properly');
    });
  });
  (0, _emberQunit.test)('Verify model for a Group', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'nothins',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'nothins',
      'link': null,
      'name': 'nothins',
      'parentId': null,
      'placeholder': 'Enter nothins',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'section',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'inputType'), 'nested-section', 'Field is not a group');
    assert.equal(Ember.get(model, 'isNestedSection'), true, 'Field is a nested group');
  });
  (0, _emberQunit.test)('Verify text field is hidden through visible property', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'nothins',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'field_options': {},
      'fields': [],
      'id': '1',
      'label': 'nothins',
      'link': null,
      'name': 'nothins',
      'parentId': null,
      'placeholder': 'Enter nothins',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'text',
      'validatable': null,
      'visible': false
    });
    assert.equal(Ember.get(model, 'hidden'), true, 'Field is hidden');
  });
  (0, _emberQunit.test)('Verify text field is hidden through fieldOptions.hidden property', function (assert) {
    var model = this.subject({
      'builder': null,
      'choices': [],
      'columnName': 'nothins',
      'custom': false,
      'dataStore': null,
      'deleted': false,
      'editable': true,
      'fieldClass': 'Tom',
      'fieldOptions': {
        'hidden': true
      },
      'fields': [],
      'id': '1',
      'label': 'nothins',
      'link': null,
      'name': 'nothins',
      'parentId': null,
      'placeholder': 'Enter nothins',
      'position': 1,
      'regex': {},
      'required': false,
      'type': 'text',
      'validatable': null,
      'visible': true
    });
    assert.equal(Ember.get(model, 'hidden'), true, 'Field is hidden');
  });
});
define("dummy/tests/unit/models/form-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleForModel)('form', 'Unit | Model | form', {
    needs: ['model:field', 'model:choice']
  });
  (0, _emberQunit.test)('it exists', function (assert) {
    var model = this.subject({
      'id': 1,
      'name': 'Default form',
      'description': 'This is the default form.',
      'active': true,
      'fieldClass': 'Tom',
      'fields': []
    });
    assert.ok(!!model);
  });
});
define("dummy/tests/unit/serializers/choice-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleForModel)('choice', 'Unit | Serializer | choice', {
    needs: ['model:field', 'serializer:choice']
  });
  (0, _emberQunit.test)('Choice serializer works', function (assert) {
    var record = this.subject();
    var serializedRecord = record.serialize();
    assert.ok(serializedRecord);
  });
});
define("dummy/tests/unit/serializers/field-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleForModel)('field', 'Unit | Serializer | field', {
    needs: ['model:choice', 'serializer:choice', 'serializer:field', 'service:dynamic-form/config']
  });
  (0, _emberQunit.test)('Serializer serializes records properly', function (assert) {
    var record = this.subject({
      'id': '1',
      'parent_id': '2',
      'name': 'cf_first_name',
      'label': 'Custom field',
      'placeholder': 'Enter value',
      'type': 'text',
      'position': 1,
      'required': false,
      'custom': false,
      'editable': true,
      'visible': true,
      'pinned': false,
      'link': null,
      'choices': [],
      'field_options': {},
      'regex': '',
      'fields': []
    });
    var serializedRecord = record.serialize();
    assert.ok(serializedRecord);
  });
});
define("dummy/tests/unit/services/dynamic-form/config-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleFor)('service:dynamic-form/config', 'Unit | Service | dynamic form/config', {// Specify the other units that are required for this test.
    // needs: ['service:foo']
  }); // Replace this with your real tests.

  (0, _emberQunit.test)('it exists', function (assert) {
    var service = this.subject();
    assert.ok(service);
  });
});
define("dummy/tests/unit/services/ember-form-for/config-test", ["ember-qunit"], function (_emberQunit) {
  "use strict";

  (0, _emberQunit.moduleFor)('service:ember-form-for/config', 'Unit | Service | ember form for/config', {// Specify the other units that are required for this test.
    // needs: ['service:foo']
  }); // Replace this with your real tests.

  (0, _emberQunit.test)('it exists', function (assert) {
    var service = this.subject();
    assert.ok(service);
  });
});
define("dummy/tests/unit/utils/date-test", ["dummy/utils/date", "qunit"], function (_date, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | date');
  (0, _qunit.test)('toDateObject works properly', function (assert) {
    var result = _date.default.toDateObject('2017-10-30T00:00:00.00Z');

    assert.equal(result.getDate(), 30);
    assert.equal(result.getMonth(), 9);
    assert.equal(result.getFullYear(), 2017);
  });
  (0, _qunit.test)('toDateString works properly', function (assert) {
    var result = _date.default.toDateString(new Date(2017, 9, 30));

    assert.equal(result, '2017-10-30');
  });
});
define("dummy/tests/unit/utils/date-time-test", ["dummy/utils/date-time", "qunit"], function (_dateTime, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | date time');
  (0, _qunit.test)('padding works properly', function (assert) {
    var result = _dateTime.default.pad(3);

    assert.equal(result, '03');
  });
  (0, _qunit.test)('extractDate works properly', function (assert) {
    var result = _dateTime.default.extractDate('2017-09-30T03:30:00.000Z');

    assert.equal(result, '2017-09-30');
  });
  (0, _qunit.test)('extractTimeUptoMins works properly', function (assert) {
    var result = _dateTime.default.extractTimeUptoMins('2017-09-30T03:30:00.000Z');

    assert.equal(result, '03:30');
  });
  (0, _qunit.test)('getDateTimeString works properly', function (assert) {
    var result = _dateTime.default.getDateTimeString('2017-09-30', '03:30');

    assert.equal(result, '2017-09-30T03:30:00.000Z');
  });
});
define("dummy/tests/unit/utils/field-map-test", ["dummy/utils/field-map", "qunit"], function (_fieldMap, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | field map'); // Replace this with your real tests.

  (0, _qunit.test)('it works', function (assert) {
    var result = (0, _fieldMap.default)();
    assert.ok(result);
  });
});
define("dummy/tests/unit/utils/field-utils-test", ["dummy/utils/field-utils", "qunit"], function (_fieldUtils, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | field utils');
  (0, _qunit.test)('it works', function (assert) {
    var field = Ember.Object.create({
      name: 'first_name',
      label: 'First Name',
      position: 1
    });
    var fieldScopeMap = Ember.Object.create();
    var object = Ember.Object.create();

    var result = _fieldUtils.default.generatePropertyName([field, fieldScopeMap, object]);

    assert.ok(result);
  });
});
define("dummy/tests/unit/utils/time-test", ["dummy/utils/time", "qunit"], function (_time, _qunit) {
  "use strict";

  (0, _qunit.module)('Unit | Utility | time');
  (0, _qunit.test)('toMinutes works properly', function (assert) {
    var result = _time.default.toMinutes(3, 20);

    assert.equal(result, 200);
  });
  (0, _qunit.test)('toTimeFormat works properly', function (assert) {
    var result = _time.default.toTimeFormat('03:30');

    assert.equal(result, '03:30:00.000Z');
  });
  (0, _qunit.test)('toAMorPMFormat works properly', function (assert) {
    var result = _time.default.toAMorPMFormat('23:30');

    assert.equal(result, '11:30 PM');
  });
  (0, _qunit.test)('toTwentyFourHrFormat works properly', function (assert) {
    var result = _time.default.toTwentyFourHrFormat('11:30 PM');

    assert.equal(result, '23:30');
  });
  (0, _qunit.test)('generateTimeSeriesInRange works properly', function (assert) {
    var result = _time.default.generateTimeSeriesInRange(0, 120, 30, true);

    assert.equal(result.length, 4);
    assert.equal(result[0], '00:00');
    assert.equal(result[1], '00:30');
    assert.equal(result[2], '01:00');
    assert.equal(result[3], '01:30');
  });
});
define('dummy/config/environment', [], function() {
  var prefix = 'dummy';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

require('dummy/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;
//# sourceMappingURL=tests.map
