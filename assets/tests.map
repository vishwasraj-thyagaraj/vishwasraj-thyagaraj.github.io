{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/create-auto-complete-field.js","dummy/tests/helpers/create-checkbox-field.js","dummy/tests/helpers/create-checkbox-group-field.js","dummy/tests/helpers/create-date-field.js","dummy/tests/helpers/create-date-time-split-field.js","dummy/tests/helpers/create-dependent-dropdown-field.js","dummy/tests/helpers/create-email-field.js","dummy/tests/helpers/create-field.js","dummy/tests/helpers/create-formula-field.js","dummy/tests/helpers/create-group-field.js","dummy/tests/helpers/create-multi-select-dropdown-field.js","dummy/tests/helpers/create-number-field.js","dummy/tests/helpers/create-power-select-field.js","dummy/tests/helpers/create-radio-group-field.js","dummy/tests/helpers/create-static-rich-text-field.js","dummy/tests/helpers/create-text-field.js","dummy/tests/helpers/create-textarea-field.js","dummy/tests/helpers/create-url-field.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/ember-cli-clipboard.js","dummy/tests/helpers/ember-power-calendar.js","dummy/tests/helpers/ember-power-select.js","dummy/tests/helpers/ember-test-selectors.js","dummy/tests/helpers/field-map.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/render-form.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/string-helper-methods.js","dummy/tests/integration/components/dependent-dropdown/component-test.js","dummy/tests/integration/components/dynamic-fields-for/component-test.js","dummy/tests/integration/components/dynamic-form-for/component-test.js","dummy/tests/integration/components/fields-for/component-test.js","dummy/tests/integration/components/form-controls/auto-complete-multiple-with-create/component-test.js","dummy/tests/integration/components/form-controls/auto-complete/component-test.js","dummy/tests/integration/components/form-controls/date-field/component-test.js","dummy/tests/integration/components/form-controls/date-range-field/component-test.js","dummy/tests/integration/components/form-controls/date-time-split/component-test.js","dummy/tests/integration/components/form-controls/dependent-selects/power-select/component-test.js","dummy/tests/integration/components/form-controls/multi-select-dropdown/component-test.js","dummy/tests/integration/components/form-controls/power-select/component-test.js","dummy/tests/integration/components/form-controls/time-picker-field/component-test.js","dummy/tests/integration/components/form-errors/component-test.js","dummy/tests/integration/components/form-field/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/custom/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/default/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/default/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete/custom/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete/default/create/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/auto-complete/default/edit/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/allowClear/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/custom/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/default/component-test.js","dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/minSearchCharLength/component-test.js","dummy/tests/integration/components/form-fields/checkbox-field/Custom/Create/component-test.js","dummy/tests/integration/components/form-fields/checkbox-field/Custom/Edit/component-test.js","dummy/tests/integration/components/form-fields/checkbox-field/Default/Create/component-test.js","dummy/tests/integration/components/form-fields/checkbox-field/Default/Edit/component-test.js","dummy/tests/integration/components/form-fields/checkbox-group/custom/create/component-test.js","dummy/tests/integration/components/form-fields/checkbox-group/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/checkbox-group/default/create/component-test.js","dummy/tests/integration/components/form-fields/checkbox-group/default/edit/component-test.js","dummy/tests/integration/components/form-fields/checkbox-group/option/component-test.js","dummy/tests/integration/components/form-fields/date-field/component-test.js","dummy/tests/integration/components/form-fields/date-range-field/component-test.js","dummy/tests/integration/components/form-fields/date-time-split-field/component-test.js","dummy/tests/integration/components/form-fields/dependent-dropdown-field/component-test.js","dummy/tests/integration/components/form-fields/dependent-select/component-test.js","dummy/tests/integration/components/form-fields/dependent-selects/checkbox-field/component-test.js","dummy/tests/integration/components/form-fields/dependent-selects/power-select-field/component-test.js","dummy/tests/integration/components/form-fields/dependent-selects/power-select-field/prevent-resetting-of-child-fields/component-test.js","dummy/tests/integration/components/form-fields/dependent-selects/radio-group/component-test.js","dummy/tests/integration/components/form-fields/dependent-selects/radio-group/prevent-resetting-of-child-fields/component-test.js","dummy/tests/integration/components/form-fields/email-field/component-test.js","dummy/tests/integration/components/form-fields/formula-field/checkbox-field/custom/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/checkbox-field/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/formula-field/checkbox-field/default/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/checkbox-field/default/edit/component-test.js","dummy/tests/integration/components/form-fields/formula-field/class-name-bindings/component-test.js","dummy/tests/integration/components/form-fields/formula-field/fieldOptions/evalservRequestHeaders/component-test.js","dummy/tests/integration/components/form-fields/formula-field/fieldOptions/evaluateOnOperandDataUpdate/component-test.js","dummy/tests/integration/components/form-fields/formula-field/number-field/custom/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/number-field/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/formula-field/number-field/default/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/number-field/default/edit/component-test.js","dummy/tests/integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/edit/component-test.js","dummy/tests/integration/components/form-fields/formula-field/selectable-fields/radio-field/default/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/selectable-fields/radio-field/default/edit/component-test.js","dummy/tests/integration/components/form-fields/formula-field/text-field/custom/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/text-field/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/formula-field/text-field/default/create/component-test.js","dummy/tests/integration/components/form-fields/formula-field/text-field/default/edit/component-test.js","dummy/tests/integration/components/form-fields/group-field/component-test.js","dummy/tests/integration/components/form-fields/group-field/custom-palette/component-test.js","dummy/tests/integration/components/form-fields/group-field/field-view-toggle-button/create/component-test.js","dummy/tests/integration/components/form-fields/group-field/field-view-toggle-button/edit/component-test.js","dummy/tests/integration/components/form-fields/multi-select-dropdown-field/component-test.js","dummy/tests/integration/components/form-fields/number-field/component-test.js","dummy/tests/integration/components/form-fields/power-select-field/component-test.js","dummy/tests/integration/components/form-fields/radio-field/component-test.js","dummy/tests/integration/components/form-fields/radio-group/component-test.js","dummy/tests/integration/components/form-fields/radio-group/custom/create/component-test.js","dummy/tests/integration/components/form-fields/radio-group/custom/edit/component-test.js","dummy/tests/integration/components/form-fields/radio-group/default/create/component-test.js","dummy/tests/integration/components/form-fields/radio-group/default/edit/component-test.js","dummy/tests/integration/components/form-fields/select-field/component-test.js","dummy/tests/integration/components/form-fields/static-rich-text-field/component-test.js","dummy/tests/integration/components/form-fields/text-field/component-test.js","dummy/tests/integration/components/form-fields/textarea-field/component-test.js","dummy/tests/integration/components/form-fields/url-field/component-test.js","dummy/tests/integration/components/form-for/component-test.js","dummy/tests/integration/components/form-hint/component-test.js","dummy/tests/integration/helpers/date-field-format-date-test.js","dummy/tests/integration/metadata/field/structure_related/editable/editable-test.js","dummy/tests/integration/metadata/field/structure_related/label/label-test.js","dummy/tests/integration/metadata/field/structure_related/placeholder/placeholder-test.js","dummy/tests/integration/metadata/field/structure_related/required/required-test.js","dummy/tests/page-object.js","dummy/tests/pages/components/dynamic-fields-for.js","dummy/tests/pages/components/dynamic-form-for.js","dummy/tests/templates.template.lint-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/helpers/fserv-is-none-test.js","dummy/tests/unit/helpers/get-object-at-test.js","dummy/tests/unit/helpers/sort-fields-by-test.js","dummy/tests/unit/mixins/dependent-field-test.js","dummy/tests/unit/mixins/dependent-select-control-test.js","dummy/tests/unit/mixins/dependent-select-field-test.js","dummy/tests/unit/mixins/fetch-choices-test.js","dummy/tests/unit/mixins/form-control-test.js","dummy/tests/unit/models/choice-test.js","dummy/tests/unit/models/field-test.js","dummy/tests/unit/models/form-test.js","dummy/tests/unit/serializers/choice-test.js","dummy/tests/unit/serializers/field-test.js","dummy/tests/unit/services/dynamic-form/config-test.js","dummy/tests/unit/services/ember-form-for/config-test.js","dummy/tests/unit/utils/date-test.js","dummy/tests/unit/utils/date-time-test.js","dummy/tests/unit/utils/field-map-test.js","dummy/tests/unit/utils/field-utils-test.js","dummy/tests/unit/utils/time-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-cc/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/add-cc/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/code-snippet/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/code-snippet/component.js should pass ESLint\\n\\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n12:6 - Unexpected console statement. (no-console)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n14:6 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/fields/autocomplete-multiple-with-create/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/autocomplete-multiple-with-create/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/autocomplete-multiple/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/autocomplete-multiple/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/autocomplete-single-with-create/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/autocomplete-single-with-create/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/autocomplete-single/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/autocomplete-single/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/checkbox-field/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/checkbox-field/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/checkbox-group/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/checkbox-group/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/component-renderer/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/component-renderer/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/date-field/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/date-field/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/date-range-field/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/date-range-field/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/date-time-field/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/date-time-field/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/dependent-field-checkbox/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/dependent-field-checkbox/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/dependent-field-radio/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/dependent-field-radio/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/dependent-field-select/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/dependent-field-select/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/input-field/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/input-field/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/nested-field/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/nested-field/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/radio-group/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/radio-group/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/select-multiple/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/select-multiple/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/select-single/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/select-single/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/fields/textarea-field/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/fields/textarea-field/component.js should pass ESLint\\n\\n15:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n19:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('components/render-component/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/render-component/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/sample-form/component.js should pass ESLint\\n\\n34:8 - \\'timeZoneMap\\' is defined but never used. (no-unused-vars)\\n75:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n77:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n98:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n124:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n138:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n145:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n149:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n177:8 - \\'hljs\\' is not defined. (no-undef)\\n178:7 - \\'hljs\\' is not defined. (no-undef)\\n215:9 - \\'hljs\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/sample-form/fields/autocomplete-fields/multiple-with-create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/autocomplete-fields/multiple-with-create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/autocomplete-fields/multiple.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/autocomplete-fields/multiple.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/autocomplete-fields/single-with-create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/autocomplete-fields/single-with-create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/autocomplete-fields/single.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/autocomplete-fields/single.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/date-picker-fields/date-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/sample-form/fields/date-picker-fields/date-field.js should pass ESLint\\n\\n1:8 - \\'moment\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/sample-form/fields/date-picker-fields/date-range-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/date-picker-fields/date-range-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/date-picker-fields/date-time-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/date-picker-fields/date-time-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/date-picker-fields/time-picker-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/date-picker-fields/time-picker-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/dependent-fields/checkbox-dependent-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/dependent-fields/checkbox-dependent-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/dependent-fields/dropdown-dependent-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/dependent-fields/dropdown-dependent-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/dependent-fields/nested-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/dependent-fields/nested-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/dependent-fields/radio-dependent-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/dependent-fields/radio-dependent-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/normal-fields/checkbox-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/normal-fields/checkbox-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/normal-fields/checkbox-group-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/normal-fields/checkbox-group-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/normal-fields/input-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/normal-fields/input-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/normal-fields/radio-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/normal-fields/radio-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/normal-fields/textarea-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/normal-fields/textarea-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/select-fields/multiple.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/select-fields/multiple.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sample-form/fields/select-fields/single.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sample-form/fields/select-fields/single.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/autocomplete-fields/multiple-with-create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/autocomplete-fields/multiple-with-create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/autocomplete-fields/multiple.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/autocomplete-fields/multiple.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/autocomplete-fields/single-with-create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/autocomplete-fields/single-with-create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/autocomplete-fields/single.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/autocomplete-fields/single.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/date-picker-fields/date-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'constants/date-picker-fields/date-field.js should pass ESLint\\n\\n12:14 - \\'moment\\' is not defined. (no-undef)\\n13:14 - \\'moment\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('constants/date-picker-fields/date-range-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/date-picker-fields/date-range-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/date-picker-fields/date-time-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'constants/date-picker-fields/date-time-field.js should pass ESLint\\n\\n12:17 - \\'moment\\' is not defined. (no-undef)\\n13:15 - \\'moment\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('constants/dependent-fields/checkbox-dependent-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/dependent-fields/checkbox-dependent-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/dependent-fields/dropdown-dependent-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/dependent-fields/dropdown-dependent-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/dependent-fields/nested-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/dependent-fields/nested-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/dependent-fields/radio-dependent-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/dependent-fields/radio-dependent-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/normal-fields/checkbox-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/normal-fields/checkbox-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/normal-fields/checkbox-group-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/normal-fields/checkbox-group-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/normal-fields/input-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/normal-fields/input-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/normal-fields/radio-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/normal-fields/radio-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/normal-fields/textarea-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/normal-fields/textarea-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/render-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/render-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/select-fields/multiple.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/select-fields/multiple.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/select-fields/single.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/select-fields/single.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('constants/timezone.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'constants/timezone.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/date-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/date-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/contact.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/ember-form-for/config.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ember-form-for/config.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/helpers/create-auto-complete-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.autoComplete = autoComplete;\n\n  function autoComplete(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _autoComplete(testScope, options);\n\n    var schema = {\n      name: 'PinCode List',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _autoComplete(testScope, options) {\n    var field = {\n      id: 'pincode_id',\n      type: 'auto_complete',\n      label: 'Area Code',\n      name: 'country',\n      placeholder: 'Search...',\n      position: 1,\n      editable: true,\n      custom: false,\n      inputType: 'auto-complete',\n      fieldOptions: {},\n      fields: [],\n      link: 'url/search',\n      optionValuePath: 'id',\n      optionLabelPath: 'id'\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-checkbox-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.checkbox = checkbox;\n\n  function checkbox(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _checkbox(testScope, options);\n\n    var schema = {\n      name: 'Gender Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _checkbox(testScope, options) {\n    var field = {\n      id: 'gender_id',\n      type: 'checkbox',\n      label: 'Male ?',\n      hint: 'Enter_gender',\n      name: 'your_gender',\n      position: 1,\n      editable: true,\n      custom: false,\n      inputType: 'checkbox-field',\n      fieldOptions: {},\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-checkbox-group-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.checkboxGroup = checkboxGroup;\n\n  function checkboxGroup(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _checkboxGroup(testScope, options);\n\n    var schema = {\n      name: \"Programming Langugages\",\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _checkboxGroup(testScope, options) {\n    var field = {\n      id: \"known_programming_langugages_id\",\n      type: \"multi_select_checkbox\",\n      label: \"Known Programming Langugages\",\n      hint: \"select_intermediate_level_of_proficiency\",\n      name: \"known_programming_langugages\",\n      position: 1,\n      editable: true,\n      custom: false,\n      inputType: \"checkbox-group\",\n      fieldOptions: {},\n      fields: [],\n      optionLabelPath: \"value\",\n      optionValuePath: \"value\",\n      getChoices: [{\n        id: \"c_id\",\n        value: \"C\",\n        position: 1,\n        parentChoiceIds: null\n      }, {\n        id: \"java_id\",\n        value: \"Java\",\n        position: 2,\n        parentChoiceIds: null\n      }, {\n        id: \"go_id\",\n        value: \"Go\",\n        position: 3,\n        parentChoiceIds: null\n      }]\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-date-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.date = date;\n\n  function date(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _date(testScope, options);\n\n    var schema = {\n      name: 'DOB Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _date(testScope, options) {\n    var field = {\n      id: 'date_of_birth_id',\n      type: 'date_time',\n      label: 'Date of Birth',\n      name: 'DOB',\n      position: 1,\n      editable: true,\n      custom: false,\n      inputType: 'datetime-field',\n      fieldOptions: {\n        placeholder: {\n          date: '00/00/0000'\n        }\n      },\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-date-time-split-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.dateTimeSplit = dateTimeSplit;\n\n  function dateTimeSplit(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _dateTimeSplit(testScope, options);\n\n    var schema = {\n      name: 'DOB Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _dateTimeSplit(testScope, options) {\n    var field = {\n      id: 'date_of_birth_id',\n      type: 'date_time_split',\n      label: 'Date And Time of Birth',\n      name: 'DOB',\n      position: 1,\n      editable: true,\n      custom: false,\n      inputType: 'date-time-split-field',\n      fieldOptions: {\n        placeholder: {\n          date: '00/00/0000',\n          time: '00:00 AM'\n        }\n      },\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-dependent-dropdown-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.dependentDropdown = dependentDropdown;\n\n  function dependentDropdown(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _dependentDropdown(testScope, options);\n\n    var schema = {\n      name: 'Dependent Dropdown Test Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _dependentDropdown(testScope, options) {\n    var field = {\n      id: \"country_id\",\n      name: \"Country\",\n      label: \"Country\",\n      type: 'dependent_dropdown',\n      placeholder: 'Choose a Country',\n      position: 1,\n      editable: true,\n      custom: false,\n      getChoices: [{\n        id: \"usa_id\",\n        value: \"USA\",\n        position: 1,\n        parentChoiceIds: null\n      }, {\n        id: \"india_id\",\n        value: \"India\",\n        position: 2,\n        parentChoiceIds: null\n      }],\n      inputType: 'dependent-dropdown',\n      fieldOptions: {\n        dependent: true\n      },\n      optionValuePath: 'id',\n      optionLabelPath: 'value',\n      fields: [{\n        id: \"states_id\",\n        name: \"States\",\n        label: \"States\",\n        type: 'dependent_dropdown',\n        placeholder: 'Choose a State',\n        position: 1,\n        editable: true,\n        custom: false,\n        getChoices: [{\n          id: \"new_york_id\",\n          value: \"New York\",\n          position: 1,\n          parentChoiceIds: ['usa_id']\n        }, {\n          id: \"new_jersey_id\",\n          value: \"New Jersey\",\n          position: 3,\n          parentChoiceIds: ['usa_id']\n        }, {\n          id: \"punjab_id\",\n          value: \"Punjab\",\n          position: 2,\n          parentChoiceIds: ['india_id']\n        }, {\n          id: \"himachal_pradesh_id\",\n          value: \"Himachal Pradesh\",\n          position: 4,\n          parentChoiceIds: ['india_id']\n        }],\n        inputType: 'dependent-dropdown',\n        fieldOptions: {\n          dependent: true\n        },\n        fields: [],\n        optionValuePath: 'id',\n        optionLabelPath: 'value'\n      }]\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-email-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.email = email;\n\n  function email(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _email(testScope, options);\n\n    var schema = {\n      name: 'Email Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _email(testScope, options) {\n    var field = {\n      id: 'email_id',\n      type: 'email',\n      label: 'Email Address',\n      hint: 'personal_email',\n      name: 'Email',\n      position: 1,\n      editable: true,\n      custom: false,\n      placeholder: 'abc@xyz.com',\n      inputType: 'email-field',\n      fieldOptions: {},\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-field\", [\"exports\", \"dummy/tests/helpers/create-auto-complete-field\", \"dummy/tests/helpers/create-date-field\", \"dummy/tests/helpers/create-date-time-split-field\", \"dummy/tests/helpers/create-email-field\", \"dummy/tests/helpers/create-number-field\", \"dummy/tests/helpers/create-text-field\", \"dummy/tests/helpers/create-textarea-field\", \"dummy/tests/helpers/create-url-field\", \"dummy/tests/helpers/create-dependent-dropdown-field\", \"dummy/tests/helpers/create-group-field\", \"dummy/tests/helpers/create-checkbox-field\", \"dummy/tests/helpers/create-multi-select-dropdown-field\", \"dummy/tests/helpers/create-power-select-field\", \"dummy/tests/helpers/create-radio-group-field\", \"dummy/tests/helpers/create-static-rich-text-field\", \"dummy/tests/helpers/render-form\"], function (_exports, _createAutoCompleteField, _createDateField, _createDateTimeSplitField, _createEmailField, _createNumberField, _createTextField, _createTextareaField, _createUrlField, _createDependentDropdownField, _createGroupField, _createCheckboxField, _createMultiSelectDropdownField, _createPowerSelectField, _createRadioGroupField, _createStaticRichTextField, _renderForm) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"autoComplete\", {\n    enumerable: true,\n    get: function get() {\n      return _createAutoCompleteField.autoComplete;\n    }\n  });\n  Object.defineProperty(_exports, \"date\", {\n    enumerable: true,\n    get: function get() {\n      return _createDateField.date;\n    }\n  });\n  Object.defineProperty(_exports, \"dateTimeSplit\", {\n    enumerable: true,\n    get: function get() {\n      return _createDateTimeSplitField.dateTimeSplit;\n    }\n  });\n  Object.defineProperty(_exports, \"email\", {\n    enumerable: true,\n    get: function get() {\n      return _createEmailField.email;\n    }\n  });\n  Object.defineProperty(_exports, \"number\", {\n    enumerable: true,\n    get: function get() {\n      return _createNumberField.number;\n    }\n  });\n  Object.defineProperty(_exports, \"text\", {\n    enumerable: true,\n    get: function get() {\n      return _createTextField.text;\n    }\n  });\n  Object.defineProperty(_exports, \"textarea\", {\n    enumerable: true,\n    get: function get() {\n      return _createTextareaField.textarea;\n    }\n  });\n  Object.defineProperty(_exports, \"url\", {\n    enumerable: true,\n    get: function get() {\n      return _createUrlField.url;\n    }\n  });\n  Object.defineProperty(_exports, \"dependentDropdown\", {\n    enumerable: true,\n    get: function get() {\n      return _createDependentDropdownField.dependentDropdown;\n    }\n  });\n  Object.defineProperty(_exports, \"group\", {\n    enumerable: true,\n    get: function get() {\n      return _createGroupField.group;\n    }\n  });\n  Object.defineProperty(_exports, \"checkbox\", {\n    enumerable: true,\n    get: function get() {\n      return _createCheckboxField.checkbox;\n    }\n  });\n  Object.defineProperty(_exports, \"multiSelectDropdown\", {\n    enumerable: true,\n    get: function get() {\n      return _createMultiSelectDropdownField.multiSelectDropdown;\n    }\n  });\n  Object.defineProperty(_exports, \"dropdown\", {\n    enumerable: true,\n    get: function get() {\n      return _createPowerSelectField.dropdown;\n    }\n  });\n  Object.defineProperty(_exports, \"radioGroup\", {\n    enumerable: true,\n    get: function get() {\n      return _createRadioGroupField.radioGroup;\n    }\n  });\n  Object.defineProperty(_exports, \"staticRichText\", {\n    enumerable: true,\n    get: function get() {\n      return _createStaticRichTextField.staticRichText;\n    }\n  });\n  Object.defineProperty(_exports, \"renderForm\", {\n    enumerable: true,\n    get: function get() {\n      return _renderForm.renderForm;\n    }\n  });\n});","define(\"dummy/tests/helpers/create-formula-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.createFormulaField = createFormulaField;\n  _exports.default = void 0;\n\n  function createFormulaField(testScope, type) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var model = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    testScope.model = model;\n\n    if (type === 'number-field') {\n      return _numberFormulaField(testScope, options);\n    }\n\n    if (type === 'text-field') {\n      return _textFormulaField(testScope, options);\n    }\n\n    if (type === 'checkbox-field') {\n      return _checkboxFormulaField(testScope, options);\n    }\n\n    if (type === 'radio-field') {\n      return _radioFormulaField(testScope, options);\n    }\n\n    if (type === 'power-select-field') {\n      return _powerSelectFormulaField(testScope, options);\n    }\n  }\n\n  function _getFieldMap() {\n    return {\n      section: {\n        single: 'nested-section',\n        dependent: 'nested-section'\n      },\n      dropdown: {\n        single: 'power-select-field',\n        dependent: 'power-select-dependent-field'\n      },\n      dependent_dropdown: {\n        single: 'dependent-dropdown',\n        dependent: 'dependent-dropdown'\n      },\n      text: {\n        single: 'text-field',\n        dependent: 'text-field'\n      },\n      checkbox: {\n        single: 'checkbox-field',\n        dependent: 'checkbox-dependent-field'\n      },\n      number: {\n        single: 'number-field',\n        dependent: 'number-field'\n      },\n      paragraph: {\n        single: 'textarea-field',\n        dependent: 'textarea-field'\n      },\n      radio: {\n        single: 'radio-field',\n        dependent: 'radio-dependent-field'\n      },\n      date: {\n        single: 'datetime-field',\n        dependent: 'datetime-field'\n      },\n      date_time: {\n        single: 'datetime-field',\n        dependent: 'datetime-field'\n      },\n      auto_complete: {\n        single: 'auto-complete',\n        dependent: 'auto-complete'\n      },\n      email: {\n        single: 'email-field',\n        dependent: 'email-field'\n      },\n      phone_number: {\n        single: 'text-field',\n        dependent: 'text-field'\n      },\n      url: {\n        single: 'url-field',\n        dependent: 'url-field'\n      },\n      decimal: {\n        single: 'number-field',\n        dependent: 'number-field'\n      },\n      multi_select_dropdown: {\n        single: 'multi-select-dropdown-field',\n        dependent: 'multi-select-dropdown-field'\n      },\n      date_time_split: {\n        single: 'date-time-split-field',\n        dependent: 'date-time-split-field'\n      },\n      group_field: {\n        single: 'group-field',\n        dependent: 'group-field'\n      },\n      formula: {\n        single: 'formula-field',\n        dependent: 'formula-field'\n      }\n    };\n  }\n\n  function _numberFormulaField(testScope, options) {\n    testScope.schema = {\n      name: 'Number Formula Form',\n      fields: [{\n        id: 'revenue_from_product_a_id',\n        parent: null,\n        type: 'number',\n        label: 'Product A',\n        name: 'revenue_from_product_a',\n        position: 1,\n        editable: true,\n        custom: false,\n        inputType: 'number-field',\n        evalservType: 'number',\n        fieldOptions: {},\n        fields: []\n      }, {\n        id: 'revenue_from_product_b_id',\n        parent: null,\n        type: 'number',\n        label: 'Product B',\n        name: 'revenue_from_product_b',\n        position: 2,\n        editable: true,\n        custom: false,\n        inputType: 'number-field',\n        evalservType: 'number',\n        fieldOptions: {},\n        fields: []\n      }, {\n        id: 'total_revenue_id',\n        parent: null,\n        type: 'number',\n        label: 'total revenue',\n        name: 'total_revenue',\n        position: 3,\n        editable: false,\n        custom: false,\n        inputType: 'formula-field',\n        evalservType: 'number',\n        fieldOptions: {\n          formula: true,\n          expr: \"#{revenue_from_product_a}+#{revenue_from_product_b}\",\n          field_value_path: 'name',\n          expression_field_ids: 'revenue_from_product_a_id,revenue_from_product_b_id',\n          evaluate_on_operand_data_update: true\n        },\n        fields: [],\n        fieldMap: _getFieldMap()\n      }]\n    };\n    var i = 0;\n\n    for (var _i = 0, _Object$entries = Object.entries(options); _i < _Object$entries.length; _i++) {\n      var option = _Object$entries[_i];\n      Object.assign(testScope.schema.fields[i], option);\n      i += 1;\n    }\n  }\n\n  function _textFormulaField(testScope) {\n    testScope.schema = {\n      name: 'Text Formula Form',\n      fields: [{\n        id: 'first_name_id',\n        parent: null,\n        type: 'text',\n        label: 'First Name',\n        name: 'first_name',\n        position: 1,\n        editable: true,\n        custom: false,\n        inputType: 'text-field',\n        evalservType: 'text',\n        fieldOptions: {},\n        fields: []\n      }, {\n        id: 'last_name_id',\n        parent: null,\n        type: 'text',\n        label: 'Last Name',\n        name: 'last_name',\n        position: 2,\n        editable: true,\n        custom: false,\n        inputType: 'text-field',\n        evalservType: 'text',\n        fieldOptions: {},\n        fields: []\n      }, {\n        id: 'full_name_id',\n        parent: null,\n        type: 'text',\n        label: 'Full Name',\n        name: 'full_name',\n        position: 3,\n        editable: false,\n        custom: false,\n        inputType: 'formula-field',\n        evalservType: 'text',\n        fieldOptions: {\n          formula: true,\n          expr: \"#{first_name}+#{last_name}\",\n          field_value_path: 'name',\n          expression_field_ids: 'first_name_id,last_name_id',\n          evaluate_on_operand_data_update: true\n        },\n        fields: [],\n        fieldMap: _getFieldMap()\n      }]\n    };\n  }\n\n  function _checkboxFormulaField(testScope) {\n    testScope.schema = {\n      name: 'Checkbox Formula Form',\n      fields: [{\n        id: 'age_id',\n        parent: null,\n        type: 'checkbox',\n        label: 'Above 18',\n        name: 'age',\n        position: 1,\n        editable: true,\n        custom: false,\n        inputType: 'checkbox-field',\n        evalservType: 'boolean',\n        fieldOptions: {},\n        fields: []\n      }, {\n        id: 'licence_id',\n        parent: null,\n        type: 'checkbox',\n        label: 'Have a licence ?',\n        name: 'licence',\n        position: 2,\n        editable: true,\n        custom: false,\n        inputType: 'checkbox-field',\n        evalservType: 'boolean',\n        fieldOptions: {},\n        fields: []\n      }, {\n        id: 'drive_id',\n        parent: null,\n        type: 'checkbox',\n        label: 'Can drive',\n        name: 'drive',\n        position: 3,\n        editable: false,\n        custom: false,\n        inputType: 'formula-field',\n        evalservType: 'boolean',\n        fieldOptions: {\n          formula: true,\n          expr: \"#{age}&&#{licence}\",\n          field_value_path: 'name',\n          expression_field_ids: 'age_id,licence_id',\n          evaluate_on_operand_data_update: true\n        },\n        fields: [],\n        fieldMap: _getFieldMap()\n      }]\n    };\n  }\n\n  function _radioFormulaField(testScope) {\n    testScope.schema = {\n      name: 'Radio Formula Form',\n      fields: [{\n        id: 'licence_id',\n        type: 'radio',\n        label: 'Do you have a driving licence ?',\n        name: 'licence',\n        position: 1,\n        optionValuePath: '',\n        optionLabelPath: 'value',\n        editable: true,\n        custom: false,\n        inputType: 'radio-field',\n        fieldOptions: {},\n        evalservType: 'text',\n        choices: Ember.A([{\n          id: \"can_drive_id\",\n          value: \"Yes\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"cannot_drive_id\",\n          value: \"No\",\n          position: 2,\n          parentChoiceIds: null\n        }]),\n        getChoices: [{\n          id: \"can_drive_id\",\n          value: \"Yes\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"cannot_drive_id\",\n          value: \"No\",\n          position: 2,\n          parentChoiceIds: null\n        }],\n        fields: []\n      }, {\n        id: 'age_id',\n        type: 'radio',\n        label: 'Are you older than 18 years ?',\n        name: 'age',\n        position: 2,\n        optionValuePath: 'value',\n        optionLabelPath: 'value',\n        editable: true,\n        custom: false,\n        inputType: 'radio-field',\n        evalservType: 'text',\n        fieldOptions: {},\n        choices: Ember.A([{\n          id: \"above_18_id\",\n          value: \"Yes\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"below_18_id\",\n          value: \"No\",\n          position: 2,\n          parentChoiceIds: null\n        }]),\n        getChoices: [{\n          id: \"above_18_id\",\n          value: \"Yes\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"below_18_id\",\n          value: \"No\",\n          position: 2,\n          parentChoiceIds: null\n        }],\n        fields: []\n      }, {\n        id: 'drive_id',\n        type: 'radio',\n        label: 'Can drive',\n        name: 'drive',\n        position: 3,\n        optionValuePath: 'value',\n        optionLabelPath: 'value',\n        editable: false,\n        custom: false,\n        inputType: 'formula-field',\n        evalservType: 'boolean',\n        fields: [],\n        fieldMap: _getFieldMap(),\n        fieldOptions: {\n          formula: true,\n          expr: \"((#{licence} == 'Yes') && (#{age} == 'Yes'))\",\n          field_value_path: 'name',\n          expression_field_ids: 'age_id,licence_id',\n          evaluate_on_operand_data_update: true\n        },\n        choices: Ember.A([{\n          id: \"true_id\",\n          value: true,\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"false_id\",\n          value: false,\n          position: 2,\n          parentChoiceIds: null\n        }]),\n        getChoices: [{\n          id: \"true_id\",\n          value: true,\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"false_id\",\n          value: false,\n          position: 2,\n          parentChoiceIds: null\n        }]\n      }]\n    };\n  }\n\n  function _powerSelectFormulaField(testScope) {\n    testScope.schema = {\n      name: 'PowerSelect Formula Form',\n      fields: [{\n        id: 'country_id',\n        type: 'dropdown',\n        label: 'Country',\n        name: 'country',\n        position: 1,\n        optionValuePath: '',\n        optionLabelPath: 'value',\n        editable: true,\n        custom: false,\n        inputType: 'power-select-field',\n        fieldOptions: {},\n        evalservType: 'text',\n        choices: Ember.A([{\n          id: \"india_id\",\n          value: \"INDIA\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"china_id\",\n          value: \"CHINA\",\n          position: 2,\n          parentChoiceIds: null\n        }]),\n        getChoices: [{\n          id: \"india_id\",\n          value: \"INDIA\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"china_id\",\n          value: \"CHINA\",\n          position: 2,\n          parentChoiceIds: null\n        }],\n        fields: []\n      }, {\n        id: 'state_id',\n        type: 'dropdown',\n        label: 'State',\n        name: 'state',\n        position: 1,\n        optionValuePath: 'value',\n        optionLabelPath: 'value',\n        editable: true,\n        custom: false,\n        inputType: 'power-select-field',\n        fieldOptions: {},\n        evalservType: 'text',\n        choices: Ember.A([{\n          id: \"kerala_id\",\n          value: \"KERALA\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"tamil_nadu_id\",\n          value: \"TAMIL NADU\",\n          position: 2,\n          parentChoiceIds: null\n        }]),\n        getChoices: [{\n          id: \"kerala_id\",\n          value: \"KERALA\",\n          position: 1,\n          parentChoiceIds: null\n        }, {\n          id: \"tamil_nadu_id\",\n          value: \"TAMIL NADU\",\n          position: 2,\n          parentChoiceIds: null\n        }],\n        fields: []\n      }, {\n        id: 'address_id',\n        type: 'text',\n        label: 'Address',\n        name: 'address',\n        position: 3,\n        optionValuePath: 'value',\n        optionLabelPath: 'value',\n        editable: false,\n        custom: false,\n        inputType: 'formula-field',\n        evalservType: 'text',\n        fields: [],\n        fieldMap: _getFieldMap(),\n        fieldOptions: {\n          formula: true,\n          expr: \"concat((concat(#{country}, ' ')), #{state})\",\n          field_value_path: 'name',\n          expression_field_ids: 'country_id,state_id',\n          evaluate_on_operand_data_update: true\n        }\n      }]\n    };\n  }\n\n  var _default = Ember.Helper.helper(createFormulaField);\n\n  _exports.default = _default;\n});","define(\"dummy/tests/helpers/create-group-field\", [\"exports\", \"dummy/tests/helpers/field-map\"], function (_exports, _fieldMap) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.group = group;\n\n  function group(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _group(testScope, options);\n\n    var schema = {\n      name: 'Email Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _group(testScope, options) {\n    var field = {\n      id: 'email_id',\n      type: 'group_field',\n      label: 'Email Address',\n      name: 'Email',\n      position: 1,\n      editable: true,\n      custom: false,\n      placeholder: 'groupmail@xyz.com',\n      inputType: 'group-field',\n      fieldOptions: {\n        group_type: 'email',\n        max_items: 3\n      },\n      fields: []\n    };\n    field.fieldMap = (0, _fieldMap.default)();\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-multi-select-dropdown-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.multiSelectDropdown = multiSelectDropdown;\n\n  function multiSelectDropdown(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _multiSelectDropdown(testScope, options);\n\n    var schema = {\n      name: 'Known Programming Langugages',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _multiSelectDropdown(testScope, options) {\n    var field = {\n      id: 'langugages_id',\n      parent: null,\n      type: 'multi_select_dropdown',\n      label: 'Known Programming Langugages',\n      name: 'langugages',\n      position: 1,\n      editable: true,\n      custom: false,\n      placeholder: 'select known programming langugages',\n      getChoices: [{\n        id: 'c_id',\n        name: 'C',\n        position: 1\n      }, {\n        id: 'java_id',\n        name: 'Java',\n        position: 2\n      }, {\n        id: 'python_id',\n        name: 'Ruby on Rails',\n        position: 3\n      }],\n      inputType: 'multi-select-dropdown-field',\n      fields: [],\n      optionValuePath: 'id',\n      optionLabelPath: 'name'\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-number-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.number = number;\n\n  function number(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _number(testScope, options);\n\n    var schema = {\n      name: 'Income Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _number(testScope, options) {\n    var field = {\n      id: 'income_id',\n      type: 'number',\n      label: 'Net Income',\n      name: 'income',\n      hint: 'enter_annual_income',\n      position: 1,\n      editable: true,\n      custom: false,\n      placeholder: \"income in '\\u20B9'\",\n      inputType: 'number-field',\n      fieldOptions: {},\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-power-select-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.dropdown = dropdown;\n\n  function dropdown(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _dropdown(testScope, options);\n\n    var schema = {\n      name: 'States',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _dropdown(testScope, options) {\n    var field = {\n      id: 'states_id',\n      type: 'dropdown',\n      label: 'Indian states',\n      name: 'states',\n      position: 1,\n      optionValuePath: 'id',\n      optionLabelPath: 'value',\n      editable: true,\n      custom: false,\n      placeholder: \"Select State of Residance\",\n      inputType: 'power-select-field',\n      fieldOptions: {},\n      getChoices: [{\n        id: \"kerala_id\",\n        value: \"Kerala\",\n        position: 1,\n        parentChoiceIds: null\n      }, {\n        id: \"tamil_nadu_id\",\n        value: \"Tamil Nadu\",\n        position: 2,\n        parentChoiceIds: null\n      }, {\n        id: \"karnataka_id\",\n        value: \"Karnataka\",\n        position: 3,\n        parentChoiceIds: null\n      }],\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-radio-group-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.radioGroup = radioGroup;\n\n  function radioGroup(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _radioGroup(testScope, options);\n\n    var schema = {\n      name: 'Color Picker',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _radioGroup(testScope, options) {\n    var field = {\n      id: 'favourite_color_id',\n      type: 'radio',\n      label: 'Pick your favourite color',\n      hint: 'most_favourite_color',\n      name: 'colors',\n      position: 1,\n      optionValuePath: 'value',\n      optionLabelPath: 'value',\n      editable: true,\n      custom: false,\n      inputType: 'radio-field',\n      fieldOptions: {},\n      getChoices: [{\n        id: \"red_id\",\n        value: \"Red\",\n        hexValue: \"#FF0000\",\n        position: 1,\n        parentChoiceIds: null\n      }, {\n        id: \"green_id\",\n        value: \"Green\",\n        hexValue: \"#00FF00\",\n        position: 2,\n        parentChoiceIds: null\n      }, {\n        id: \"blue_id\",\n        value: \"Blue\",\n        hexValue: \"#0000FF\",\n        position: 3,\n        parentChoiceIds: null\n      }],\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-static-rich-text-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.staticRichText = staticRichText;\n\n  function staticRichText(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _staticRichText(testScope, options);\n\n    var schema = {\n      name: 'staticRichText Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _staticRichText(testScope, options) {\n    var field = {\n      id: \"1729\",\n      name: \"guidelines\",\n      label: \"\",\n      type: \"static_rich_text\",\n      custom: false,\n      visible: true,\n      inputType: \"static-rich-text-field\",\n      position: 1,\n      deleted: false,\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-text-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.text = text;\n\n  function text(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _text(testScope, options);\n\n    var schema = {\n      name: 'Name Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _text(testScope, options) {\n    var field = {\n      id: 'name_id',\n      type: 'text',\n      label: 'First Name',\n      hint: 'enter_in_captial_letters',\n      name: 'name',\n      position: 1,\n      editable: true,\n      custom: false,\n      placeholder: \"FirstName\",\n      inputType: 'text-field',\n      fieldOptions: {},\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-textarea-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.textarea = textarea;\n\n  function textarea(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _textarea(testScope, options);\n\n    var schema = {\n      name: 'Movie Review Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _textarea(testScope, options) {\n    var field = {\n      id: 'review_id',\n      type: 'paragraph',\n      label: 'Your review',\n      hint: 'movie_review',\n      name: 'review',\n      position: 1,\n      editable: true,\n      custom: false,\n      placeholder: \"How was the movie\",\n      inputType: 'textarea-field',\n      fieldOptions: {},\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/create-url-field\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.url = url;\n\n  function url(testScope) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var model = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _url(testScope, options);\n\n    var schema = {\n      name: 'Url Form',\n      fields: [field]\n    };\n    testScope.schema = schema;\n    testScope.model = model;\n  }\n\n  function _url(testScope, options) {\n    var field = {\n      id: 'url_id',\n      type: 'url',\n      label: 'URL to validate',\n      hint: \"valid_url\",\n      name: 'url',\n      position: 1,\n      editable: true,\n      custom: false,\n      placeholder: \"http://www.domain.com\",\n      inputType: 'url-field',\n      fieldOptions: {},\n      fields: []\n    };\n    Object.assign(field, options);\n    return field;\n  }\n});","define(\"dummy/tests/helpers/destroy-app\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = destroyApp;\n\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define(\"dummy/tests/helpers/ember-cli-clipboard\", [\"exports\", \"ember-cli-clipboard/test-support\"], function (_exports, _testSupport) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.triggerSuccess = triggerSuccess;\n  _exports.triggerError = triggerError;\n  _exports.default = _default;\n\n  var getOwnerFromContext = function getOwnerFromContext(c) {\n    return c.container || c.owner;\n  };\n  /* === Legacy Integration Test Helpers === */\n\n  /**\n   * Fires `success` action for an instance of a copy-button component\n   * @function triggerSuccess\n   * @param {Object} context - integration test’s this context\n   * @param {String} selector - css selector of the copy-button instance\n   * @returns {Void}\n   */\n\n\n  function triggerSuccess(context, selector) {\n    var owner = getOwnerFromContext(context);\n    (0, _testSupport._fireComponentAction)(owner, selector, 'success');\n  }\n  /**\n   * Fires `error` action for an instance of a copy-button component\n   * @function triggerError\n   * @param {Object} context - integration test’s this context\n   * @param {String} selector - css selector of the copy-button instance\n   * @returns {Void}\n   */\n\n\n  function triggerError(context, selector) {\n    var owner = getOwnerFromContext(context);\n    (0, _testSupport._fireComponentAction)(owner, selector, 'error');\n  }\n  /* === Register Legacy Acceptance Test Helpers === */\n\n\n  function _default() {\n    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector) {\n      var owner = app.__container__;\n      (0, _testSupport._fireComponentAction)(owner, selector, 'success');\n    });\n    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector) {\n      var owner = app.__container__;\n      (0, _testSupport._fireComponentAction)(owner, selector, 'error');\n    });\n  }\n});","define(\"dummy/tests/helpers/ember-power-calendar\", [\"exports\", \"ember-power-calendar/test-support\"], function (_exports, _testSupport) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  function _default() {\n    Ember.Test.registerAsyncHelper('calendarCenter', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(app, selector, newCenter) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", (0, _testSupport.calendarCenter)(selector, newCenter));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    Ember.Test.registerAsyncHelper('calendarSelect', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(app, selector, selected) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", (0, _testSupport.calendarSelect)(selector, selected));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x4, _x5, _x6) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n});","define(\"dummy/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate(\"DEPRECATED `import { \".concat(name, \" } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { \").concat(name, \" } from 'ember-power-select/test-support/helpers';`\"), false, {\n        until: '1.11.0',\n        id: \"ember-power-select-test-support-\".concat(name)\n      }));\n      return fn.apply(void 0, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"dummy/tests/helpers/ember-test-selectors\", [\"exports\", \"ember-test-selectors\"], function (_exports, _emberTestSelectors) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var deprecate = Ember.deprecate;\n  var message = 'Importing testSelector() from \"<appname>/tests/helpers/ember-test-selectors\" is deprecated. ' + 'Please import testSelector() from \"ember-test-selectors\" instead.';\n  deprecate(message, false, {\n    id: 'ember-test-selectors.test-selector-import',\n    until: '0.2.0',\n    url: 'https://github.com/simplabs/ember-test-selectors#usage'\n  });\n  var _default = _emberTestSelectors.default;\n  _exports.default = _default;\n});","define(\"dummy/tests/helpers/field-map\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = fieldMap;\n\n  function fieldMap() {\n    return {\n      section: {\n        single: 'nested-section',\n        dependent: 'nested-section'\n      },\n      dropdown: {\n        single: 'power-select-field',\n        dependent: 'power-select-dependent-field'\n      },\n      dependent_dropdown: {\n        single: 'dependent-dropdown',\n        dependent: 'dependent-dropdown'\n      },\n      text: {\n        single: 'text-field',\n        dependent: 'text-field'\n      },\n      checkbox: {\n        single: 'checkbox-field',\n        dependent: 'checkbox-dependent-field'\n      },\n      number: {\n        single: 'number-field',\n        dependent: 'number-field'\n      },\n      paragraph: {\n        single: 'textarea-field',\n        dependent: 'textarea-field'\n      },\n      radio: {\n        single: 'radio-field',\n        dependent: 'radio-dependent-field'\n      },\n      date: {\n        single: 'datetime-field',\n        dependent: 'datetime-field'\n      },\n      date_time: {\n        single: 'datetime-field',\n        dependent: 'datetime-field'\n      },\n      auto_complete: {\n        single: 'auto-complete',\n        dependent: 'auto-complete'\n      },\n      email: {\n        single: 'email-field',\n        dependent: 'email-field'\n      },\n      phone_number: {\n        single: 'text-field',\n        dependent: 'text-field'\n      },\n      url: {\n        single: 'url-field',\n        dependent: 'url-field'\n      },\n      decimal: {\n        single: 'number-field',\n        dependent: 'number-field'\n      },\n      multi_select_dropdown: {\n        single: 'multi-select-dropdown-field',\n        dependent: 'multi-select-dropdown-field'\n      },\n      date_time_split: {\n        single: 'date-time-split-field',\n        dependent: 'date-time-split-field'\n      },\n      group_field: {\n        single: 'group-field',\n        dependent: 'group-field'\n      },\n      formula: {\n        single: 'formula-field',\n        dependent: 'formula-field'\n      },\n      multi_select_checkbox: {\n        single: 'checkbox-group',\n        dependent: 'checkbox-group'\n      },\n      static_rich_text: {\n        single: 'static-rich-text-field',\n        dependent: 'static-rich-text-field'\n      },\n      date_range: {\n        single: 'date-range-field',\n        dependent: 'date-range-field'\n      }\n    };\n  }\n});","define(\"dummy/tests/helpers/module-for-acceptance\", [\"exports\", \"qunit\", \"dummy/tests/helpers/start-app\", \"dummy/tests/helpers/destroy-app\"], function (_exports, _qunit, _startApp, _destroyApp) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function _default(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  }\n});","define(\"dummy/tests/helpers/render-form\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.renderForm = renderForm;\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  function renderForm() {\n    return _renderForm.apply(this, arguments);\n  }\n\n  function _renderForm() {\n    _renderForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                \"id\": \"LrqDkHYb\",\n                \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n                \"meta\": {}\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _renderForm.apply(this, arguments);\n  }\n});","define(\"dummy/tests/helpers/start-app\", [\"exports\", \"dummy/app\", \"dummy/config/environment\"], function (_exports, _app, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = startApp;\n\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define(\"dummy/tests/helpers/string-helper-methods\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.getTextWithoutSpaces = getTextWithoutSpaces;\n\n  function getTextWithoutSpaces(text) {\n    return text.replace(/\\s/g, '');\n  }\n});","define(\"dummy/tests/integration/components/dependent-dropdown/component-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | dependent dropdown', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n  });\n});","define(\"dummy/tests/integration/components/dynamic-fields-for/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/pages/components/dynamic-fields-for\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, _dynamicFieldsFor, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | dynamic fields for', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Nested Field is rendered as a child of a parent id 1', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  object: {\n                    'name': 'Nested field name'\n                  },\n                  schema: {\n                    parent: '1',\n                    label: 'Field 1'\n                  },\n                  propertyName: 'name'\n                });\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"elVQVouZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"dynamic-fields-for\\\",null,[[\\\"object\\\",\\\"schema\\\",\\\"propertyName\\\"],[[20,[\\\"object\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"propertyName\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFieldsFor.default.sectionTitle).textContent.trim(), 'Field 1', 'Header title is set properly');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Nested Field is rendered as a parent itself', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  object: {\n                    'name': 'Nested field name'\n                  },\n                  schema: {\n                    parent: null,\n                    label: 'Field 1'\n                  },\n                  propertyName: 'name'\n                });\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"elVQVouZ\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"dynamic-fields-for\\\",null,[[\\\"object\\\",\\\"schema\\\",\\\"propertyName\\\"],[[20,[\\\"object\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"propertyName\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFieldsFor.default.sectionTitle).textContent.trim(), 'Field 1', 'Header title is set properly');\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Default field: \\'propertyName\\' is computed properly when \\'fieldClass\\' meta is blank', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  model: {\n                    customField: {}\n                  },\n                  schema: {\n                    name: 'Some Form',\n                    fields: [{\n                      parent: null,\n                      label: 'First Name',\n                      name: 'first_name',\n                      type: 'text',\n                      inputType: 'text-field',\n                      custom: false,\n                      fields: []\n                    }]\n                  }\n                });\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"firstName\"] input'), 'Mithun');\n                assert.equal(Ember.get(this, 'model.firstName'), 'Mithun', 'Data is present inside \\'firstName\\' property');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Default field: \\'propertyName\\' is computed properly when \\'fieldClass\\' meta is present', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  model: {\n                    customField: {}\n                  },\n                  schema: {\n                    name: 'Some Form',\n                    fields: [{\n                      parent: null,\n                      label: 'First Name',\n                      name: 'first_name',\n                      type: 'text',\n                      inputType: 'text-field',\n                      custom: false,\n                      fieldClass: 'details',\n                      fields: []\n                    }]\n                  }\n                });\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"details.firstName\"] input'), 'Mithun');\n                assert.equal(Ember.get(this, 'model.details.firstName'), 'Mithun', 'Data is present inside \\'details.firstName\\' property');\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Default field: \\'propertyName\\' is computed properly when app overrides \\'fieldClass\\' meta using \\'fieldScopeMap\\'', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  fieldScopeMap: {\n                    details: 'apps_scope'\n                  },\n                  model: {\n                    customField: {}\n                  },\n                  schema: {\n                    name: 'Some Form',\n                    fields: [{\n                      parent: null,\n                      label: 'First Name',\n                      name: 'first_name',\n                      type: 'text',\n                      inputType: 'text-field',\n                      custom: false,\n                      fieldClass: 'details',\n                      fields: []\n                    }]\n                  }\n                });\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"nR6sAdUb\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldScopeMap\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"fieldScopeMap\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"apps_scope.firstName\"] input'), 'Mithun');\n                assert.equal(Ember.get(this, 'model.apps_scope.firstName'), 'Mithun', 'Data is present inside \\'apps_scope.firstName\\' property');\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Default field: \\'propertyName\\' is computed properly for fields inside sections', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  fieldScopeMap: {\n                    details: 'apps_scope'\n                  },\n                  model: {\n                    customField: {}\n                  },\n                  schema: {\n                    name: 'Some Form',\n                    fields: [{\n                      parent: null,\n                      label: 'Section',\n                      name: 'section',\n                      type: 'section',\n                      inputType: 'nested-section',\n                      fieldClass: 'my-section',\n                      fields: [{\n                        parent: null,\n                        label: 'First Name',\n                        name: 'first_name',\n                        type: 'text',\n                        inputType: 'text-field',\n                        custom: false,\n                        fieldClass: 'details',\n                        fields: []\n                      }]\n                    }]\n                  }\n                });\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"nR6sAdUb\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldScopeMap\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"fieldScopeMap\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"apps_scope.firstName\"] input'), 'Mithun');\n                assert.equal(Ember.get(this, 'model.apps_scope.firstName'), 'Mithun', 'Data is present inside \\'apps_scope.firstName\\' property');\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Custom field: \\'propertyName\\' is computed properly', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  model: {\n                    customField: {}\n                  },\n                  schema: {\n                    name: 'Some Form',\n                    fields: [{\n                      parent: null,\n                      label: 'First Name',\n                      name: 'first_name',\n                      type: 'text',\n                      inputType: 'text-field',\n                      custom: true,\n                      fieldClass: 'details',\n                      fields: []\n                    }]\n                  }\n                });\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.first_name\"] input'), 'Mithun');\n                assert.equal(Ember.get(this, 'model.customField.first_name'), 'Mithun', 'Data is present inside \\'customField.first_name\\' property');\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Default field: Apps can override \\'fieldClass\\' to blank using \\'fieldScopeMap\\'', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  fieldScopeMap: {\n                    details: ''\n                  },\n                  model: {\n                    customField: {}\n                  },\n                  schema: {\n                    name: 'Some Form',\n                    fields: [{\n                      parent: null,\n                      label: 'Section',\n                      name: 'section',\n                      type: 'section',\n                      inputType: 'nested-section',\n                      fieldClass: 'my-section',\n                      fields: [{\n                        parent: null,\n                        label: 'First Name',\n                        name: 'first_name',\n                        type: 'text',\n                        inputType: 'text-field',\n                        custom: false,\n                        fieldClass: 'details',\n                        fields: []\n                      }]\n                    }]\n                  }\n                });\n                _context8.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"nR6sAdUb\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldScopeMap\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"fieldScopeMap\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"firstName\"] input'), 'Mithun');\n                assert.equal(Ember.get(this, 'model.firstName'), 'Mithun', 'Data is present inside \\'firstName\\' property');\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }()); // TODO:: Template's each iteration has to be tested for validating if the property name and the value are shown properly.\n  });\n});","define(\"dummy/tests/integration/components/dynamic-form-for/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/pages/components/dynamic-form-for\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _dynamicFormFor) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | dynamic form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Passing schema and other requisites renders the components', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  model: {\n                    'name': 'Some name'\n                  },\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      parent: null,\n                      type: 'text',\n                      label: 'Name',\n                      name: 'name',\n                      position: 1,\n                      inputType: 'text-field',\n                      fields: []\n                    }]\n                  }\n                });\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFormFor.default.nameFieldLabel).textContent.trim(), 'Name');\n                assert.equal((0, _emberNativeDomHelpers.find)(_dynamicFormFor.default.nameFieldInput).value.trim(), 'Some name');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Checking if save action works', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  model: {\n                    'name': 'Some name',\n                    save: function save() {\n                      assert.ok('Save method is fired');\n                    }\n                  },\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      parent: null,\n                      type: 'text',\n                      label: 'Name',\n                      name: 'name',\n                      position: 1,\n                      inputType: 'text-field',\n                      fields: []\n                    }]\n                  }\n                });\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"CdTseZD1\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"submit\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.click)(_dynamicFormFor.default.submit);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Checking if reset action works', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  model: {\n                    'name': 'Some name',\n                    rollback: function rollback() {\n                      assert.ok('Rollback works');\n                    }\n                  },\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      parent: null,\n                      type: 'text',\n                      label: 'Name',\n                      name: 'name',\n                      position: 1,\n                      inputType: 'text-field',\n                      fields: []\n                    }]\n                  }\n                });\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"0l5frW9F\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"reset\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"submit\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)(_dynamicFormFor.default.nameFieldInput, 'Changing data in the text box');\n                (0, _emberNativeDomHelpers.click)(_dynamicFormFor.default.reset);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Checking if user added update action works', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                Ember.setProperties(this, {\n                  model: {\n                    'name': 'Some name'\n                  },\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      parent: null,\n                      type: 'text',\n                      label: 'Name',\n                      name: 'name',\n                      position: 1,\n                      inputType: 'text-field',\n                      fields: []\n                    }]\n                  },\n                  update: function update() {\n                    assert.ok(true, 'External update action is fired');\n                  }\n                });\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"pyPZwLJa\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"update\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"update\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"reset\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"submit\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.fillIn)(_dynamicFormFor.default.nameFieldInput, 'Changing data in the text box');\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Unsupported field types are not rendered', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n                Ember.setProperties(this, {\n                  model: {},\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      parent: null,\n                      type: 'unhandled-type',\n                      label: 'Name',\n                      name: 'name',\n                      position: 1,\n                      inputType: undefined,\n                      fields: []\n                    }]\n                  }\n                });\n                _context5.next = 4;\n                return this.render(Ember.HTMLBars.template({\n                  \"id\": \"3Z414sDl\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"update\\\",\\\"validations\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"update\\\"]],[20,[\\\"validations\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"reset\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"submit\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[0][\"attributes\"][\"label\"].value, \"Cancel\", \"Cancel button renders properly\");\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[1].innerText, \"Submit\", \"Submit button renders properly\");\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Form submit and reset button renders with default text', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                Ember.setProperties(this, {\n                  model: {},\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      parent: null,\n                      type: 'text',\n                      label: 'Name',\n                      name: 'name',\n                      position: 1,\n                      inputType: 'text-field',\n                      fields: []\n                    }]\n                  }\n                });\n                _context6.next = 4;\n                return this.render(Ember.HTMLBars.template({\n                  \"id\": \"0l5frW9F\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"reset\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[19,1,[\\\"submit\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[0].innerText, \"Cancel\", \"Cancel button text renders properly\");\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[1].innerText, \"Submit\", \"Submit button text renders properly\");\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Form submit and reset button renders with custom text', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(2);\n                Ember.setProperties(this, {\n                  model: {},\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      parent: null,\n                      type: 'text',\n                      label: 'Name',\n                      name: 'name',\n                      position: 1,\n                      inputType: 'text-field',\n                      fields: []\n                    }]\n                  }\n                });\n                _context7.next = 4;\n                return this.render(Ember.HTMLBars.template({\n                  \"id\": \"kiG5k3Nv\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"reset\\\"]]],[[\\\"label\\\"],[\\\"Reset\\\"]]],false],[0,\\\"\\\\n        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"submit\\\"]]],[[\\\"default\\\"],[\\\"Save Form\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[0].innerText, \"Reset\", \"Cancel button text renders properly\");\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button')[1].innerText, \"Save Form\", \"Submit button text renders properly\");\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }()); // TODO:: Validations are expected in a different format. Need to write for that (ember-cp-validations)\n  });\n});","define(\"dummy/tests/integration/components/fields-for/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | fields for', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"vnhA6Q8H\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"fields-for\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(this.$().text().trim(), ''); // Template block usage:\n\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"RCF+Jknq\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"fields-for\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                assert.equal(this.$().text().trim(), 'template block text');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-controls/auto-complete-multiple-with-create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form controls/auto complete multiple with create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.set(this, 'object', {});\n                Ember.set(this, 'propertyName', 'someProperty');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"/Virtj02\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/auto-complete-multiple-with-create\\\",null,[[\\\"object\\\",\\\"propertyName\\\"],[[20,[\\\"object\\\"]],[20,[\\\"propertyName\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(this.$().text().trim(), '');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-controls/auto-complete/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form controls/auto complete', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Component renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.set(this, 'object', {});\n                Ember.set(this, 'propertyName', 'something');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ed/5cc4l\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/auto-complete\\\",null,[[\\\"object\\\",\\\"propertyName\\\"],[[20,[\\\"object\\\"]],[20,[\\\"propertyName\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(this.$().text().trim(), '');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-controls/date-field/component-test\", [\"qunit\"], function (_qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | form controls/date field', function () {});\n});","define(\"dummy/tests/integration/components/form-controls/date-range-field/component-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForComponent)('form-controls/date-range-field', 'Integration | Component | form controls/date range field', {\n    integration: true\n  });\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RLqEQdBT\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"form-controls/date-range-field\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), ''); // Template block usage:\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VC/sjV93\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"form-controls/date-range-field\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define(\"dummy/tests/integration/components/form-controls/date-time-split/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form controls/date time split', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('date-time-split: the control renders when update actions are passed for both date and time', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.run(function () {\n                  Ember.set(_this, 'actions', {\n                    'updateDate': {},\n                    'updateTime': {}\n                  });\n                });\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"QNg9emwy\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/date-time-split\\\",null,[[\\\"updateDate\\\",\\\"updateTime\\\"],[[25,\\\"action\\\",[[19,0,[]],\\\"updateDate\\\"],null],[25,\\\"action\\\",[[19,0,[]],\\\"updateTime\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(this.$().text().trim(), '');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-controls/dependent-selects/power-select/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form controls/dependent selects/power select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.run(function () {\n                  Ember.set(_this, 'actions', {\n                    updateNestedIds: function updateNestedIds() {}\n                  });\n                });\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"4OtQNKTp\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/dependent-selects/power-select\\\",null,[[\\\"updateNestedIds\\\"],[[25,\\\"action\\\",[[19,0,[]],\\\"updateNestedIds\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(this.$().text().trim(), '');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-controls/multi-select-dropdown/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form controls/multi select dropdown', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2mPye3lI\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"form-controls/multi-select-dropdown\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(this.$().text().trim(), '');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-controls/power-select/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form controls/power select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Component renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"6OYQGf4O\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"form-controls/power-select\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(this.$().text().trim(), '');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-controls/time-picker-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form controls/time picker field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('time-control: it renders when update action is passed to the control', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.run(function () {\n                  Ember.set(_this, 'actions', {\n                    'update': {}\n                  });\n                });\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"YYl51Wq9\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/time-picker-field\\\",null,[[\\\"update\\\"],[[25,\\\"action\\\",[[19,0,[]],\\\"update\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.find)('.time-control')['innerText'], '');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('time-control: it renders the time when value is provided', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                Ember.run(function () {\n                  Ember.set(_this2, 'value', '11:15 PM');\n                  Ember.set(_this2, 'actions', {\n                    'update': {}\n                  });\n                });\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"fIVq+AL5\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/time-picker-field\\\",null,[[\\\"selectedValue\\\",\\\"update\\\"],[[20,[\\\"value\\\"]],[25,\\\"action\\\",[[19,0,[]],\\\"update\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.find)('.time-control')['innerText'], '11:15 PM');\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('time-control: the control gets disabled when \\'disabled\\' property is set to true', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Ember.run(function () {\n                  Ember.set(_this3, 'disabled', true);\n                  Ember.set(_this3, 'actions', {\n                    'update': {}\n                  });\n                });\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"h0VqFj14\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/time-picker-field\\\",null,[[\\\"disabled\\\",\\\"update\\\"],[[20,[\\\"disabled\\\"]],[25,\\\"action\\\",[[19,0,[]],\\\"update\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.find)('.time-control .ember-power-select-trigger')['attributes']['aria-disabled'].value, 'true');\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-errors/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form errors', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Component renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"rk0TBUW1\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"form-errors\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(this.$().text().trim(), '');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-field/component-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | form field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  }\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 when clicked dropdown is shown for searching\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  }\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context4.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"Type to search\", \"default search message 'Type to search' appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' check create option is shown when searching for non-existing keyword\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context6.next = 6;\n                return _createField.default.renderForm();\n\n              case 6:\n                _context6.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context6.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"ABCD\"...', \"choice 1 'Add \\\"ABCD\\\"...'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionValuePath='value' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context8.next = 6;\n                return _createField.default.renderForm();\n\n              case 6:\n                _context8.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context8.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 10:\n                return _context8.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(_this2.model.customField.country, \"INDIA\");\n\n                        case 3:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionValuePath='shortCode' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=CHN&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'shortCode'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context10.next = 6;\n                return _createField.default.renderForm();\n\n              case 6:\n                _context10.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context10.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('CHN');\n\n              case 10:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);\n\n                        case 2:\n                          assert.equal(_this3.model.customField.country, \"CHN\");\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionValuePath='id' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'id'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context12.next = 6;\n                return _createField.default.renderForm();\n\n              case 6:\n                _context12.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context12.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context12.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);\n\n                        case 2:\n                          assert.equal(_this4.model.customField.country, \"country_3\");\n\n                        case 3:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x6) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 optionValuePath='' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this5.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: ''\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context14.next = 6;\n                return _createField.default.renderForm();\n\n              case 6:\n                _context14.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context14.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context14.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[5]);\n\n                        case 2:\n                          assert.deepEqual(_this5.model.customField.country, {\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x7) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 optionLabelPath='value' add a new option\", /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');\n                  request.ok(_this6.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context16.next = 6;\n                return _createField.default.renderForm();\n\n              case 6:\n                _context16.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context16.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');\n\n              case 10:\n                return _context16.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {\n                  return regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          _context15.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                          assert.equal(_this6.model.customField.country.value, \"UNITED KINGDOM\", \"check 'UNITED KINGDOM' is selected\");\n\n                        case 4:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x8) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice\", /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this7.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    custom_creatable_text: 'Create \"${term}\" choice'\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context18.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context18.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context18.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context18.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                  return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                    while (1) {\n                      switch (_context17.prev = _context17.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create \"ABCD\" choice', \"Custom createable text shown is: 'Create \\\"ABCD\\\" choice'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 7:\n                        case \"end\":\n                          return _context17.stop();\n                      }\n                    }\n                  }, _callee17);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x9) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST10 passing optionTargetPath to render choices and optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice\", /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this8.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    custom_creatable_text: 'Create \"${term}\" choice'\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context20.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context20.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context20.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context20.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\n                  return regeneratorRuntime.wrap(function _callee19$(_context19) {\n                    while (1) {\n                      switch (_context19.prev = _context19.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create \"ABCD\" choice', \"Custom createable text shown is: 'Create \\\"ABCD\\\" choice'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 7:\n                        case \"end\":\n                          return _context19.stop();\n                      }\n                    }\n                  }, _callee19);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      return function (_x10) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/create-field\", \"ember-test-helpers/wait\", \"ember-cli-fake-server\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _emberPowerSelect, _createField, _wait, _emberCliFakeServer) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 3\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: \"JAPAN\"\n                  }\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"JAPAN\", \"Field renderd with value 'JAPAN'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'shortCode'\n                });\n\n                this.model = {\n                  customField: {\n                    country: {\n                      id: 'country_1',\n                      value: 'INDIA',\n                      shortCode: 'IND',\n                      position: 5\n                    }\n                  }\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"IND\", \"Field renderd with value 'IND'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: {\n                      id: 'country_5',\n                      value: 'UNITED STATES',\n                      shortCode: 'USA',\n                      position: 5\n                    }\n                  }\n                };\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionLabelPath='value' Check field gets renderd with new option which is not already present in choice list \", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: {\n                      value: 'UNITED'\n                    }\n                  }\n                };\n                _context8.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED\", \"Field renderd with value 'UNITED'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionLabelPath='value' optionValuePath='value' Checking if field gets renderd with model value and then try selecting another option \", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: {\n                      value: 'UNITED STATES'\n                    }\n                  }\n                };\n                _context11.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                return _context11.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                  return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n                          _context10.next = 3;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 3:\n                          _context10.next = 5;\n                          return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                        case 5:\n                          return _context10.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                            return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                              while (1) {\n                                switch (_context9.prev = _context9.next) {\n                                  case 0:\n                                    _context9.next = 2;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 2:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED\", \"Field renderd with value 'UNITED KINGDOM'\");\n                                    assert.equal(_this.model.customField.country.value, \"UNITED\", \"check 'UNITED KINGDOM' is selected\");\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context9.stop();\n                                }\n                              }\n                            }, _callee9);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6  optionLabelPath='value' optionValuePath='value' optionTargetPath: 'countries' Checking if field gets renderd with model value and then try selecting another option \", /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this2.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  customField: {\n                    country: {\n                      value: 'UNITED STATES'\n                    }\n                  }\n                };\n                _context14.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                return _context14.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n                          _context13.next = 3;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 3:\n                          _context13.next = 5;\n                          return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                        case 5:\n                          return _context13.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                            return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                              while (1) {\n                                switch (_context12.prev = _context12.next) {\n                                  case 0:\n                                    _context12.next = 2;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 2:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED\", \"Field renderd with value 'UNITED KINGDOM'\");\n                                    assert.equal(_this2.model.customField.country.value, \"UNITED\", \"check 'UNITED KINGDOM' is selected\");\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context12.stop();\n                                }\n                              }\n                            }, _callee12);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x6) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  }\n                });\n\n                _context2.next = 4;\n                return _createField.default.renderForm();\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 when clicked dropdown is shown for searching\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  }\n                });\n\n                _context4.next = 4;\n                return _createField.default.renderForm();\n\n              case 4:\n                _context4.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"Type to search\", \"default search message 'Type to search' appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' check create option is shown when searching for non-existing keyword\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context6.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context6.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context6.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"ABCD\"...', \"choice 1 'Add \\\"ABCD\\\"...'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionValuePath='value' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context8.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context8.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context8.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 9:\n                return _context8.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(_this2.model.country, \"INDIA\");\n\n                        case 3:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionValuePath='shortCode' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=CHN&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'shortCode'\n                });\n\n                _context10.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context10.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context10.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('CHN');\n\n              case 9:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);\n\n                        case 2:\n                          assert.equal(_this3.model.country, \"CHN\");\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionValuePath='id' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'id'\n                });\n\n                _context12.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context12.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context12.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context12.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);\n\n                        case 2:\n                          assert.equal(_this4.model.country, \"country_3\");\n\n                        case 3:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x6) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 optionValuePath='' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this5.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: ''\n                });\n\n                _context14.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context14.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context14.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context14.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[5]);\n\n                        case 2:\n                          assert.deepEqual(_this5.model.country, {\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x7) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 optionLabelPath='value' add a new option\", /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');\n                  request.ok(_this6.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context16.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context16.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context16.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');\n\n              case 9:\n                return _context16.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {\n                  return regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          _context15.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                          assert.equal(_this6.model.country.value, \"UNITED KINGDOM\", \"check 'UNITED KINGDOM' is selected\");\n\n                        case 4:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x8) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9 passing optionTargetPath to render choices and optionLabelPath='value' and check for add a new option\", /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');\n                  request.ok(_this7.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                _context18.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                _context18.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context18.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');\n\n              case 9:\n                return _context18.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                  return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                    while (1) {\n                      switch (_context17.prev = _context17.next) {\n                        case 0:\n                          _context17.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                          assert.equal(_this7.model.country.value, \"UNITED KINGDOM\", \"check 'UNITED KINGDOM' is selected\");\n\n                        case 4:\n                        case \"end\":\n                          return _context17.stop();\n                      }\n                    }\n                  }, _callee17);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x9) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-create/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/create-field\", \"ember-cli-fake-server\"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers, _emberPowerSelect, _createField, _emberCliFakeServer) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 3\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: \"JAPAN\"\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"JAPAN\", \"Field renderd with value 'JAPAN'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'shortCode'\n                });\n\n                this.model = {\n                  country: {\n                    id: 'country_1',\n                    value: 'INDIA',\n                    shortCode: 'IND',\n                    position: 5\n                  }\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"IND\", \"Field renderd with value 'IND'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: {\n                    id: 'country_5',\n                    value: 'UNITED STATES',\n                    shortCode: 'USA',\n                    position: 5\n                  }\n                };\n                _context6.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionLabelPath='value' Check field gets renderd with new option which is not already present in choice list\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: {\n                    value: 'UNITED'\n                  }\n                };\n                _context8.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED\", \"Field renderd with value 'UNITED'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionLabelPath='value' optionValuePath='value' Checking if field gets renderd with model value and then try selecting another option\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: 'UNITED STATES'\n                };\n                _context11.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                return _context11.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                  return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n                          _context10.next = 3;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 3:\n                          _context10.next = 5;\n                          return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                        case 5:\n                          return _context10.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                            return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                              while (1) {\n                                switch (_context9.prev = _context9.next) {\n                                  case 0:\n                                    _context9.next = 2;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 2:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED\", \"Field renderd with value 'UNITED KINGDOM'\");\n                                    assert.equal(_this.model.country.value, \"UNITED\", \"check 'UNITED KINGDOM' is selected\");\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context9.stop();\n                                }\n                              }\n                            }, _callee9);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionLabelPath='value' optionValuePath='value' optionTargetPath: 'countries' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this2.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  country: 'UNITED STATES'\n                };\n                _context14.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                return _context14.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n                          _context13.next = 3;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 3:\n                          _context13.next = 5;\n                          return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                        case 5:\n                          return _context13.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                            return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                              while (1) {\n                                switch (_context12.prev = _context12.next) {\n                                  case 0:\n                                    _context12.next = 2;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 2:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED\", \"Field renderd with value 'UNITED KINGDOM'\");\n                                    assert.equal(_this2.model.country.value, \"UNITED\", \"check 'UNITED KINGDOM' is selected\");\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context12.stop();\n                                }\n                              }\n                            }, _callee12);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x6) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-create | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: true\n                  }\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true,\n                    custom_creatable_text: 'Create \"${term}\" choice'\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context4.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context4.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create \"ABCD\" choice', \"Custom createable text shown is: 'Create \\\"ABCD\\\" choice'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 7:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionValuePath='value' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context6.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context6.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context6.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 10:\n                return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(_this2.model.customField.country, \"INDIA\");\n\n                        case 3:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionValuePath='shortCode' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=CHN&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'shortCode'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context8.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context8.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context8.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('CHN');\n\n              case 10:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);\n\n                        case 2:\n                          assert.equal(_this3.model.customField.country, \"CHN\");\n\n                        case 3:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionValuePath='id' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'id'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context10.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context10.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context10.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context10.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);\n\n                        case 2:\n                          assert.equal(_this4.model.customField.country, \"country_3\");\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionValuePath='' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this5.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: ''\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context12.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context12.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context12.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context12.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[5]);\n\n                        case 2:\n                          assert.deepEqual(_this5.model.customField.country, {\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x6) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 optionLabelPath='value' add a new option\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');\n                  request.ok(_this6.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context14.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context14.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context14.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');\n\n              case 10:\n                return _context14.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(_this6.model.customField.country.value, \"UNITED KINGDOM\", \"check 'UNITED KINGDOM' is selected\");\n\n                        case 3:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x7) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice\", /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this7.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    custom_creatable_text: 'Create \"${term}\" choice'\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context16.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context16.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context16.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context16.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {\n                  return regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create \"ABCD\" choice', \"Custom createable text shown is: 'Create \\\"ABCD\\\" choice'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 7:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x8) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9 Selecting multiple values with creatable as true and removing one choice/value \", /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this8.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context21.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context21.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context21.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 10:\n                return _context21.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {\n                  return regeneratorRuntime.wrap(function _callee20$(_context20) {\n                    while (1) {\n                      switch (_context20.prev = _context20.next) {\n                        case 0:\n                          _context20.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          return _context20.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\n                            return regeneratorRuntime.wrap(function _callee19$(_context19) {\n                              while (1) {\n                                switch (_context19.prev = _context19.next) {\n                                  case 0:\n                                    _context19.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                                      request.ok(_this8.choicesList);\n                                    });\n                                    _context19.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                                  case 5:\n                                    return _context19.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {\n                                      return regeneratorRuntime.wrap(function _callee18$(_context18) {\n                                        while (1) {\n                                          switch (_context18.prev = _context18.next) {\n                                            case 0:\n                                              _context18.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this8.model.customField.country, [\"INDIA\", \"UNITED\"], \"check 'INDIA' and 'UNITED' is selected\");\n                                              _context18.next = 5;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                            case 5:\n                                              return _context18.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                                                return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                                                  while (1) {\n                                                    switch (_context17.prev = _context17.next) {\n                                                      case 0:\n                                                        assert.deepEqual(_this8.model.customField.country, [\"UNITED\"], \"check 'UNITED' is remaining in model\");\n\n                                                      case 1:\n                                                      case \"end\":\n                                                        return _context17.stop();\n                                                    }\n                                                  }\n                                                }, _callee17);\n                                              }))));\n\n                                            case 6:\n                                            case \"end\":\n                                              return _context18.stop();\n                                          }\n                                        }\n                                      }, _callee18);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context19.stop();\n                                }\n                              }\n                            }, _callee19);\n                          }))));\n\n                        case 3:\n                        case \"end\":\n                          return _context20.stop();\n                      }\n                    }\n                  }, _callee20);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      return function (_x9) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST10 Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty \", /*#__PURE__*/function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this9.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context24.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context24.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context24.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n              case 10:\n                return _context24.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {\n                  return regeneratorRuntime.wrap(function _callee23$(_context23) {\n                    while (1) {\n                      switch (_context23.prev = _context23.next) {\n                        case 0:\n                          _context23.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this9.model.customField.country, [\"UNITED\"], \"check 'UNITED' is remaining in model\");\n                          _context23.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context23.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {\n                            return regeneratorRuntime.wrap(function _callee22$(_context22) {\n                              while (1) {\n                                switch (_context22.prev = _context22.next) {\n                                  case 0:\n                                    assert.deepEqual(_this9.model.customField.country, [], \"check nothing is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context22.stop();\n                                }\n                              }\n                            }, _callee22);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context23.stop();\n                      }\n                    }\n                  }, _callee23);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      return function (_x10) {\n        return _ref22.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST11 passing optionTargetPath to render choices and Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty \", /*#__PURE__*/function () {\n      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this10.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context27.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context27.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context27.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n              case 10:\n                return _context27.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {\n                  return regeneratorRuntime.wrap(function _callee26$(_context26) {\n                    while (1) {\n                      switch (_context26.prev = _context26.next) {\n                        case 0:\n                          _context26.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this10.model.customField.country, [\"UNITED\"], \"check 'UNITED' is remaining in model\");\n                          _context26.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context26.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {\n                            return regeneratorRuntime.wrap(function _callee25$(_context25) {\n                              while (1) {\n                                switch (_context25.prev = _context25.next) {\n                                  case 0:\n                                    assert.deepEqual(_this10.model.customField.country, [], \"check nothing is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context25.stop();\n                                }\n                              }\n                            }, _callee25);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context26.stop();\n                      }\n                    }\n                  }, _callee26);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      return function (_x11) {\n        return _ref25.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"ember-cli-fake-server\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _createField, _emberCliFakeServer) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-create | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 3\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 creatable='true' multiple='true' passing one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: ['UNITED STATES']\n                  }\n                };\n                _context2.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.customField.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context2.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.deepEqual(_this.model.customField.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 creatable='true' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this2.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  customField: {\n                    country: ['UNITED STATES']\n                  }\n                };\n                _context4.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.customField.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context4.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.deepEqual(_this2.model.customField.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"ember-test-helpers/wait\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _wait, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-create | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: true\n                  }\n                });\n\n                _context2.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='value' check create option and verify custom message is shown when searching for non-existing choice\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true,\n                    custom_creatable_text: 'Create \"${term}\" choice'\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context4.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context4.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Create \"ABCD\" choice', \"Custom createable text shown is: 'Create \\\"ABCD\\\" choice'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 7:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 Selecting multiple values with creatable as true and removing one choice/value \", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context9.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context9.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context9.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 9:\n                return _context9.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                  return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                            return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                              while (1) {\n                                switch (_context7.prev = _context7.next) {\n                                  case 0:\n                                    _context7.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                                      request.ok(_this2.choicesList);\n                                    });\n                                    _context7.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                                  case 5:\n                                    return _context7.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                                      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                                        while (1) {\n                                          switch (_context6.prev = _context6.next) {\n                                            case 0:\n                                              _context6.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this2.model.country, [\"INDIA\", \"UNITED\"], \"check 'INDIA' and 'UNITED' is in model\");\n                                              _context6.next = 5;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                            case 5:\n                                              return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                                                return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                                                  while (1) {\n                                                    switch (_context5.prev = _context5.next) {\n                                                      case 0:\n                                                        assert.deepEqual(_this2.model.country, [\"UNITED\"], \"check 'UNITED' is remaining in model\");\n\n                                                      case 1:\n                                                      case \"end\":\n                                                        return _context5.stop();\n                                                    }\n                                                  }\n                                                }, _callee5);\n                                              }))));\n\n                                            case 6:\n                                            case \"end\":\n                                              return _context6.stop();\n                                          }\n                                        }\n                                      }, _callee6);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context7.stop();\n                                }\n                              }\n                            }, _callee7);\n                          }))));\n\n                        case 3:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty \", /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context12.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context12.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context12.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n              case 9:\n                return _context12.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this3.model.country, [\"UNITED\"], \"check 'UNITED' is remaining in model\");\n                          _context11.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context11.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                            return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                              while (1) {\n                                switch (_context10.prev = _context10.next) {\n                                  case 0:\n                                    assert.deepEqual(_this3.model.country, [], \"check nothing is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context10.stop();\n                                }\n                              }\n                            }, _callee10);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x4) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 passing optionTargetPath to render choices and Selecting one value with creatable as true and removing the selected choice and checking whether model  is empty \", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                _context15.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context15.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context15.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n              case 9:\n                return _context15.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                  return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          _context14.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this4.model.country, [\"UNITED\"], \"check 'UNITED' is remaining in model\");\n                          _context14.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context14.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                            return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                              while (1) {\n                                switch (_context13.prev = _context13.next) {\n                                  case 0:\n                                    assert.deepEqual(_this4.model.country, [], \"check nothing is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context13.stop();\n                                }\n                              }\n                            }, _callee13);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x5) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"ember-cli-fake-server\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _createField, _emberCliFakeServer) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-create | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 3\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 creatable='true' multiple='true' passing one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: ['UNITED STATES']\n                };\n                _context2.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context2.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.deepEqual(_this.model.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 creatable='true' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this2.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  country: ['UNITED STATES']\n                };\n                _context4.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context4.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.deepEqual(_this2.model.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  }\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                assert.equal(this.model.customField.country, undefined, \"no value set on model\");\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 when clicked dropdown is shown for searching\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(4);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  }\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context2.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"Type to search\", \"default search message 'Type to search' appears\");\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                assert.equal(this.model.customField.country, undefined, \"no value set on model\");\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context4.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context4.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n                          assert.equal(_this.model.customField.country, undefined, \"no value set on model\");\n\n                        case 7:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionLabelPath: 'shortCode'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context6.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context6.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context6.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"IND\", \"choice 1 is 'IND'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"USA\", \"choice 2 is 'USA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHN\", \"choice 3 is 'CHN'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"LKA\", \"choice 4 is 'LKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JPN\", \"choice 5 is 'JPN'\");\n                          assert.equal(_this2.model.customField.country, undefined, \"no value set on model\");\n\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionValuePath='shortCode' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionValuePath: 'shortCode',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context8.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context8.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context8.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n                          assert.equal(_this3.model.customField.country, \"CHN\");\n\n                        case 2:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionValuePath='id' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionValuePath: 'id',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context10.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context10.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context10.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context10.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n                          assert.equal(_this4.model.customField.country, \"country_3\");\n\n                        case 2:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x6) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 Selecting one value with creatable as false and removing the selected choice and checking whether model  is empty \", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this5.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context13.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context13.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context13.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 10:\n                return _context13.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                  return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          _context12.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this5.model.customField.country, [\"INDIA\"], \"check 'INDIA' is in model\");\n                          _context12.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context12.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                            return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                              while (1) {\n                                switch (_context11.prev = _context11.next) {\n                                  case 0:\n                                    assert.deepEqual(_this5.model.customField.country, [], \"check nothing is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context11.stop();\n                                }\n                              }\n                            }, _callee11);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x7) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 Selecting multiple values with creatable as false and removing one choice/value \", /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this6.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context18.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context18.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context18.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 10:\n                return _context18.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                  return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                    while (1) {\n                      switch (_context17.prev = _context17.next) {\n                        case 0:\n                          _context17.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          return _context17.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\n                            return regeneratorRuntime.wrap(function _callee16$(_context16) {\n                              while (1) {\n                                switch (_context16.prev = _context16.next) {\n                                  case 0:\n                                    _context16.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query field is populated');\n                                      request.ok(_this6.choicesList);\n                                    });\n                                    _context16.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');\n\n                                  case 5:\n                                    return _context16.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {\n                                      return regeneratorRuntime.wrap(function _callee15$(_context15) {\n                                        while (1) {\n                                          switch (_context15.prev = _context15.next) {\n                                            case 0:\n                                              _context15.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this6.model.customField.country, [\"INDIA\", \"UNITED STATES\"], \"check 'INDIA' and 'UNITED STATES' is selected\");\n                                              _context15.next = 5;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                            case 5:\n                                              return _context15.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                                                return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                                                  while (1) {\n                                                    switch (_context14.prev = _context14.next) {\n                                                      case 0:\n                                                        assert.deepEqual(_this6.model.customField.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is remaining in model\");\n\n                                                      case 1:\n                                                      case \"end\":\n                                                        return _context14.stop();\n                                                    }\n                                                  }\n                                                }, _callee14);\n                                              }))));\n\n                                            case 6:\n                                            case \"end\":\n                                              return _context15.stop();\n                                          }\n                                        }\n                                      }, _callee15);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context16.stop();\n                                }\n                              }\n                            }, _callee16);\n                          }))));\n\n                        case 3:\n                        case \"end\":\n                          return _context17.stop();\n                      }\n                    }\n                  }, _callee17);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x8) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9 Checking for not creating a new choice\", /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context20.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context20.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');\n                  request.ok(_this7.choicesList);\n                });\n                _context20.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');\n\n              case 10:\n                return _context20.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\n                  return regeneratorRuntime.wrap(function _callee19$(_context19) {\n                    while (1) {\n                      switch (_context19.prev = _context19.next) {\n                        case 0:\n                          assert.notEqual((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"UNITED KINGDOM\"...', \"choice 1 'Add \\\"ABCD\\\"...'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context19.stop();\n                      }\n                    }\n                  }, _callee19);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      return function (_x9) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST10 passing optionTargetPath to render choices and Selecting multiple values with creatable as false and removing one choice/value \", /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this8.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context25.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context25.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context25.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 10:\n                return _context25.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {\n                  return regeneratorRuntime.wrap(function _callee24$(_context24) {\n                    while (1) {\n                      switch (_context24.prev = _context24.next) {\n                        case 0:\n                          _context24.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          return _context24.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {\n                            return regeneratorRuntime.wrap(function _callee23$(_context23) {\n                              while (1) {\n                                switch (_context23.prev = _context23.next) {\n                                  case 0:\n                                    _context23.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query field is populated');\n                                      request.ok(_this8.choicesList);\n                                    });\n                                    _context23.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');\n\n                                  case 5:\n                                    return _context23.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {\n                                      return regeneratorRuntime.wrap(function _callee22$(_context22) {\n                                        while (1) {\n                                          switch (_context22.prev = _context22.next) {\n                                            case 0:\n                                              _context22.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this8.model.customField.country, [\"INDIA\", \"UNITED STATES\"], \"check 'INDIA' and 'UNITED STATES' is selected\");\n                                              _context22.next = 5;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                            case 5:\n                                              return _context22.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {\n                                                return regeneratorRuntime.wrap(function _callee21$(_context21) {\n                                                  while (1) {\n                                                    switch (_context21.prev = _context21.next) {\n                                                      case 0:\n                                                        assert.deepEqual(_this8.model.customField.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is remaining in model\");\n\n                                                      case 1:\n                                                      case \"end\":\n                                                        return _context21.stop();\n                                                    }\n                                                  }\n                                                }, _callee21);\n                                              }))));\n\n                                            case 6:\n                                            case \"end\":\n                                              return _context22.stop();\n                                          }\n                                        }\n                                      }, _callee22);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context23.stop();\n                                }\n                              }\n                            }, _callee23);\n                          }))));\n\n                        case 3:\n                        case \"end\":\n                          return _context24.stop();\n                      }\n                    }\n                  }, _callee24);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      return function (_x10) {\n        return _ref21.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/create-field\", \"ember-cli-fake-server\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _createField, _emberCliFakeServer) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 3\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 optionLabelPath='shortCode' optionValuePath='' Check field gets rendered with saved value\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'shortCode'\n                });\n\n                this.model = {\n                  customField: {\n                    country: Ember.A([{\n                      id: 'country_1',\n                      value: 'INDIA',\n                      shortCode: 'IND',\n                      position: 5\n                    }])\n                  }\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"× IND\", \"Field renderd with value 'IND'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: Ember.A([{\n                      id: 'country_5',\n                      value: 'UNITED STATES',\n                      shortCode: 'USA',\n                      position: 5\n                    }])\n                  }\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"× UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 creatable='false' multiple='true' passing one option as default and selecting one more option and removing one choice/value \", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: ['UNITED STATES']\n                  }\n                };\n                _context7.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.customField.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is in model\");\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n                _context7.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 10:\n                _context7.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 12:\n                return _context7.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                  return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _context6.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this.model.customField.country, [\"UNITED STATES\", \"INDIA\"], \"check 'INDIA' and 'UNITED STATES' is selected\");\n                          _context6.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                            return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                              while (1) {\n                                switch (_context5.prev = _context5.next) {\n                                  case 0:\n                                    assert.deepEqual(_this.model.customField.country, [\"INDIA\"], \"check 'INDIA' is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context5.stop();\n                                }\n                              }\n                            }, _callee5);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 creatable='false' multiple='true' passing one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    country: ['UNITED STATES']\n                  }\n                };\n                _context9.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.customField.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context9.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context9.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                  return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          assert.deepEqual(_this2.model.customField.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x4) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 creatable='false' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this3.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  customField: {\n                    country: ['UNITED STATES']\n                  }\n                };\n                _context11.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.customField.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context11.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context11.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                  return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          assert.deepEqual(_this3.model.customField.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x5) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"ember-test-helpers/wait\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _wait, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  }\n                });\n\n                _context2.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                          assert.equal(_this.model.country, undefined, \"no value set on model\");\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 when clicked dropdown is shown for searching\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(4);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  }\n                });\n\n                _context4.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                _context4.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"Type to search\", \"default search message 'Type to search' appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                          assert.equal(_this2.model.country, undefined, \"no value set on model\");\n\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionLabelPath: 'value'\n                });\n\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context6.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context6.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n                          assert.equal(_this3.model.country, undefined, \"no value set on model\");\n\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionLabelPath: 'shortCode'\n                });\n\n                _context8.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context8.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context8.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"IND\", \"choice 1 is 'IND'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"USA\", \"choice 2 is 'USA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHN\", \"choice 3 is 'CHN'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"LKA\", \"choice 4 is 'LKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JPN\", \"choice 5 is 'JPN'\");\n                          assert.equal(_this4.model.country, undefined, \"no value set on model\");\n\n                        case 7:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionValuePath='value' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this5.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                _context10.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context10.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context10.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context10.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n                          assert.equal(_this5.model.country, \"INDIA\");\n\n                        case 2:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionValuePath='shortCode' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=id', 'query field is populated');\n                  request.ok(_this6.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionValuePath: 'shortCode'\n                });\n\n                _context12.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context12.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context12.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context12.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n                          assert.equal(_this6.model.country, \"CHN\");\n\n                        case 2:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x6) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 optionValuePath='id' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=id', 'query field is populated');\n                  request.ok(_this7.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionValuePath: 'id'\n                });\n\n                _context14.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context14.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context14.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context14.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n                          assert.equal(_this7.model.country, \"country_3\");\n\n                        case 2:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x7) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 optionValuePath='' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=id', 'query field is populated');\n                  request.ok(_this8.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: false\n                  },\n                  optionValuePath: ''\n                });\n\n                _context16.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context16.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context16.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context16.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {\n                  return regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);\n                          assert.deepEqual(_this8.model.country, [{\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          }]);\n\n                        case 2:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x8) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9 Selecting multiple values with creatable as false and removing one choice/value \", /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this9.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context21.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context21.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context21.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 9:\n                return _context21.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {\n                  return regeneratorRuntime.wrap(function _callee20$(_context20) {\n                    while (1) {\n                      switch (_context20.prev = _context20.next) {\n                        case 0:\n                          _context20.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          return _context20.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\n                            return regeneratorRuntime.wrap(function _callee19$(_context19) {\n                              while (1) {\n                                switch (_context19.prev = _context19.next) {\n                                  case 0:\n                                    _context19.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query field is populated');\n                                      request.ok(_this9.choicesList);\n                                    });\n                                    _context19.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');\n\n                                  case 5:\n                                    return _context19.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {\n                                      return regeneratorRuntime.wrap(function _callee18$(_context18) {\n                                        while (1) {\n                                          switch (_context18.prev = _context18.next) {\n                                            case 0:\n                                              _context18.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this9.model.country, [\"INDIA\", \"UNITED STATES\"], \"check 'INDIA' and 'UNITED STATES' is selected\");\n                                              _context18.next = 5;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                            case 5:\n                                              return _context18.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                                                return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                                                  while (1) {\n                                                    switch (_context17.prev = _context17.next) {\n                                                      case 0:\n                                                        assert.deepEqual(_this9.model.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is remaining in model\");\n\n                                                      case 1:\n                                                      case \"end\":\n                                                        return _context17.stop();\n                                                    }\n                                                  }\n                                                }, _callee17);\n                                              }))));\n\n                                            case 6:\n                                            case \"end\":\n                                              return _context18.stop();\n                                          }\n                                        }\n                                      }, _callee18);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context19.stop();\n                                }\n                              }\n                            }, _callee19);\n                          }))));\n\n                        case 3:\n                        case \"end\":\n                          return _context20.stop();\n                      }\n                    }\n                  }, _callee20);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      return function (_x9) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST10 Checking for not creating a new choice\", /*#__PURE__*/function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context23.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                _context23.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20KINGDOM&qf=value', 'query field is populated');\n                  request.ok(_this10.choicesList);\n                });\n                _context23.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('UNITED KINGDOM');\n\n              case 9:\n                return _context23.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {\n                  return regeneratorRuntime.wrap(function _callee22$(_context22) {\n                    while (1) {\n                      switch (_context22.prev = _context22.next) {\n                        case 0:\n                          assert.notEqual((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"UNITED KINGDOM\"...', \"choice 1 'Add \\\"UNITED KINGDOM\\\"...'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context22.stop();\n                      }\n                    }\n                  }, _callee22);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      return function (_x10) {\n        return _ref22.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST11 Selecting one value with creatable as false and removing the selected choice and checking whether model  is empty \", /*#__PURE__*/function () {\n      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(assert) {\n        var _this11 = this;\n\n        return regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this11.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context26.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context26.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context26.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 9:\n                return _context26.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {\n                  return regeneratorRuntime.wrap(function _callee25$(_context25) {\n                    while (1) {\n                      switch (_context25.prev = _context25.next) {\n                        case 0:\n                          _context25.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this11.model.country, [\"INDIA\"], \"check 'INDIA' is remaining in model\");\n                          _context25.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context25.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {\n                            return regeneratorRuntime.wrap(function _callee24$(_context24) {\n                              while (1) {\n                                switch (_context24.prev = _context24.next) {\n                                  case 0:\n                                    assert.deepEqual(_this11.model.country, [], \"check nothing is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context24.stop();\n                                }\n                              }\n                            }, _callee24);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context25.stop();\n                      }\n                    }\n                  }, _callee25);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      return function (_x11) {\n        return _ref24.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST12 passing optionTargetPath to render choices and Selecting one value with creatable as false and removing the selected choice and checking whether model  is empty \", /*#__PURE__*/function () {\n      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {\n        var _this12 = this;\n\n        return regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                assert.expect(3);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this12.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                _context29.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context29.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context29.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 9:\n                return _context29.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {\n                  return regeneratorRuntime.wrap(function _callee28$(_context28) {\n                    while (1) {\n                      switch (_context28.prev = _context28.next) {\n                        case 0:\n                          _context28.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this12.model.country, [\"INDIA\"], \"check 'INDIA' is remaining in model\");\n                          _context28.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context28.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {\n                            return regeneratorRuntime.wrap(function _callee27$(_context27) {\n                              while (1) {\n                                switch (_context27.prev = _context27.next) {\n                                  case 0:\n                                    assert.deepEqual(_this12.model.country, [], \"check nothing is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context27.stop();\n                                }\n                              }\n                            }, _callee27);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context28.stop();\n                      }\n                    }\n                  }, _callee28);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      return function (_x12) {\n        return _ref27.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"ember-test-helpers/wait\", \"dummy/tests/helpers/create-field\", \"ember-cli-fake-server\", \"dummy/tests/helpers/ember-power-select\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _wait, _createField, _emberCliFakeServer, _emberPowerSelect) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete-with-multiple-no-create | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 3\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: Ember.A([\"JAPAN\"])\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"× JAPAN\", \"Field renderd with value 'JAPAN'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'shortCode'\n                });\n\n                this.model = {\n                  country: Ember.A([{\n                    id: 'country_1',\n                    value: 'INDIA',\n                    shortCode: 'IND',\n                    position: 5\n                  }])\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm();\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"× IND\", \"Field renderd with value 'IND'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: Ember.A([{\n                    id: 'country_5',\n                    value: 'UNITED STATES',\n                    shortCode: 'USA',\n                    position: 5\n                  }])\n                };\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"× UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 creatable='false' multiple='true' passing one option as default and selecting another option and removing one choice/value \", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(4);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: ['UNITED STATES']\n                };\n                _context9.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n                _context9.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 10:\n                _context9.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n              case 12:\n                return _context9.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                  return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.deepEqual(_this.model.country, [\"UNITED STATES\", \"INDIA\"], \"check 'INDIA' and 'UNITED STATES' is selected\");\n                          _context8.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 5:\n                          return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                            return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                              while (1) {\n                                switch (_context7.prev = _context7.next) {\n                                  case 0:\n                                    assert.deepEqual(_this.model.country, [\"INDIA\"], \"check 'INDIA' is remaining in model\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context7.stop();\n                                }\n                              }\n                            }, _callee7);\n                          }))));\n\n                        case 6:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 creatable='false' multiple='true' passing one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: ['UNITED STATES']\n                };\n                _context11.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context11.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context11.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                  return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          assert.deepEqual(_this2.model.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x5) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 creatable='false' multiple='true' passing optionTargetPath to render choices and one option as default and removing the selected option and checking whether model is empty \", /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=UNITED%20STATESs&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  country: ['UNITED STATES']\n                };\n                _context13.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                assert.deepEqual(this.model.country, [\"UNITED STATES\"], \"check 'UNITED STATES' is selected\");\n                _context13.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n              case 9:\n                return _context13.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                  return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          assert.deepEqual(_this3.model.country, [], \"check whether model is empty\");\n\n                        case 1:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x6) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this, {\n                  custom: true\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                          assert.equal(_this.model.customField.country, undefined, \"no value set on model\");\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 when clicked dropdown is shown for searching\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(4);\n\n                _createField.default.autoComplete(this, {\n                  custom: true\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context4.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"Type to search\", \"default search message 'Type to search' appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                          assert.equal(_this2.model.customField.country, undefined, \"no value set on model\");\n\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context6.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context6.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context6.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n                          assert.equal(_this3.model.customField.country, undefined, \"no value set on model\");\n\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(8);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionLabelPath: 'shortCode'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context8.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context8.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context8.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context8.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"IND\", \"choice 1 is 'IND'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"USA\", \"choice 2 is 'USA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHN\", \"choice 3 is 'CHN'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"LKA\", \"choice 4 is 'LKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JPN\", \"choice 5 is 'JPN'\");\n                          assert.equal(_this4.model.customField.country, undefined, \"no value set on model\");\n\n                        case 7:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionValuePath='value' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this5.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context10.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context10.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context10.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(_this5.model.customField.country, \"INDIA\");\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionValuePath='shortCode' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this6.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionValuePath: 'shortCode',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context12.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context12.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context12.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context12.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n\n                        case 2:\n                          assert.equal(_this6.model.customField.country, \"CHN\");\n\n                        case 3:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x6) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 optionValuePath='id' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this7.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionValuePath: 'id',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context14.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context14.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context14.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context14.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n\n                        case 2:\n                          assert.equal(_this7.model.customField.country, \"country_3\");\n\n                        case 3:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x7) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 optionValuePath='' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this8.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context16.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context16.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context16.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context16.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {\n                  return regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          _context15.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);\n\n                        case 2:\n                          assert.deepEqual(_this8.model.customField.country, {\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x8) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9  passing optionTargetPath to render choices and check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this9.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionValuePath: '',\n                  optionLabelPath: 'value',\n                  optionTargetPath: 'countries'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context18.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context18.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context18.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 10:\n                return _context18.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                  return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                    while (1) {\n                      switch (_context17.prev = _context17.next) {\n                        case 0:\n                          _context17.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);\n\n                        case 2:\n                          assert.deepEqual(_this9.model.customField.country, {\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context17.stop();\n                      }\n                    }\n                  }, _callee17);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x9) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n    });\n    hooks.afterEach(function () {});\n    (0, _qunit.test)(\"#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {\n                    \"country\": \"INDIA\"\n                  }\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"INDIA\", \"Field renderd with value 'INDIA'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionLabelPath: 'shortCode',\n                  optionValuePath: ''\n                });\n\n                this.model = {\n                  customField: {\n                    country: {\n                      id: 'country_5',\n                      value: 'JAPAN',\n                      shortCode: 'JPN',\n                      position: 5\n                    }\n                  }\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"JPN\", \"Field renderd with value 'JPN'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  optionLabelPath: 'value',\n                  optionValuePath: ''\n                });\n\n                this.model = {\n                  customField: {\n                    country: {\n                      id: 'country_5',\n                      value: 'UNITED STATES',\n                      shortCode: 'USA',\n                      position: 5\n                    }\n                  }\n                };\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n      Ember.setProperties(this, {\n        countriesList: {\n          countries: [{\n            id: 'country_1',\n            value: 'INDIA',\n            shortCode: 'IND',\n            position: 1\n          }, {\n            id: 'country_2',\n            value: 'UNITED STATES',\n            shortCode: 'USA',\n            position: 2\n          }, {\n            id: 'country_3',\n            value: 'CHINA',\n            shortCode: 'CHN',\n            position: 3\n          }, {\n            id: 'country_4',\n            value: 'SRI LANKA',\n            shortCode: 'LKA',\n            position: 4\n          }, {\n            id: 'country_5',\n            value: 'JAPAN',\n            shortCode: 'JPN',\n            position: 5\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 check if the auto-complete field renders\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.autoComplete(this);\n\n                _context2.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger').length, 1, 'auto-complete renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 when clicked dropdown is shown for searching\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this);\n\n                _context4.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                _context4.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.find)('li').innerText, \"Type to search\", \"default search message 'Type to search' appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(7);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  optionLabelPath: 'value'\n                });\n\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context6.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context6.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n\n                        case 6:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionLabelPath='shortCode' check all the options are displayed in order when search query executed\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(7);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  optionLabelPath: 'shortCode'\n                });\n\n                _context8.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context8.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context8.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context8.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"IND\", \"choice 1 is 'IND'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"USA\", \"choice 2 is 'USA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHN\", \"choice 3 is 'CHN'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"LKA\", \"choice 4 is 'LKA'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JPN\", \"choice 5 is 'JPN'\");\n\n                        case 6:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 optionValuePath='value' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                _context10.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context10.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context10.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(_this3.model.country, \"INDIA\");\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 optionValuePath='shortCode' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this4.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  optionValuePath: 'shortCode',\n                  optionLabelPath: 'value'\n                });\n\n                _context12.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context12.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context12.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context12.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n\n                        case 2:\n                          assert.equal(_this4.model.country, \"CHN\");\n\n                        case 3:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x6) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 optionValuePath='id' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this5.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  optionValuePath: 'id',\n                  optionLabelPath: 'value'\n                });\n\n                _context14.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context14.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context14.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context14.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                  return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n\n                        case 2:\n                          assert.equal(_this5.model.country, \"country_3\");\n\n                        case 3:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x7) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 optionValuePath='' check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this6.choicesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  optionLabelPath: 'value',\n                  optionValuePath: ''\n                });\n\n                _context16.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context16.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context16.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context16.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {\n                  return regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          _context15.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);\n\n                        case 2:\n                          assert.deepEqual(_this6.model.country, {\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x8) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9 passing optionTargetPath to render choices and check selected option is saved on the model\", /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this7.countriesList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  optionLabelPath: 'value',\n                  optionValuePath: '',\n                  optionTargetPath: 'countries'\n                });\n\n                _context18.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context18.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context18.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context18.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                  return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                    while (1) {\n                      switch (_context17.prev = _context17.next) {\n                        case 0:\n                          _context17.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);\n\n                        case 2:\n                          assert.deepEqual(_this7.model.country, {\n                            \"id\": \"country_5\",\n                            \"position\": 5,\n                            \"shortCode\": \"JPN\",\n                            \"value\": \"JAPAN\"\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context17.stop();\n                      }\n                    }\n                  }, _callee17);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x9) {\n        return _ref17.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the auto-complete component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"여보세요\";\n\n                _createField.default.autoComplete(this, {\n                  label: sampleLabel\n                });\n\n                _context19.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      return function (_x10) {\n        return _ref19.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/auto-complete/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 3\n        }]\n      });\n    });\n    hooks.afterEach(function () {});\n    (0, _qunit.test)(\"#TEST1 optionValuePath=optionLabelPath='value' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: \"INDIA\"\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"INDIA\", \"Field renderd with value 'INDIA'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionLabelPath='shortCode' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  optionValuePath: '',\n                  optionLabelPath: 'shortCode'\n                });\n\n                this.model = {\n                  country: {\n                    id: 'country_5',\n                    value: 'JAPAN',\n                    shortCode: 'JPN',\n                    position: 5\n                  }\n                };\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"JPN\", \"Field renderd with value 'JPN'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionLabelPath='value' optionValuePath='' Check field gets renderd with saved value\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.autoComplete(this, {\n                  optionValuePath: '',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  country: {\n                    id: 'country_5',\n                    value: 'UNITED STATES',\n                    shortCode: 'USA',\n                    position: 5\n                  }\n                };\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED STATES\", \"Field renderd with value 'UNITED STATES'\");\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/component-test\", [\"ember-data\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/string-helper-methods\"], function (_emberData, _qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  var PromiseArray = _emberData.default.PromiseArray;\n  (0, _qunit.module)('Integration | Component | form fields/auto complete', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.renderDefaultField = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      this.renderCustomField = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    });\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        searchMethod: function searchMethod(term) {\n          var _this = this;\n\n          var url = encodeURI(Ember.get(this, 'url'));\n          var path = encodeURIComponent(Ember.get(this, 'optionLabelPath'));\n          term = encodeURIComponent(term);\n          url = /\\?.+=/.test(url) ? \"\".concat(url, \"&q=\").concat(term, \"&qf=\").concat(path) : \"\".concat(url, \"?q=\").concat(term, \"&qfield=\").concat(path);\n          var options = PromiseArray.create({\n            promise: new Ember.RSVP.Promise(function (resolve, reject) {\n              Ember.run.debounce(_this, function () {\n                Ember.$.getJSON(url).then(function (json) {\n                  return resolve(json);\n                }, reject);\n              }, Ember.get(_this, 'searchDebounce'));\n            })\n          });\n          Ember.set(this, 'options', options);\n          return options;\n        },\n        defaultFieldModel: {},\n        customFieldModel: {\n          customField: {}\n        },\n        defaultFieldSchema: {\n          name: 'Sample Contact Form',\n          fields: [{\n            id: 'company_id',\n            parent: null,\n            type: 'auto_complete',\n            label: 'Company',\n            hint: 'Enter_company_name',\n            name: 'company',\n            position: 1,\n            editable: true,\n            custom: false,\n            inputType: 'auto-complete',\n            fieldOptions: {},\n            fields: [],\n            link: 'url/search',\n            optionValuePath: 'id',\n            optionLabelPath: 'id'\n          }]\n        },\n        customFieldSchema: {\n          name: 'Sample Contact Form',\n          fields: [{\n            id: 'company_id',\n            parent: null,\n            type: 'auto_complete',\n            label: 'Company',\n            hint: 'Enter_company_name',\n            name: 'cf_company',\n            position: 1,\n            editable: true,\n            custom: true,\n            inputType: 'auto-complete',\n            fieldOptions: {},\n            fields: [],\n            link: 'url/search',\n            optionValuePath: 'value',\n            optionLabelPath: 'value'\n          }]\n        },\n        customSectionSchema: {\n          name: 'Sample Contact Form',\n          fields: [{\n            id: 'section_id',\n            parent: null,\n            type: 'section',\n            label: 'Parent Company',\n            name: 'cf_parent_company',\n            position: 1,\n            editable: true,\n            custom: true,\n            inputType: 'nested-section',\n            fieldOptions: {},\n            fields: [{\n              id: 'company_id',\n              parent: null,\n              type: 'auto_complete',\n              parent_id: 'section_id',\n              label: 'Company',\n              name: 'cf_company',\n              position: 1,\n              editable: true,\n              custom: true,\n              inputType: 'auto-complete',\n              fields: [],\n              link: 'url/search',\n              optionValuePath: 'value',\n              optionLabelPath: 'value'\n            }]\n          }]\n        },\n        autocompleteAsDependentFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'has_company_id',\n            parent: null,\n            type: 'dropdown',\n            label: 'Has Company',\n            name: 'has_company',\n            position: 1,\n            editable: true,\n            custom: false,\n            inputType: 'power-select-dependent-field',\n            placeholder: '',\n            fieldOptions: {\n              dependent: true\n            },\n            getChoices: [{\n              id: \"yes_id\",\n              value: \"Yes\",\n              position: 1,\n              dependentIds: {\n                field: [\"company_id\"],\n                choice: []\n              }\n            }, {\n              id: \"no_id\",\n              value: \"No\",\n              position: 2,\n              dependentIds: {\n                field: [],\n                choice: []\n              }\n            }],\n            fields: [{\n              id: 'company_id',\n              parent: null,\n              type: 'auto_complete',\n              label: 'Company',\n              name: 'company',\n              position: 1,\n              editable: true,\n              custom: false,\n              inputType: 'auto-complete',\n              fieldOptions: {},\n              fields: [],\n              link: 'url/search',\n              optionValuePath: 'id',\n              optionLabelPath: 'id'\n            }],\n            optionValuePath: 'id',\n            optionLabelPath: 'id'\n          }]\n        },\n        choicesList: [{\n          id: 'contact_1',\n          value: 'sam',\n          position: 1\n        }, {\n          id: 'contact_2',\n          value: 'joe',\n          position: 2\n        }, {\n          id: 'contact_3',\n          value: 'tim',\n          position: 3\n        }]\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)('auto-complete (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(4);\n                _context3.next = 3;\n                return this.renderDefaultField();\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'defaultFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_company_name', 'Hint for the field renders properly');\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(4);\n                _context4.next = 3;\n                return this.renderDefaultField();\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'customFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_company_name', 'Hint for the field renders properly');\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('should render results after typing a term, optionLabelPath is value', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(3);\n                _context6.next = 3;\n                return this.renderCustomField();\n\n              case 3:\n                _context6.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n                _context6.next = 8;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);\n\n              case 8:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this2.choicesList.length, \"results are loaded\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this2.choicesList[0].value, \"optionlabel path is honoured\");\n\n                        case 2:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('should render results after typing a term, optionLabelPath is id', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(3);\n                _context7.next = 3;\n                return this.renderDefaultField();\n\n              case 3:\n                _context7.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=contact_1&qf=id', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n                _context7.next = 8;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);\n\n              case 8:\n                return _context7.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this3.choicesList.length, \"results are loaded\");\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this3.choicesList[0].id, \"optionlabel path is honoured\");\n                }));\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x4) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('query url construction is proper when original url is simple', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n                _context8.next = 3;\n                return this.renderCustomField();\n\n              case 3:\n                _context8.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=contact_1&qf=value');\n                  request.ok({});\n                });\n                _context8.next = 8;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);\n\n              case 8:\n                return _context8.abrupt(\"return\", (0, _testHelpers.settled)());\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('query url construction is proper when original url already has queryparams', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'customFieldSchema.fields.0.link', 'url/search?otherParams=2');\n                _context9.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                _context9.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?otherParams=2&q=contact_1&qf=value');\n                  request.ok({});\n                });\n                _context9.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);\n\n              case 9:\n                return _context9.abrupt(\"return\", (0, _testHelpers.settled)());\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x6) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Handle link that is not urlsafe', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'customFieldSchema.fields.0.link', 'url/%search%');\n                _context10.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                _context10.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/%search%'), function (request) {\n                  assert.equal(request.url, encodeURI('url/%search%?q=contact_1&qf=value'));\n                  request.ok(_this4.choicesList);\n                });\n                _context10.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);\n\n              case 9:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this4.choicesList.length, \"results are loaded\");\n                }));\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x7) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Handle link with queryparams that is not urlsafe', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'customFieldSchema.fields.0.link', 'url/search?qd=%123 435');\n                _context11.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"BMpoJNP7\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                _context11.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  assert.equal(request.url, encodeURI('url/search?qd=%123 435&q=contact_1&qf=value'));\n                  request.ok(_this5.choicesList);\n                });\n                _context11.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].id);\n\n              case 9:\n                return _context11.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this5.choicesList.length, \"results are loaded\");\n                }));\n\n              case 10:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x8) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Search a term that is not urlsafe', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(2);\n                _context13.next = 3;\n                return this.renderCustomField();\n\n              case 3:\n                _context13.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  assert.equal(\"url/search?q=\".concat(encodeURIComponent('%asd%&'), \"&qf=value\"), request.url);\n                  request.ok(_this6.choicesList);\n                });\n                _context13.next = 8;\n                return (0, _emberPowerSelect.typeInSearch)('%asd%&');\n\n              case 8:\n                return _context13.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                  return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, \"Results are loaded\");\n\n                        case 1:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x9) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Select one of the listed choices when optionLabelPath is value', /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(2);\n                _context15.next = 3;\n                return this.renderCustomField();\n\n              case 3:\n                _context15.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok(_this7.choicesList);\n                });\n                _context15.next = 8;\n                return (0, _emberPowerSelect.typeInSearch)('tim');\n\n              case 8:\n                return _context15.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                  return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          _context14.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, _this7.choicesList[1].value);\n                          assert.equal(_this7.customFieldModel.customField.cf_company, _this7.choicesList[1].value);\n\n                        case 4:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x10) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Select one of the listed choices when optionLabelPath is id', /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(2);\n                _context17.next = 3;\n                return this.renderDefaultField();\n\n              case 3:\n                _context17.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok(_this8.choicesList);\n                });\n                _context17.next = 8;\n                return (0, _emberPowerSelect.typeInSearch)('tim');\n\n              case 8:\n                return _context17.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\n                  return regeneratorRuntime.wrap(function _callee16$(_context16) {\n                    while (1) {\n                      switch (_context16.prev = _context16.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, _this8.choicesList[2].id);\n                          assert.equal(_this8.defaultFieldModel.company, _this8.choicesList[2].id);\n\n                        case 3:\n                        case \"end\":\n                          return _context16.stop();\n                      }\n                    }\n                  }, _callee16);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x11) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Select one of the listed choices when choice id is integer', /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                assert.expect(3);\n                Ember.set(this, 'choicesList.0.id', '1');\n                _context19.next = 4;\n                return this.renderDefaultField();\n\n              case 4:\n                _context19.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok(_this9.choicesList);\n                });\n                _context19.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('tim');\n\n              case 9:\n                return _context19.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {\n                  return regeneratorRuntime.wrap(function _callee18$(_context18) {\n                    while (1) {\n                      switch (_context18.prev = _context18.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, \"results are loaded\");\n                          _context18.next = 3;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 3:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, _this9.choicesList[0].id);\n                          assert.equal(_this9.defaultFieldModel.company, _this9.choicesList[0].id);\n\n                        case 5:\n                        case \"end\":\n                          return _context18.stop();\n                      }\n                    }\n                  }, _callee18);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      return function (_x12) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('default-field: Select one of the listed choices when choices are an array of strings and not objects', /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                assert.expect(3);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', '');\n                _context21.next = 5;\n                return this.renderDefaultField();\n\n              case 5:\n                _context21.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok([\"firstChoice\", \"secondChoice\", \"thirdChoice\"]);\n                });\n                _context21.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('tim');\n\n              case 10:\n                return _context21.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {\n                  return regeneratorRuntime.wrap(function _callee20$(_context20) {\n                    while (1) {\n                      switch (_context20.prev = _context20.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, \"results are loaded\");\n                          _context20.next = 3;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n\n                        case 3:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, \"thirdChoice\");\n                          assert.equal(_this10.defaultFieldModel.company, \"thirdChoice\");\n\n                        case 5:\n                        case \"end\":\n                          return _context20.stop();\n                      }\n                    }\n                  }, _callee20);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      return function (_x13) {\n        return _ref21.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('custom-field: Select one of the listed choices when choices are an array of strings and not objects', /*#__PURE__*/function () {\n      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {\n        var _this11 = this;\n\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                assert.expect(3);\n                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.optionLabelPath', '');\n                _context23.next = 5;\n                return this.renderCustomField();\n\n              case 5:\n                _context23.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok([\"firstChoice\", \"secondChoice\", \"thirdChoice\"]);\n                });\n                _context23.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('tim');\n\n              case 10:\n                return _context23.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {\n                  return regeneratorRuntime.wrap(function _callee22$(_context22) {\n                    while (1) {\n                      switch (_context22.prev = _context22.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, \"results are loaded\");\n                          _context22.next = 3;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n\n                        case 3:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, \"thirdChoice\");\n                          assert.equal(_this11.customFieldModel.customField.cf_company, \"thirdChoice\");\n\n                        case 5:\n                        case \"end\":\n                          return _context22.stop();\n                      }\n                    }\n                  }, _callee22);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      return function (_x14) {\n        return _ref23.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('After Passing fieldActions, it should render results', /*#__PURE__*/function () {\n      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {\n        var _this12 = this;\n\n        var actionsJSON;\n        return regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                assert.expect(3);\n                actionsJSON = {\n                  'auto_complete': {\n                    'search': Ember.get(this, 'searchMethod')\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context25.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2wbDHtq+\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                _context25.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=sam&qfield=value', 'query field is populated');\n                  request.ok(_this12.choicesList);\n                });\n                _context25.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);\n\n              case 10:\n                return _context25.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {\n                  return regeneratorRuntime.wrap(function _callee24$(_context24) {\n                    while (1) {\n                      switch (_context24.prev = _context24.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this12.choicesList.length, \"results are loaded\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this12.choicesList[0].value, \"optionlabel path is honoured\");\n\n                        case 2:\n                        case \"end\":\n                          return _context24.stop();\n                      }\n                    }\n                  }, _callee24);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      return function (_x15) {\n        return _ref25.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('After Passing fieldActions, it should render results when auto-complete is a child field', /*#__PURE__*/function () {\n      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {\n        var _this13 = this;\n\n        var actionsJSON;\n        return regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                assert.expect(3);\n                actionsJSON = {\n                  'auto_complete': {\n                    'search': Ember.get(this, 'searchMethod')\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context27.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"nx2UVkop\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customSectionSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                _context27.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"customField.cf_company\"]');\n\n              case 7:\n                _context27.next = 9;\n                return (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=sam&qfield=value', 'query field is populated');\n                  request.ok(_this13.choicesList);\n                });\n\n              case 9:\n                _context27.next = 11;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);\n\n              case 11:\n                return _context27.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {\n                  return regeneratorRuntime.wrap(function _callee26$(_context26) {\n                    while (1) {\n                      switch (_context26.prev = _context26.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this13.choicesList.length, \"results are loaded\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this13.choicesList[0].value, \"optionlabel path is honoured\");\n\n                        case 2:\n                        case \"end\":\n                          return _context26.stop();\n                      }\n                    }\n                  }, _callee26);\n                }))));\n\n              case 12:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      return function (_x16) {\n        return _ref27.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Autocomplete(creatable): Passing callback function using fieldActions, it should execute callback function when new choice is created and selected', /*#__PURE__*/function () {\n      var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {\n        var _this14 = this;\n\n        var callbackfun, actionsJSON;\n        return regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {\n                  'multiple': false,\n                  'creatable': true\n                });\n\n                callbackfun = function callbackfun() {\n                  assert.ok(true, \"This assert statement is expected to be invoked.\");\n                };\n\n                actionsJSON = {\n                  'auto_complete': {\n                    'creatable': {\n                      'createNewOptionCallback': callbackfun\n                    }\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context29.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2wbDHtq+\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context29.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');\n                  request.ok(_this14.choicesList);\n                });\n                _context29.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)(\"India\");\n\n              case 12:\n                return _context29.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {\n                  return regeneratorRuntime.wrap(function _callee28$(_context28) {\n                    while (1) {\n                      switch (_context28.prev = _context28.next) {\n                        case 0:\n                          _context28.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                        case \"end\":\n                          return _context28.stop();\n                      }\n                    }\n                  }, _callee28);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      return function (_x17) {\n        return _ref29.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(' Autocomplete(multiple-with-create): Passing callback function using fieldActions, it should execute callback function when new choice is created and selected', /*#__PURE__*/function () {\n      var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(assert) {\n        var _this15 = this;\n\n        var callbackfun, actionsJSON;\n        return regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n\n                callbackfun = function callbackfun() {\n                  assert.ok(true, \"This assert statement is expected to be invoked.\");\n                };\n\n                actionsJSON = {\n                  'auto_complete': {\n                    'multiple_with_creatable': {\n                      'createNewOptionCallback': callbackfun\n                    }\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context31.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2wbDHtq+\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context31.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');\n                  request.ok(_this15.choicesList);\n                });\n                _context31.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)(\"India\");\n\n              case 12:\n                return _context31.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {\n                  return regeneratorRuntime.wrap(function _callee30$(_context30) {\n                    while (1) {\n                      switch (_context30.prev = _context30.next) {\n                        case 0:\n                          _context30.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                        case \"end\":\n                          return _context30.stop();\n                      }\n                    }\n                  }, _callee30);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      return function (_x18) {\n        return _ref31.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Autocomplete(creatable): Passing callback function using fieldActions, it should not execute callback function when exisiting choice is selected', /*#__PURE__*/function () {\n      var _ref33 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(assert) {\n        var _this16 = this;\n\n        var callbackfun, actionsJSON;\n        return regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {\n                  'multiple': false,\n                  'creatable': true\n                });\n\n                callbackfun = function callbackfun() {\n                  assert.ok(false, \"This assert statement is not expected to be invoked.\");\n                };\n\n                actionsJSON = {\n                  'auto_complete': {\n                    'creatable': {\n                      'createNewOptionCallback': callbackfun\n                    }\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context33.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2wbDHtq+\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context33.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');\n                  request.ok(_this16.choicesList);\n                });\n                _context33.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)(\"India\");\n\n              case 12:\n                return _context33.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {\n                  return regeneratorRuntime.wrap(function _callee32$(_context32) {\n                    while (1) {\n                      switch (_context32.prev = _context32.next) {\n                        case 0:\n                          _context32.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                        case 2:\n                        case \"end\":\n                          return _context32.stop();\n                      }\n                    }\n                  }, _callee32);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      return function (_x19) {\n        return _ref33.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Autocomplete(multiple-with-create): Passing callback function using fieldActions, it should execute callback function when existing choice is selected', /*#__PURE__*/function () {\n      var _ref35 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35(assert) {\n        var _this17 = this;\n\n        var callbackfun, actionsJSON;\n        return regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n\n                callbackfun = function callbackfun() {\n                  assert.ok(false, \"This assert statement is not expected to be invoked.\");\n                };\n\n                actionsJSON = {\n                  'auto_complete': {\n                    'multiple_with_creatable': {\n                      'createNewOptionCallback': callbackfun\n                    }\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context35.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2wbDHtq+\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context35.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');\n                  request.ok(_this17.choicesList);\n                });\n                _context35.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)(\"India\");\n\n              case 12:\n                return _context35.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {\n                  return regeneratorRuntime.wrap(function _callee34$(_context34) {\n                    while (1) {\n                      switch (_context34.prev = _context34.next) {\n                        case 0:\n                          _context34.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                        case 2:\n                        case \"end\":\n                          return _context34.stop();\n                      }\n                    }\n                  }, _callee34);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      return function (_x20) {\n        return _ref35.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(' Passing callback function using fieldActions, it should not execute callback function because creatable is false', /*#__PURE__*/function () {\n      var _ref37 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(assert) {\n        var _this18 = this;\n\n        var callbackfun, actionsJSON;\n        return regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {\n                  'multiple': false,\n                  'creatable': false\n                });\n\n                callbackfun = function callbackfun() {\n                  assert.ok(false, \"This assert statement is not expected to be invoked.\");\n                };\n\n                actionsJSON = {\n                  'auto_complete': {\n                    'creatable': {\n                      'createNewOptionCallback': callbackfun\n                    }\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context37.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2wbDHtq+\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context37.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');\n                  request.ok(_this18.choicesList);\n                });\n                _context37.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)(\"India\");\n\n              case 12:\n                return _context37.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {\n                  return regeneratorRuntime.wrap(function _callee36$(_context36) {\n                    while (1) {\n                      switch (_context36.prev = _context36.next) {\n                        case 0:\n                          _context36.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                        case \"end\":\n                          return _context36.stop();\n                      }\n                    }\n                  }, _callee36);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      return function (_x21) {\n        return _ref37.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(' Autocomplete(multiple): Passing callback function using fieldActions, it should execute callback function because creatable is false', /*#__PURE__*/function () {\n      var _ref39 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39(assert) {\n        var _this19 = this;\n\n        var callbackfun, actionsJSON;\n        return regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': false\n                });\n\n                callbackfun = function callbackfun() {\n                  assert.ok(false, \"This assert statement is not expected to be invoked.\");\n                };\n\n                actionsJSON = {\n                  'auto_complete': {\n                    'multiple_with_creatable': {\n                      'createNewOptionCallback': callbackfun\n                    }\n                  }\n                };\n                Ember.set(this, 'fieldActions', actionsJSON);\n                _context39.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"2wbDHtq+\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldActions\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldActions\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context39.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=India&qf=value', 'query field is populated');\n                  request.ok(_this19.choicesList);\n                });\n                _context39.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)(\"India\");\n\n              case 12:\n                return _context39.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {\n                  return regeneratorRuntime.wrap(function _callee38$(_context38) {\n                    while (1) {\n                      switch (_context38.prev = _context38.next) {\n                        case 0:\n                          _context38.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                        case 2:\n                        case \"end\":\n                          return _context38.stop();\n                      }\n                    }\n                  }, _callee38);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      return function (_x22) {\n        return _ref39.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Apps can dynamically add a new choice in creatable auto-complete', /*#__PURE__*/function () {\n      var _ref41 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(assert) {\n        var _this20 = this;\n\n        return regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.creatable', true);\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.creatableDataKey', 'company_new_choice');\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok(_this20.choicesList);\n                });\n                _context41.next = 7;\n                return this.renderDefaultField();\n\n              case 7:\n                _context41.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context41.next = 11;\n                return (0, _emberPowerSelect.typeInSearch)('john');\n\n              case 11:\n                return _context41.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {\n                  return regeneratorRuntime.wrap(function _callee40$(_context40) {\n                    while (1) {\n                      switch (_context40.prev = _context40.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add \"john\"...', '1st option shows \\'Add \"john\"...\\'');\n\n                        case 1:\n                        case \"end\":\n                          return _context40.stop();\n                      }\n                    }\n                  }, _callee40);\n                }))));\n\n              case 12:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      return function (_x23) {\n        return _ref41.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (optionValuePath=\\'\\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {\n      var _ref43 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42(assert) {\n        return regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldModel.company', this.choicesList[1]);\n                _context42.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, this.choicesList[1].value);\n                assert.equal(this.defaultFieldModel.company, this.choicesList[1]);\n\n              case 8:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      return function (_x24) {\n        return _ref43.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (optionValuePath=\\'value\\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {\n      var _ref44 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43(assert) {\n        return regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');\n                Ember.set(this, 'defaultFieldModel.company', 'joe');\n                _context43.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, this.choicesList[1].value);\n                assert.equal(this.defaultFieldModel.company, this.choicesList[1].value);\n\n              case 8:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      return function (_x25) {\n        return _ref44.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref45 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44(assert) {\n        return regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                assert.expect(3);\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                _context44.next = 4;\n                return this.renderDefaultField();\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'defaultFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n              case 7:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      return function (_x26) {\n        return _ref45.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref46 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45(assert) {\n        return regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                assert.expect(3);\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                _context45.next = 4;\n                return this.renderCustomField();\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), Ember.get(this, 'customFieldSchema.fields.0.label').trim(), 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled ');\n\n              case 7:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      return function (_x27) {\n        return _ref46.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'value\\'): should not show create option, when choice already exists in dropdown', /*#__PURE__*/function () {\n      var _ref47 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(assert) {\n        var _this21 = this;\n\n        return regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                assert.expect(11);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                _context48.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');\n                  request.ok(_this21.choicesList);\n                });\n                _context48.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context48.next = 11;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);\n\n              case 11:\n                return _context48.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee47$(_context47) {\n                    while (1) {\n                      switch (_context47.prev = _context47.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this21.choicesList.length, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this21.choicesList[0].value, 'First option is \\'sam\\' and not a create option');\n                          _context47.next = 4;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 4:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×sam', 'Choice \\'sam\\' is now selected');\n                          assert.equal(Ember.get(_this21, 'defaultFieldModel.company')[0], 'sam', 'Model contains \\'sam\\' as first value');\n                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                            assert.equal(request.url, 'url/search?q=joe&qf=value', 'query field is populated');\n                            request.ok(_this21.choicesList);\n                          });\n                          _context47.next = 10;\n                          return (0, _emberPowerSelect.typeInSearch)(_this21.choicesList[1].value);\n\n                        case 10:\n                          return _context47.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46() {\n                            var optionDomElement;\n                            return regeneratorRuntime.wrap(function _callee46$(_context46) {\n                              while (1) {\n                                switch (_context46.prev = _context46.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this21.choicesList.length - 1, 'results are loaded');\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this21.choicesList[1].value, 'Now first option is \\'joe\\'');\n                                    _context46.next = 4;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 4:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×sam×joe', 'Choices \\'sam\\' and \\'joe\\' are now selected');\n                                    assert.equal(Ember.get(_this21, 'defaultFieldModel.company')[0], 'sam', 'Model contains \\'sam\\' as first value');\n                                    assert.equal(Ember.get(_this21, 'defaultFieldModel.company')[1], 'joe', 'Model contains \\'joe\\' as second value');\n\n                                  case 8:\n                                  case \"end\":\n                                    return _context46.stop();\n                                }\n                              }\n                            }, _callee46);\n                          }))));\n\n                        case 11:\n                        case \"end\":\n                          return _context47.stop();\n                      }\n                    }\n                  }, _callee47);\n                }))));\n\n              case 12:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n\n      return function (_x28) {\n        return _ref47.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'\\'): should not show create option, when choice already exists in dropdown', /*#__PURE__*/function () {\n      var _ref50 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51(assert) {\n        var _this22 = this;\n\n        return regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                assert.expect(11);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                _context51.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');\n                  request.ok(_this22.choicesList);\n                });\n                _context51.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context51.next = 11;\n                return (0, _emberPowerSelect.typeInSearch)(this.choicesList[0].value);\n\n              case 11:\n                return _context51.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee50$(_context50) {\n                    while (1) {\n                      switch (_context50.prev = _context50.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this22.choicesList.length, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this22.choicesList[0].value, 'First option is \\'sam\\' and not a create option');\n                          _context50.next = 4;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 4:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×sam', 'Choice \\'sam\\' is now selected');\n                          assert.deepEqual(Ember.get(_this22, 'defaultFieldModel.company')[0], _this22.choicesList[0], 'Model contains \\'sam\\' as first value');\n                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                            assert.equal(request.url, 'url/search?q=joe&qf=value', 'query field is populated');\n                            request.ok(_this22.choicesList);\n                          });\n                          _context50.next = 10;\n                          return (0, _emberPowerSelect.typeInSearch)(_this22.choicesList[1].value);\n\n                        case 10:\n                          return _context50.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49() {\n                            var optionDomElement;\n                            return regeneratorRuntime.wrap(function _callee49$(_context49) {\n                              while (1) {\n                                switch (_context49.prev = _context49.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this22.choicesList.length - 1, 'results are loaded');\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this22.choicesList[1].value, 'Now first option is \\'joe\\'');\n                                    _context49.next = 4;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 4:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×sam×joe', 'Choices \\'sam\\' and \\'joe\\' are now selected');\n                                    assert.deepEqual(Ember.get(_this22, 'defaultFieldModel.company')[0], _this22.choicesList[0], 'Model contains \\'sam\\' as first value');\n                                    assert.deepEqual(Ember.get(_this22, 'defaultFieldModel.company')[1], _this22.choicesList[1], 'Model contains \\'joe\\' as second value');\n\n                                  case 8:\n                                  case \"end\":\n                                    return _context49.stop();\n                                }\n                              }\n                            }, _callee49);\n                          }))));\n\n                        case 11:\n                        case \"end\":\n                          return _context50.stop();\n                      }\n                    }\n                  }, _callee50);\n                }))));\n\n              case 12:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this);\n      }));\n\n      return function (_x29) {\n        return _ref50.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'value\\'): should show create option, when choice doesn\\'t exists in dropdown', /*#__PURE__*/function () {\n      var _ref53 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54(assert) {\n        var _this23 = this;\n\n        return regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                assert.expect(11);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                _context54.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=john&qf=value', 'query field is populated');\n                  request.ok(_this23.choicesList);\n                });\n                _context54.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context54.next = 11;\n                return (0, _emberPowerSelect.typeInSearch)('john');\n\n              case 11:\n                return _context54.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee53$(_context53) {\n                    while (1) {\n                      switch (_context53.prev = _context53.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this23.choicesList.length + 1, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add \"john\"...', 'First option is a to add a new option \\'john\\'');\n                          _context53.next = 4;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 4:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×john', 'Choice \\'john\\' is now selected');\n                          assert.equal(Ember.get(_this23, 'defaultFieldModel.company')[0], 'john', 'Model contains \\'john\\' as first value');\n                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                            assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');\n                            request.ok(_this23.choicesList);\n                          });\n                          _context53.next = 10;\n                          return (0, _emberPowerSelect.typeInSearch)(_this23.choicesList[0].value);\n\n                        case 10:\n                          return _context53.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52() {\n                            var optionDomElement;\n                            return regeneratorRuntime.wrap(function _callee52$(_context52) {\n                              while (1) {\n                                switch (_context52.prev = _context52.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this23.choicesList.length, 'results are loaded');\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this23.choicesList[0].value, 'Now first option is \\'sam\\'');\n                                    _context52.next = 4;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 4:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×john×sam', 'Choices \\'sam\\' and \\'joe\\' are now selected');\n                                    assert.equal(Ember.get(_this23, 'defaultFieldModel.company')[0], 'john', 'Model contains \\'john\\' as first value');\n                                    assert.equal(Ember.get(_this23, 'defaultFieldModel.company')[1], 'sam', 'Model contains \\'sam\\' as second value');\n\n                                  case 8:\n                                  case \"end\":\n                                    return _context52.stop();\n                                }\n                              }\n                            }, _callee52);\n                          }))));\n\n                        case 11:\n                        case \"end\":\n                          return _context53.stop();\n                      }\n                    }\n                  }, _callee53);\n                }))));\n\n              case 12:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this);\n      }));\n\n      return function (_x30) {\n        return _ref53.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'\\'): should show create option, when choice doesn\\'t exists in dropdown', /*#__PURE__*/function () {\n      var _ref56 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57(assert) {\n        var _this24 = this;\n\n        return regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                assert.expect(11);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                _context57.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=john&qf=value', 'query field is populated');\n                  request.ok(_this24.choicesList);\n                });\n                _context57.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context57.next = 11;\n                return (0, _emberPowerSelect.typeInSearch)('john');\n\n              case 11:\n                return _context57.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56() {\n                  var johnObject, optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee56$(_context56) {\n                    while (1) {\n                      switch (_context56.prev = _context56.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this24.choicesList.length + 1, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add \"john\"...', 'First option is a to add a new option \\'john\\'');\n                          _context56.next = 4;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 4:\n                          johnObject = {\n                            value: 'john'\n                          };\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×john', 'Choice \\'john\\' is now selected');\n                          assert.deepEqual(Ember.get(_this24, 'defaultFieldModel.company')[0], johnObject, 'Model contains \\'john\\' as first value');\n                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                            assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');\n                            request.ok(_this24.choicesList);\n                          });\n                          _context56.next = 11;\n                          return (0, _emberPowerSelect.typeInSearch)(_this24.choicesList[0].value);\n\n                        case 11:\n                          return _context56.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55() {\n                            var optionDomElement;\n                            return regeneratorRuntime.wrap(function _callee55$(_context55) {\n                              while (1) {\n                                switch (_context55.prev = _context55.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this24.choicesList.length, 'results are loaded');\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this24.choicesList[0].value, 'Now first option is \\'sam\\'');\n                                    _context55.next = 4;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 4:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×john×sam', 'Choices \\'sam\\' and \\'joe\\' are now selected');\n                                    assert.deepEqual(Ember.get(_this24, 'defaultFieldModel.company')[0], johnObject, 'Model contains \\'john\\' as first value');\n                                    assert.deepEqual(Ember.get(_this24, 'defaultFieldModel.company')[1], _this24.choicesList[0], 'Model contains \\'sam\\' as second value');\n\n                                  case 8:\n                                  case \"end\":\n                                    return _context55.stop();\n                                }\n                              }\n                            }, _callee55);\n                          }))));\n\n                        case 12:\n                        case \"end\":\n                          return _context56.stop();\n                      }\n                    }\n                  }, _callee56);\n                }))));\n\n              case 12:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      return function (_x31) {\n        return _ref56.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'value\\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {\n      var _ref59 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59(assert) {\n        var _this25 = this;\n\n        return regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                assert.expect(9);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                Ember.set(this, 'defaultFieldModel.company', ['joe', 'john']);\n                _context59.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=emma&qf=value', 'query field is populated');\n                  request.ok(_this25.choicesList);\n                });\n                _context59.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 10:\n                _context59.next = 12;\n                return (0, _emberPowerSelect.typeInSearch)('emma');\n\n              case 12:\n                return _context59.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee58$(_context58) {\n                    while (1) {\n                      switch (_context58.prev = _context58.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this25.choicesList.length, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add \"emma\"...', 'First option is a to add a new option \\'emma\\'');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1].innerText, 'sam', 'Second option is \\'sam\\'');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2].innerText, 'tim', 'Second option is \\'tim\\'');\n                          _context58.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 6:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×joe×john×emma', 'Choices \\'joe\\', \\'john\\' and \\'emma\\' are now selected');\n                          assert.equal(Ember.get(_this25, 'defaultFieldModel.company')[0], 'joe', 'Model contains \\'joe\\' as first value');\n                          assert.equal(Ember.get(_this25, 'defaultFieldModel.company')[1], 'john', 'Model contains \\'john\\' as second value');\n                          assert.equal(Ember.get(_this25, 'defaultFieldModel.company')[2], 'emma', 'Model contains \\'emma\\' as last value');\n\n                        case 11:\n                        case \"end\":\n                          return _context58.stop();\n                      }\n                    }\n                  }, _callee58);\n                }))));\n\n              case 13:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n\n      return function (_x32) {\n        return _ref59.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'\\'): in edit scenerio, choices are shown as selected', /*#__PURE__*/function () {\n      var _ref61 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee61(assert) {\n        var _this26 = this;\n\n        var data, johnObject;\n        return regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                assert.expect(9);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                data = [];\n                johnObject = {\n                  id: 'contact_4',\n                  value: 'john',\n                  position: 4\n                };\n                data.push(this.choicesList[1]);\n                data.push(johnObject);\n                Ember.set(this, 'defaultFieldModel.company', data);\n                _context61.next = 11;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 11:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=emma&qf=value', 'query field is populated');\n                  request.ok(_this26.choicesList);\n                });\n                _context61.next = 14;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 14:\n                _context61.next = 16;\n                return (0, _emberPowerSelect.typeInSearch)('emma');\n\n              case 16:\n                return _context61.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60() {\n                  var emmaObject, optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee60$(_context60) {\n                    while (1) {\n                      switch (_context60.prev = _context60.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this26.choicesList.length, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add \"emma\"...', 'First option is a to add a new option \\'emma\\'');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1].innerText, 'sam', 'Second option is \\'sam\\'');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2].innerText, 'tim', 'Second option is \\'tim\\'');\n                          _context60.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 6:\n                          emmaObject = {\n                            value: 'emma'\n                          };\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×joe×john×emma', 'Choices \\'joe\\', \\'john\\' and \\'emma\\' are now selected');\n                          assert.deepEqual(Ember.get(_this26, 'defaultFieldModel.company')[0], _this26.choicesList[1], 'Model contains \\'joe\\' as first value');\n                          assert.deepEqual(Ember.get(_this26, 'defaultFieldModel.company')[1], johnObject, 'Model contains \\'john\\' as second value');\n                          assert.deepEqual(Ember.get(_this26, 'defaultFieldModel.company')[2], emmaObject, 'Model contains \\'emma\\' as last value');\n\n                        case 12:\n                        case \"end\":\n                          return _context60.stop();\n                      }\n                    }\n                  }, _callee60);\n                }))));\n\n              case 17:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this);\n      }));\n\n      return function (_x33) {\n        return _ref61.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'\\'): works properly when made a dependent field', /*#__PURE__*/function () {\n      var _ref63 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee64(assert) {\n        var _this27 = this;\n\n        return regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                assert.expect(11);\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                _context64.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Sw9GAbfG\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"autocompleteAsDependentFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=john&qf=value', 'query field is populated');\n                  request.ok(_this27.choicesList);\n                });\n                _context64.next = 11;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"hasCompany\"] .ember-power-select-trigger')[0]);\n\n              case 11:\n                _context64.next = 13;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"hasCompany\"] .ember-power-select-trigger')[0], 13);\n\n              case 13:\n                _context64.next = 15;\n                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"company\"]');\n\n              case 15:\n                _context64.next = 17;\n                return (0, _emberPowerSelect.typeInSearch)('john');\n\n              case 17:\n                return _context64.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee63() {\n                  var johnObject, optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee63$(_context63) {\n                    while (1) {\n                      switch (_context63.prev = _context63.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this27.choicesList.length + 1, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, 'Add \"john\"...', 'First option is a to add a new option \\'john\\'');\n                          _context63.next = 4;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 4:\n                          johnObject = {\n                            value: 'john'\n                          };\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×john', 'Choice \\'john\\' is now selected');\n                          assert.deepEqual(Ember.get(_this27, 'defaultFieldModel.company')[0], johnObject, 'Model contains \\'john\\' as first value');\n                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                            assert.equal(request.url, 'url/search?q=sam&qf=value', 'query field is populated');\n                            request.ok(_this27.choicesList);\n                          });\n                          _context63.next = 11;\n                          return (0, _emberPowerSelect.typeInSearch)(_this27.choicesList[0].value);\n\n                        case 11:\n                          return _context63.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee62() {\n                            var optionDomElement;\n                            return regeneratorRuntime.wrap(function _callee62$(_context62) {\n                              while (1) {\n                                switch (_context62.prev = _context62.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], _this27.choicesList.length, 'results are loaded');\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0].innerText, _this27.choicesList[0].value, 'Now first option is \\'sam\\'');\n                                    _context62.next = 4;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 4:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText']), '×john×sam', 'Choices \\'sam\\' and \\'joe\\' are now selected');\n                                    assert.deepEqual(Ember.get(_this27, 'defaultFieldModel.company')[0], johnObject, 'Model contains \\'john\\' as first value');\n                                    assert.deepEqual(Ember.get(_this27, 'defaultFieldModel.company')[1], _this27.choicesList[0], 'Model contains \\'sam\\' as second value');\n\n                                  case 8:\n                                  case \"end\":\n                                    return _context62.stop();\n                                }\n                              }\n                            }, _callee62);\n                          }))));\n\n                        case 12:\n                        case \"end\":\n                          return _context63.stop();\n                      }\n                    }\n                  }, _callee63);\n                }))));\n\n              case 18:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64, this);\n      }));\n\n      return function (_x34) {\n        return _ref63.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (multiple & creatable) (optionValuePath=\\'\\'): works properly when made a dependent field, in edit scenerio', /*#__PURE__*/function () {\n      var _ref66 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee66(assert) {\n        var _this28 = this;\n\n        var data, johnObject;\n        return regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                assert.expect(9);\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionLabelPath', 'value');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'autocompleteAsDependentFieldSchema.fields.0.fields.0.fieldOptions', {\n                  'multiple': true,\n                  'creatable': true\n                });\n                data = [];\n                johnObject = {\n                  id: 'contact_4',\n                  value: 'john',\n                  position: 4\n                };\n                data.push(this.choicesList[1]);\n                data.push(johnObject);\n                Ember.set(this, 'defaultFieldModel.hasCompany', Ember.get(this, 'autocompleteAsDependentFieldSchema.fields.0.getChoices.0'));\n                Ember.set(this, 'defaultFieldModel.company', data);\n                _context66.next = 14;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Sw9GAbfG\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"autocompleteAsDependentFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 14:\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=emma&qf=value', 'query field is populated');\n                  request.ok(_this28.choicesList);\n                });\n                _context66.next = 17;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 17:\n                _context66.next = 19;\n                return (0, _emberPowerSelect.typeInSearch)('emma');\n\n              case 19:\n                return _context66.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee65() {\n                  var parentFieldChoicesCount, emmaObject, optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee65$(_context65) {\n                    while (1) {\n                      switch (_context65.prev = _context65.next) {\n                        case 0:\n                          parentFieldChoicesCount = Ember.get(_this28, 'autocompleteAsDependentFieldSchema.fields.0.getChoices.length');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'] - parentFieldChoicesCount, _this28.choicesList.length, 'results are loaded');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 0].innerText, 'Add \"emma\"...', 'First option is a to add a new option \\'emma\\'');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 1].innerText, 'sam', 'Second option is \\'sam\\'');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 2].innerText, 'tim', 'Second option is \\'tim\\'');\n                          _context65.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[parentFieldChoicesCount + 0]);\n\n                        case 7:\n                          emmaObject = {\n                            value: 'emma'\n                          };\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"company\"] .ember-power-select-multiple-trigger');\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(optionDomElement[0]['innerText'].trim()), '×joe×john×emma', 'Choices \\'joe\\', \\'john\\' and \\'emma\\' are now selected');\n                          assert.deepEqual(Ember.get(_this28, 'defaultFieldModel.company')[0], _this28.choicesList[1], 'Model contains \\'joe\\' as first value');\n                          assert.deepEqual(Ember.get(_this28, 'defaultFieldModel.company')[1], johnObject, 'Model contains \\'john\\' as second value');\n                          assert.deepEqual(Ember.get(_this28, 'defaultFieldModel.company')[2], emmaObject, 'Model contains \\'emma\\' as last value');\n\n                        case 13:\n                        case \"end\":\n                          return _context65.stop();\n                      }\n                    }\n                  }, _callee65);\n                }))));\n\n              case 20:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66, this);\n      }));\n\n      return function (_x35) {\n        return _ref66.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete (optionLabelPath=\\'name\\', optionValuePath=\\'name\\'): should not make a network request ', /*#__PURE__*/function () {\n      var _ref68 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee68(assert) {\n        return regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                assert.expect(1);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {\n                  assert.equal(false, 'Unexpected network request found');\n                  request.ok(Ember.A([{\n                    id: 'contact_3',\n                    value: 'tim',\n                    name: 'Timithy',\n                    position: 3\n                  }]));\n                });\n                Ember.set(this, 'defaultFieldModel.company', 'Timithy');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');\n                _context68.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"wTW5IU0K\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"optionLabelPath\\\",\\\"optionValuePath\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]],\\\"name\\\",\\\"name\\\"]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                return _context68.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee67() {\n                  return regeneratorRuntime.wrap(function _callee67$(_context67) {\n                    while (1) {\n                      switch (_context67.prev = _context67.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, \"Timithy\");\n\n                        case 1:\n                        case \"end\":\n                          return _context67.stop();\n                      }\n                    }\n                  }, _callee67);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68, this);\n      }));\n\n      return function (_x36) {\n        return _ref68.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"auto-complete (optionValuePath='id'): should sent request to backend and resolve data from id to value\", /*#__PURE__*/function () {\n      var _ref70 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee70(assert) {\n        return regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {\n                  assert.equal(request.url, 'url/presearch?q=contact_2&qf=id', 'query field is populated');\n                  request.ok(Ember.A([{\n                    id: 'contact_2',\n                    value: 'sam',\n                    position: 1\n                  }]));\n                });\n                Ember.set(this, 'defaultFieldModel.company', 'contact_2');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'id');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'value');\n                _context70.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                return _context70.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee69() {\n                  return regeneratorRuntime.wrap(function _callee69$(_context69) {\n                    while (1) {\n                      switch (_context69.prev = _context69.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, \"sam\");\n\n                        case 1:\n                        case \"end\":\n                          return _context69.stop();\n                      }\n                    }\n                  }, _callee69);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      return function (_x37) {\n        return _ref70.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"auto-complete (optionLabelPath='name'): property other than id and value\", /*#__PURE__*/function () {\n      var _ref72 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee72(assert) {\n        return regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {\n                  assert.equal(request.url, 'url/presearch?q=contact_2&qf=id', 'query field is populated');\n                  request.ok(Ember.A([{\n                    id: 'contact_2',\n                    value: 'sam',\n                    name: 'Samuel',\n                    position: 1\n                  }]));\n                });\n                Ember.set(this, 'defaultFieldModel.company', 'contact_2');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'id');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionLabelPath', 'name');\n                _context72.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                return _context72.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee71() {\n                  return regeneratorRuntime.wrap(function _callee71$(_context71) {\n                    while (1) {\n                      switch (_context71.prev = _context71.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0].innerText, \"Samuel\");\n\n                        case 1:\n                        case \"end\":\n                          return _context71.stop();\n                      }\n                    }\n                  }, _callee71);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      return function (_x38) {\n        return _ref72.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"auto-complete : lookup_prefetch_url is null, should not make any request to backend\", /*#__PURE__*/function () {\n      var _ref74 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee74(assert) {\n        return regeneratorRuntime.wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                assert.expect(1);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=contact_2&qf=id', 'query field is populated');\n                  request.ok(Ember.A([{\n                    id: 'contact_2',\n                    value: 'sam',\n                    name: 'Samuel',\n                    position: 1\n                  }]));\n                });\n                Ember.set(this, 'defaultFieldModel.company', 'contact_2');\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', 'value');\n                _context74.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                return _context74.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee73() {\n                  return regeneratorRuntime.wrap(function _callee73$(_context73) {\n                    while (1) {\n                      switch (_context73.prev = _context73.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0], undefined);\n\n                        case 1:\n                        case \"end\":\n                          return _context73.stop();\n                      }\n                    }\n                  }, _callee73);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, this);\n      }));\n\n      return function (_x39) {\n        return _ref74.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('auto-complete : model has no value set, should not make a network request', /*#__PURE__*/function () {\n      var _ref76 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee76(assert) {\n        return regeneratorRuntime.wrap(function _callee76$(_context76) {\n          while (1) {\n            switch (_context76.prev = _context76.next) {\n              case 0:\n                assert.expect(1);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/presearch', function (request) {\n                  assert.ok(false, \"Unexpected network request found\");\n                  request.ok(Ember.A([{}]));\n                });\n                Ember.set(this, 'defaultFieldModel.company', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.lookup_prefetch_url', 'url/presearch');\n                _context76.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"hGW5ygfo\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"optionLabelPath\\\",\\\"optionValuePath\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]],\\\"value\\\",\\\"id\\\"]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                return _context76.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee75() {\n                  return regeneratorRuntime.wrap(function _callee75$(_context75) {\n                    while (1) {\n                      switch (_context75.prev = _context75.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-selected-item')[0], undefined);\n\n                        case 1:\n                        case \"end\":\n                          return _context75.stop();\n                      }\n                    }\n                  }, _callee75);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context76.stop();\n            }\n          }\n        }, _callee76, this);\n      }));\n\n      return function (_x40) {\n        return _ref76.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/allowClear/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete | fieldOptions | allowClear ', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }]\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 auto-complete(no-create, no-multiple) check options can be selected and cleared\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(7);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    allowClear: true,\n                    mutiple: false,\n                    creatable: false\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n                _context3.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context3.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context3.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(_this.model.country, \"INDIA\", \"Check value 'INDIA' is set on the model\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText), \"INDIA\", \"Check option 'INDIA' is selected\");\n                          _context2.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-clear-btn'));\n\n                        case 6:\n                          assert.equal(_this.model.country, null, \"Check 'INDIA' is removed from model\");\n                          _context2.next = 9;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 9:\n                          _context2.next = 11;\n                          return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n                        case 11:\n                          return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                            return regeneratorRuntime.wrap(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                    _context.next = 2;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                  case 2:\n                                    assert.equal(_this.model.country, \"UNITED STATES\", \"Check value 'UNITED STATES' is set on the model\");\n                                    assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText.trim(), \"UNITED STATES\", \"Check option 'UNITED STATES' is selected\");\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, _callee);\n                          }))));\n\n                        case 12:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 auto-complete(create, no-multiple) check options can be selected and cleared\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(7);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    allowClear: true,\n                    mutiple: false,\n                    creatable: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'shortCode'\n                });\n\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context6.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context6.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[3]);\n\n                        case 2:\n                          assert.equal(_this2.model.country, \"CHINA\", \"Check value 'CHINA' is set on the model\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText), \"CHN\", \"Check option 'CHN' is selected\");\n                          _context5.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-clear-btn'));\n\n                        case 6:\n                          assert.equal(_this2.model.country, null, \"Check 'CHINA' is removed from model\");\n                          _context5.next = 9;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 9:\n                          _context5.next = 11;\n                          return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n                        case 11:\n                          return _context5.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                            return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                              while (1) {\n                                switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    _context4.next = 2;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[4]);\n\n                                  case 2:\n                                    assert.equal(_this2.model.country, \"SRI LANKA\", \"Check value 'SRI LANKA' is set on the model\");\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.find)('.ember-power-select-selected-item').innerText), \"LKA\", \"Check option 'LKA' is selected\");\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }\n                            }, _callee4);\n                          }))));\n\n                        case 12:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    /*  YET TO BE CONFIRMED THE BEHAVIOUR : Refer [FSERV-274]\n    test(\"#TEST3 auto-complete(no-create, multiple) check options can be selected and cleared\", async function(assert) {\n      assert.expect(7);\n      createField.autoComplete(this, {\n        fieldOptions: {\n          allowClear: true,\n          multiple: true,\n          creatable: false\n        },\n        optionValuePath: 'value',\n        optionLabelPath: 'shortCode'\n      });\n       stubRequest('get', 'url/search', (request) => {\n        assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n        request.ok(this.choicesList);\n      });\n       await createField.renderForm(this);\n       await clickTrigger();\n      await typeInSearch('ABCD');\n      return wait().then(() => {\n        click(findAll('.ember-power-select-option')[0]);\n        assert.equal(this.model.country, \"INDIA\", \"Check value 'INDIA' is set on the model\");\n        assert.equal(find('.ember-power-select-selected-item').innerText, \"IND\", \"Check option 'IND' is selected\");\n         stubRequest('get', 'url/search', (request) => {\n          assert.equal(request.url, 'url/search?q=ABCD&qf=value', 'query field is populated');\n          request.ok(this.choicesList);\n        });\n        click(find('.ember-power-select-multiple-trigger'));\n        await typeInSearch('ABCD');\n      return wait().then(() => {\n        click(findAll('.ember-power-select-option')[1]);\n        assert.equal(this.model.country, null, \"Check 'CHINA' is removed from model\");\n         return wait().then(() => {\n          click(findAll('.ember-power-select-option')[4]);\n          assert.equal(this.model.country, \"SRI LANKA\", \"Check value 'SRI LANKA' is set on the model\");\n          assert.equal(find('.ember-power-select-selected-item').innerText, \"LKA\", \"Check option 'LKA' is selected\");\n        });\n      });\n      });\n    });\n    */\n\n    (0, _qunit.test)(\"#TEST4 auto-complete(create, multiple) check options can be selected and cleared\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(7);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    allowClear: true,\n                    multiple: true,\n                    creatable: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'shortCode'\n                });\n\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n                  request.ok(_this3.choicesList);\n                });\n                _context9.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context9.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context9.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context9.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                  return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                        case 2:\n                          assert.equal(_this3.model.country, \"INDIA\", \"Check value 'INDIA' is set on the model\");\n                          assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-multiple-option').innerText, \"× IND\", \"Check option 'IND' is selected\");\n                          (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                            assert.equal(request.url, 'url/search?q=ABCD&qf=shortCode', 'query field is populated');\n                            request.ok(_this3.choicesList);\n                          });\n                          _context8.next = 7;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 7:\n                          _context8.next = 9;\n                          return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n                        case 9:\n                          return _context8.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                            return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                              while (1) {\n                                switch (_context7.prev = _context7.next) {\n                                  case 0:\n                                    _context7.next = 2;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[2]);\n\n                                  case 2:\n                                    assert.deepEqual(_this3.model.country, [\"INDIA\", \"CHINA\"], \"Check 'INDIA' and 'CHINA' is added to model\");\n                                    _context7.next = 5;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                  case 5:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-multiple-option').innerText, \"× CHN\", \"Check option 'CHN' is selected\");\n                                    assert.deepEqual(_this3.model.country, [\"CHINA\"], \"Check value 'CHINA' is set on the model\");\n\n                                  case 7:\n                                  case \"end\":\n                                    return _context7.stop();\n                                }\n                              }\n                            }, _callee7);\n                          }))));\n\n                        case 10:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x3) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/custom/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete/hasDefaultChoices | custom', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }],\n        defaultChoiceList: [{\n          id: 'country_1',\n          value: 'UNITED KINGDOM',\n          shortCode: 'UKD',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'CANADA',\n          shortCode: 'CAN',\n          position: 2\n        }]\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 auto-complete(no-create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(25);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  if (!request.url.includes(\"?q=\")) {\n                    assert.equal(request.url, 'url/search', 'url without query params is populated');\n                    request.ok(_this.defaultChoiceList);\n                  } else {\n                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');\n                    request.ok(_this.choicesList);\n                  }\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    mutiple: false,\n                    creatable: false,\n                    hasDefaultChoices: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context4.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          _context3.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 6:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                          assert.equal(_this.model.customField.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          _context3.next = 10;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 10:\n                          _context3.next = 12;\n                          return (0, _emberPowerSelect.typeInSearch)('A');\n\n                        case 12:\n                          return _context3.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                              while (1) {\n                                switch (_context2.prev = _context2.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                                    _context2.next = 5;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                  case 5:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"CANADA\", \"Field renderd with value 'CANADA'\");\n                                    assert.equal(_this.model.customField.country, \"CANADA\", \"Check value 'CANADA' is set on the model\");\n                                    _context2.next = 9;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 9:\n                                    _context2.next = 11;\n                                    return (0, _emberPowerSelect.typeInSearch)('ABC');\n\n                                  case 11:\n                                    return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                                      return regeneratorRuntime.wrap(function _callee$(_context) {\n                                        while (1) {\n                                          switch (_context.prev = _context.next) {\n                                            case 0:\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n                                              _context.next = 8;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 8:\n                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"INDIA\", \"Field renderd with value 'INDIA'\");\n                                              assert.equal(_this.model.customField.country, \"INDIA\", \"Check value 'INDIA' is set on the model\");\n\n                                            case 10:\n                                            case \"end\":\n                                              return _context.stop();\n                                          }\n                                        }\n                                      }, _callee);\n                                    }))));\n\n                                  case 12:\n                                  case \"end\":\n                                    return _context2.stop();\n                                }\n                              }\n                            }, _callee2);\n                          }))));\n\n                        case 13:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 auto-complete(create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(28);\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    mutiple: false,\n                    hasDefaultChoices: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  if (!request.url.includes(\"?q=\")) {\n                    assert.equal(request.url, 'url/search', 'url without query params is populated');\n                    request.ok(_this2.defaultChoiceList);\n                  } else {\n                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');\n                    request.ok(_this2.choicesList);\n                  }\n                });\n                _context8.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context8.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          assert.equal(_this2.model.customField.country, undefined, \"no value set on model\");\n                          _context7.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 7:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                          assert.equal(_this2.model.customField.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          _context7.next = 11;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 11:\n                          _context7.next = 13;\n                          return (0, _emberPowerSelect.typeInSearch)('A');\n\n                        case 13:\n                          return _context7.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                            return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                              while (1) {\n                                switch (_context6.prev = _context6.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 3, \"3 choices are displayed\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"A\"...', \"choice 1 'Add \\\"A\\\"...'\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                                    _context6.next = 6;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                  case 6:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                                    assert.equal(_this2.model.customField.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                                    _context6.next = 10;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 10:\n                                    _context6.next = 12;\n                                    return (0, _emberPowerSelect.typeInSearch)('ABC');\n\n                                  case 12:\n                                    return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                                      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                                        while (1) {\n                                          switch (_context5.prev = _context5.next) {\n                                            case 0:\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"ABC\"...', \"choice 1 'Add \\\"ABC\\\"...'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n                                              _context5.next = 9;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                            case 9:\n                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"INDIA\", \"Field renderd with value 'INDIA'\");\n                                              assert.equal(_this2.model.customField.country, \"INDIA\", \"Check value 'INDIA' is set on the model\");\n\n                                            case 11:\n                                            case \"end\":\n                                              return _context5.stop();\n                                          }\n                                        }\n                                      }, _callee5);\n                                    }))));\n\n                                  case 13:\n                                  case \"end\":\n                                    return _context6.stop();\n                                }\n                              }\n                            }, _callee6);\n                          }))));\n\n                        case 14:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 auto-complete(create, multiple) Selecting multiple values with creatable as true and removing one or more choice/value \", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(21);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search', 'url without query params is populated');\n                  request.ok(_this3.defaultChoiceList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true,\n                    has_default_choices: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context15.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context15.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                return _context15.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                  return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          assert.equal(_this3.model.customField.country, undefined, \"no value set on model\");\n                          _context14.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 7:\n                          assert.equal(_this3.model.customField.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          return _context14.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                            return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                              while (1) {\n                                switch (_context13.prev = _context13.next) {\n                                  case 0:\n                                    _context13.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      if (!request.url.includes(\"?q=\")) {\n                                        assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                        request.ok(_this3.defaultChoiceList);\n                                      } else {\n                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');\n                                        request.ok(_this3.choicesList);\n                                      }\n                                    });\n                                    _context13.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n                                  case 5:\n                                    return _context13.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                                      return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                                        while (1) {\n                                          switch (_context12.prev = _context12.next) {\n                                            case 0:\n                                              _context12.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this3.model.customField.country, [\"UNITED KINGDOM\", \"INDIA\"], \"check 'UNITED KINGDOM' and 'INDIA'  is selected\");\n                                              _context12.next = 5;\n                                              return (0, _emberPowerSelect.clickTrigger)();\n\n                                            case 5:\n                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                request.ok(_this3.defaultChoiceList);\n                                              });\n                                              _context12.next = 8;\n                                              return (0, _emberPowerSelect.typeInSearch)('C');\n\n                                            case 8:\n                                              return _context12.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                                                return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                                                  while (1) {\n                                                    switch (_context11.prev = _context11.next) {\n                                                      case 0:\n                                                        _context11.next = 2;\n                                                        return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                                      case 2:\n                                                        assert.deepEqual(_this3.model.customField.country, [\"UNITED KINGDOM\", \"INDIA\", \"C\"], \"check 'UNITED KINGDOM','INDIA' and 'C'  is selected\");\n                                                        return _context11.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                                                          return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                                                            while (1) {\n                                                              switch (_context10.prev = _context10.next) {\n                                                                case 0:\n                                                                  _context10.next = 2;\n                                                                  return (0, _emberPowerSelect.clickTrigger)();\n\n                                                                case 2:\n                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                                    if (!request.url.includes(\"?q=\")) {\n                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                                      request.ok(_this3.defaultChoiceList);\n                                                                    } else {\n                                                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query params are populated');\n                                                                      request.ok(_this3.choicesList);\n                                                                    }\n                                                                  });\n                                                                  _context10.next = 5;\n                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                                                                case 5:\n                                                                  return _context10.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                                                                    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                                                                      while (1) {\n                                                                        switch (_context9.prev = _context9.next) {\n                                                                          case 0:\n                                                                            _context9.next = 2;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                                                          case 2:\n                                                                            assert.deepEqual(_this3.model.customField.country, [\"UNITED KINGDOM\", \"INDIA\", \"C\", \"UNITED\"], \"check 'UNITED KINGDOM','INDIA','C' and 'UNITED'  is selected\");\n                                                                            _context9.next = 5;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 5:\n                                                                            //  Remove first choice\n                                                                            assert.deepEqual(_this3.model.customField.country, [\"INDIA\", \"C\", \"UNITED\"], \"check 'INDIA','C' and 'UNITED'  is selected\");\n                                                                            _context9.next = 8;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 8:\n                                                                            assert.deepEqual(_this3.model.customField.country, [\"INDIA\", \"UNITED\"], \"check 'INDIA' and 'UNITED'  is selected\");\n                                                                            _context9.next = 11;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 11:\n                                                                            assert.deepEqual(_this3.model.customField.country, [\"INDIA\"], \"check 'INDIA' is selected\");\n                                                                            _context9.next = 14;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 14:\n                                                                            assert.deepEqual(_this3.model.customField.country, [], \"check if model is empty\");\n\n                                                                          case 15:\n                                                                          case \"end\":\n                                                                            return _context9.stop();\n                                                                        }\n                                                                      }\n                                                                    }, _callee9);\n                                                                  }))));\n\n                                                                case 6:\n                                                                case \"end\":\n                                                                  return _context10.stop();\n                                                              }\n                                                            }\n                                                          }, _callee10);\n                                                        }))));\n\n                                                      case 4:\n                                                      case \"end\":\n                                                        return _context11.stop();\n                                                    }\n                                                  }\n                                                }, _callee11);\n                                              }))));\n\n                                            case 9:\n                                            case \"end\":\n                                              return _context12.stop();\n                                          }\n                                        }\n                                      }, _callee12);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context13.stop();\n                                }\n                              }\n                            }, _callee13);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x3) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 auto-complete(no-create, multiple) Selecting multiple values with creatable as false and removing one or more choice/value \", /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                assert.expect(21);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search', 'url without query params is populated');\n                  request.ok(_this4.defaultChoiceList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  custom: true,\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true,\n                    has_default_choices: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context22.next = 6;\n                return _createField.default.renderForm(this);\n\n              case 6:\n                _context22.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                return _context22.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {\n                  return regeneratorRuntime.wrap(function _callee21$(_context21) {\n                    while (1) {\n                      switch (_context21.prev = _context21.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          assert.equal(_this4.model.customField.country, undefined, \"no value set on model\");\n                          _context21.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 7:\n                          assert.equal(_this4.model.customField.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          return _context21.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {\n                            return regeneratorRuntime.wrap(function _callee20$(_context20) {\n                              while (1) {\n                                switch (_context20.prev = _context20.next) {\n                                  case 0:\n                                    _context20.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      if (!request.url.includes(\"?q=\")) {\n                                        assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                        request.ok(_this4.defaultChoiceList);\n                                      } else {\n                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');\n                                        request.ok(_this4.choicesList);\n                                      }\n                                    });\n                                    _context20.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n                                  case 5:\n                                    return _context20.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\n                                      return regeneratorRuntime.wrap(function _callee19$(_context19) {\n                                        while (1) {\n                                          switch (_context19.prev = _context19.next) {\n                                            case 0:\n                                              _context19.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this4.model.customField.country, [\"UNITED KINGDOM\", \"INDIA\"], \"check 'UNITED KINGDOM' and 'INDIA'  is selected\");\n                                              _context19.next = 5;\n                                              return (0, _emberPowerSelect.clickTrigger)();\n\n                                            case 5:\n                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                request.ok(_this4.defaultChoiceList);\n                                              });\n                                              _context19.next = 8;\n                                              return (0, _emberPowerSelect.typeInSearch)('C');\n\n                                            case 8:\n                                              return _context19.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {\n                                                return regeneratorRuntime.wrap(function _callee18$(_context18) {\n                                                  while (1) {\n                                                    switch (_context18.prev = _context18.next) {\n                                                      case 0:\n                                                        _context18.next = 2;\n                                                        return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                                      case 2:\n                                                        assert.deepEqual(_this4.model.customField.country, [\"UNITED KINGDOM\", \"INDIA\", \"CANADA\"], \"check 'UNITED KINGDOM','INDIA' and 'CANADA'  is selected\");\n                                                        return _context18.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                                                          return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                                                            while (1) {\n                                                              switch (_context17.prev = _context17.next) {\n                                                                case 0:\n                                                                  _context17.next = 2;\n                                                                  return (0, _emberPowerSelect.clickTrigger)();\n\n                                                                case 2:\n                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                                    if (!request.url.includes(\"?q=\")) {\n                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                                      request.ok(_this4.defaultChoiceList);\n                                                                    } else {\n                                                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query params are populated');\n                                                                      request.ok(_this4.choicesList);\n                                                                    }\n                                                                  });\n                                                                  _context17.next = 5;\n                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');\n\n                                                                case 5:\n                                                                  return _context17.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\n                                                                    return regeneratorRuntime.wrap(function _callee16$(_context16) {\n                                                                      while (1) {\n                                                                        switch (_context16.prev = _context16.next) {\n                                                                          case 0:\n                                                                            _context16.next = 2;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                                                          case 2:\n                                                                            assert.deepEqual(_this4.model.customField.country, [\"UNITED KINGDOM\", \"INDIA\", \"CANADA\", \"UNITED STATES\"], \"check 'UNITED KINGDOM','INDIA','CANADA' and 'UNITED STATES'  is selected\");\n                                                                            _context16.next = 5;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 5:\n                                                                            //  Remove first choice\n                                                                            assert.deepEqual(_this4.model.customField.country, [\"INDIA\", \"CANADA\", \"UNITED STATES\"], \"check 'INDIA','CANADA' and 'UNITED STATES'  is selected\");\n                                                                            _context16.next = 8;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 8:\n                                                                            assert.deepEqual(_this4.model.customField.country, [\"INDIA\", \"UNITED STATES\"], \"check 'INDIA' and 'UNITED STATES'  is selected\");\n                                                                            _context16.next = 11;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 11:\n                                                                            assert.deepEqual(_this4.model.customField.country, [\"INDIA\"], \"check 'INDIA' is selected\");\n                                                                            _context16.next = 14;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 14:\n                                                                            assert.deepEqual(_this4.model.customField.country, [], \"check if model is empty\");\n\n                                                                          case 15:\n                                                                          case \"end\":\n                                                                            return _context16.stop();\n                                                                        }\n                                                                      }\n                                                                    }, _callee16);\n                                                                  }))));\n\n                                                                case 6:\n                                                                case \"end\":\n                                                                  return _context17.stop();\n                                                              }\n                                                            }\n                                                          }, _callee17);\n                                                        }))));\n\n                                                      case 4:\n                                                      case \"end\":\n                                                        return _context18.stop();\n                                                    }\n                                                  }\n                                                }, _callee18);\n                                              }))));\n\n                                            case 9:\n                                            case \"end\":\n                                              return _context19.stop();\n                                          }\n                                        }\n                                      }, _callee19);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context20.stop();\n                                }\n                              }\n                            }, _callee20);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context21.stop();\n                      }\n                    }\n                  }, _callee21);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      return function (_x4) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/default/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete/hasDefaultChoices | default', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }, {\n          id: 'country_4',\n          value: 'SRI LANKA',\n          shortCode: 'LKA',\n          position: 4\n        }, {\n          id: 'country_5',\n          value: 'JAPAN',\n          shortCode: 'JPN',\n          position: 5\n        }],\n        defaultChoiceList: [{\n          id: 'country_1',\n          value: 'UNITED KINGDOM',\n          shortCode: 'UKD',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'CANADA',\n          shortCode: 'CAN',\n          position: 2\n        }]\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 auto-complete(no-create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(25);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    mutiple: false,\n                    creatable: false,\n                    hasDefaultChoices: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  if (!request.url.includes(\"?q=\")) {\n                    assert.equal(request.url, 'url/search', 'url without query params is populated');\n                    request.ok(_this.defaultChoiceList);\n                  } else {\n                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');\n                    request.ok(_this.choicesList);\n                  }\n                });\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context4.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          _context3.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 6:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                          assert.equal(_this.model.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          _context3.next = 10;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 10:\n                          _context3.next = 12;\n                          return (0, _emberPowerSelect.typeInSearch)('A');\n\n                        case 12:\n                          return _context3.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                              while (1) {\n                                switch (_context2.prev = _context2.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                                    _context2.next = 5;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                  case 5:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"CANADA\", \"Field renderd with value 'CANADA'\");\n                                    assert.equal(_this.model.country, \"CANADA\", \"Check value 'CANADA' is set on the model\");\n                                    _context2.next = 9;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 9:\n                                    _context2.next = 11;\n                                    return (0, _emberPowerSelect.typeInSearch)('ABC');\n\n                                  case 11:\n                                    return _context2.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                                      return regeneratorRuntime.wrap(function _callee$(_context) {\n                                        while (1) {\n                                          switch (_context.prev = _context.next) {\n                                            case 0:\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 5, \"5 choices are displayed\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n                                              _context.next = 8;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 8:\n                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"INDIA\", \"Field renderd with value 'INDIA'\");\n                                              assert.equal(_this.model.country, \"INDIA\", \"Check value 'INDIA' is set on the model\");\n\n                                            case 10:\n                                            case \"end\":\n                                              return _context.stop();\n                                          }\n                                        }\n                                      }, _callee);\n                                    }))));\n\n                                  case 12:\n                                  case \"end\":\n                                    return _context2.stop();\n                                }\n                              }\n                            }, _callee2);\n                          }))));\n\n                        case 13:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 auto-complete(create, no-multiple) check whether default options are shown upto minSearchCharLength and are able to check\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(28);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    mutiple: false,\n                    hasDefaultChoices: true\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  if (!request.url.includes(\"?q=\")) {\n                    assert.equal(request.url, 'url/search', 'url without query params is populated');\n                    request.ok(_this2.defaultChoiceList);\n                  } else {\n                    assert.equal(request.url, 'url/search?q=ABC&qf=value', 'query params are populated');\n                    request.ok(_this2.choicesList);\n                  }\n                });\n                _context8.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context8.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          assert.equal(_this2.model.country, undefined, \"no value set on model\");\n                          _context7.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 7:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                          assert.equal(_this2.model.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          _context7.next = 11;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 11:\n                          _context7.next = 13;\n                          return (0, _emberPowerSelect.typeInSearch)('A');\n\n                        case 13:\n                          return _context7.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                            return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                              while (1) {\n                                switch (_context6.prev = _context6.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 3, \"3 choices are displayed\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"A\"...', \"choice 1 'Add \\\"A\\\"...'\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                                    _context6.next = 6;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                  case 6:\n                                    assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"UNITED KINGDOM\", \"Field renderd with value 'UNITED KINGDOM'\");\n                                    assert.equal(_this2.model.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                                    _context6.next = 10;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 10:\n                                    _context6.next = 12;\n                                    return (0, _emberPowerSelect.typeInSearch)('ABC');\n\n                                  case 12:\n                                    return _context6.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                                      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                                        while (1) {\n                                          switch (_context5.prev = _context5.next) {\n                                            case 0:\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 6, \"5 choices are displayed\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, 'Add \"ABC\"...', \"choice 1 'Add \\\"ABC\\\"...'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"INDIA\", \"choice 1 is 'INDIA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[2].innerText, \"UNITED STATES\", \"choice 2 is 'UNITED STATES'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[3].innerText, \"CHINA\", \"choice 3 is 'CHINA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[4].innerText, \"SRI LANKA\", \"choice 4 is 'SRI LANKA'\");\n                                              assert.equal((0, _emberNativeDomHelpers.findAll)('li')[5].innerText, \"JAPAN\", \"choice 5 is 'JAPAN'\");\n                                              _context5.next = 9;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                            case 9:\n                                              assert.equal((0, _emberNativeDomHelpers.find)('span').innerText, \"INDIA\", \"Field renderd with value 'INDIA'\");\n                                              assert.equal(_this2.model.country, \"INDIA\", \"Check value 'INDIA' is set on the model\");\n\n                                            case 11:\n                                            case \"end\":\n                                              return _context5.stop();\n                                          }\n                                        }\n                                      }, _callee5);\n                                    }))));\n\n                                  case 13:\n                                  case \"end\":\n                                    return _context6.stop();\n                                }\n                              }\n                            }, _callee6);\n                          }))));\n\n                        case 14:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 auto-complete(create, multiple) Selecting multiple values with creatable as true and removing one or more choice/value \", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(21);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search', 'url without query params is populated');\n                  request.ok(_this3.defaultChoiceList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: true,\n                    multiple: true,\n                    has_default_choices: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context15.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context15.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                return _context15.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                  return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          assert.equal(_this3.model.country, undefined, \"no value set on model\");\n                          _context14.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 7:\n                          assert.equal(_this3.model.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          return _context14.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                            return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                              while (1) {\n                                switch (_context13.prev = _context13.next) {\n                                  case 0:\n                                    _context13.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      if (!request.url.includes(\"?q=\")) {\n                                        assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                        request.ok(_this3.defaultChoiceList);\n                                      } else {\n                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');\n                                        request.ok(_this3.choicesList);\n                                      }\n                                    });\n                                    _context13.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n                                  case 5:\n                                    return _context13.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                                      return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                                        while (1) {\n                                          switch (_context12.prev = _context12.next) {\n                                            case 0:\n                                              _context12.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this3.model.country, [\"UNITED KINGDOM\", \"INDIA\"], \"check 'UNITED KINGDOM' and 'INDIA'  is selected\");\n                                              _context12.next = 5;\n                                              return (0, _emberPowerSelect.clickTrigger)();\n\n                                            case 5:\n                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                request.ok(_this3.defaultChoiceList);\n                                              });\n                                              _context12.next = 8;\n                                              return (0, _emberPowerSelect.typeInSearch)('C');\n\n                                            case 8:\n                                              return _context12.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                                                return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                                                  while (1) {\n                                                    switch (_context11.prev = _context11.next) {\n                                                      case 0:\n                                                        (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n                                                        assert.deepEqual(_this3.model.country, [\"UNITED KINGDOM\", \"INDIA\", \"C\"], \"check 'UNITED KINGDOM','INDIA' and 'C'  is selected\");\n                                                        return _context11.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                                                          return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                                                            while (1) {\n                                                              switch (_context10.prev = _context10.next) {\n                                                                case 0:\n                                                                  _context10.next = 2;\n                                                                  return (0, _emberPowerSelect.clickTrigger)();\n\n                                                                case 2:\n                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                                    if (!request.url.includes(\"?q=\")) {\n                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                                      request.ok(_this3.defaultChoiceList);\n                                                                    } else {\n                                                                      assert.equal(request.url, 'url/search?q=UNITED&qf=value', 'query params are populated');\n                                                                      request.ok(_this3.choicesList);\n                                                                    }\n                                                                  });\n                                                                  _context10.next = 5;\n                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED');\n\n                                                                case 5:\n                                                                  return _context10.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                                                                    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                                                                      while (1) {\n                                                                        switch (_context9.prev = _context9.next) {\n                                                                          case 0:\n                                                                            _context9.next = 2;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                                                          case 2:\n                                                                            assert.deepEqual(_this3.model.country, [\"UNITED KINGDOM\", \"INDIA\", \"C\", \"UNITED\"], \"check 'UNITED KINGDOM','INDIA','C' and 'UNITED'  is selected\");\n                                                                            _context9.next = 5;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 5:\n                                                                            //  Remove first choice\n                                                                            assert.deepEqual(_this3.model.country, [\"INDIA\", \"C\", \"UNITED\"], \"check 'INDIA','C' and 'UNITED'  is selected\");\n                                                                            _context9.next = 8;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 8:\n                                                                            assert.deepEqual(_this3.model.country, [\"INDIA\", \"UNITED\"], \"check 'INDIA' and 'UNITED'  is selected\");\n                                                                            _context9.next = 11;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 11:\n                                                                            assert.deepEqual(_this3.model.country, [\"INDIA\"], \"check 'INDIA' is selected\");\n                                                                            _context9.next = 14;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 14:\n                                                                            assert.deepEqual(_this3.model.country, [], \"check if model is empty\");\n\n                                                                          case 15:\n                                                                          case \"end\":\n                                                                            return _context9.stop();\n                                                                        }\n                                                                      }\n                                                                    }, _callee9);\n                                                                  }))));\n\n                                                                case 6:\n                                                                case \"end\":\n                                                                  return _context10.stop();\n                                                              }\n                                                            }\n                                                          }, _callee10);\n                                                        }))));\n\n                                                      case 3:\n                                                      case \"end\":\n                                                        return _context11.stop();\n                                                    }\n                                                  }\n                                                }, _callee11);\n                                              }))));\n\n                                            case 9:\n                                            case \"end\":\n                                              return _context12.stop();\n                                          }\n                                        }\n                                      }, _callee12);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context13.stop();\n                                }\n                              }\n                            }, _callee13);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x3) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 auto-complete(no-create, multiple) Selecting multiple values with creatable as false and removing one or more choice/value \", /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                assert.expect(21);\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search', 'url without query params is populated');\n                  request.ok(_this4.defaultChoiceList);\n                });\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    creatable: false,\n                    multiple: true,\n                    has_default_choices: true\n                  },\n                  optionLabelPath: 'value',\n                  optionValuePath: 'value'\n                });\n\n                _context22.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context22.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                return _context22.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {\n                  return regeneratorRuntime.wrap(function _callee21$(_context21) {\n                    while (1) {\n                      switch (_context21.prev = _context21.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('input[type=search]'), \"check if a seach bar appears\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 2, \"2 choices are displayed\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[0].innerText, \"UNITED KINGDOM\", \"default choice 1 is 'UNITED KINGDOM'\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li')[1].innerText, \"CANADA\", \"default choice 2 is 'CANADA'\");\n                          assert.equal(_this4.model.country, undefined, \"no value set on model\");\n                          _context21.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 7:\n                          assert.equal(_this4.model.country, \"UNITED KINGDOM\", \"Check value 'UNITED KINGDOM' is set on the model\");\n                          return _context21.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {\n                            return regeneratorRuntime.wrap(function _callee20$(_context20) {\n                              while (1) {\n                                switch (_context20.prev = _context20.next) {\n                                  case 0:\n                                    _context20.next = 2;\n                                    return (0, _emberPowerSelect.clickTrigger)();\n\n                                  case 2:\n                                    (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                      if (!request.url.includes(\"?q=\")) {\n                                        assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                        request.ok(_this4.defaultChoiceList);\n                                      } else {\n                                        assert.equal(request.url, 'url/search?q=INDIA&qf=value', 'query params are populated');\n                                        request.ok(_this4.choicesList);\n                                      }\n                                    });\n                                    _context20.next = 5;\n                                    return (0, _emberPowerSelect.typeInSearch)('INDIA');\n\n                                  case 5:\n                                    return _context20.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {\n                                      return regeneratorRuntime.wrap(function _callee19$(_context19) {\n                                        while (1) {\n                                          switch (_context19.prev = _context19.next) {\n                                            case 0:\n                                              _context19.next = 2;\n                                              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                            case 2:\n                                              assert.deepEqual(_this4.model.country, [\"UNITED KINGDOM\", \"INDIA\"], \"check 'UNITED KINGDOM' and 'INDIA'  is selected\");\n                                              _context19.next = 5;\n                                              return (0, _emberPowerSelect.clickTrigger)();\n\n                                            case 5:\n                                              (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                request.ok(_this4.defaultChoiceList);\n                                              });\n                                              _context19.next = 8;\n                                              return (0, _emberPowerSelect.typeInSearch)('C');\n\n                                            case 8:\n                                              return _context19.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {\n                                                return regeneratorRuntime.wrap(function _callee18$(_context18) {\n                                                  while (1) {\n                                                    switch (_context18.prev = _context18.next) {\n                                                      case 0:\n                                                        _context18.next = 2;\n                                                        return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                                      case 2:\n                                                        assert.deepEqual(_this4.model.country, [\"UNITED KINGDOM\", \"INDIA\", \"CANADA\"], \"check 'UNITED KINGDOM','INDIA' and 'CANADA'  is selected\");\n                                                        return _context18.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {\n                                                          return regeneratorRuntime.wrap(function _callee17$(_context17) {\n                                                            while (1) {\n                                                              switch (_context17.prev = _context17.next) {\n                                                                case 0:\n                                                                  _context17.next = 2;\n                                                                  return (0, _emberPowerSelect.clickTrigger)();\n\n                                                                case 2:\n                                                                  (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                                                                    if (!request.url.includes(\"?q=\")) {\n                                                                      assert.equal(request.url, 'url/search', 'url without query params is populated');\n                                                                      request.ok(_this4.defaultChoiceList);\n                                                                    } else {\n                                                                      assert.equal(request.url, 'url/search?q=UNITED%20STATES&qf=value', 'query params are populated');\n                                                                      request.ok(_this4.choicesList);\n                                                                    }\n                                                                  });\n                                                                  _context17.next = 5;\n                                                                  return (0, _emberPowerSelect.typeInSearch)('UNITED STATES');\n\n                                                                case 5:\n                                                                  return _context17.abrupt(\"return\", (0, _wait.default)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\n                                                                    return regeneratorRuntime.wrap(function _callee16$(_context16) {\n                                                                      while (1) {\n                                                                        switch (_context16.prev = _context16.next) {\n                                                                          case 0:\n                                                                            _context16.next = 2;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                                                          case 2:\n                                                                            assert.deepEqual(_this4.model.country, [\"UNITED KINGDOM\", \"INDIA\", \"CANADA\", \"UNITED STATES\"], \"check 'UNITED KINGDOM','INDIA','CANADA' and 'UNITED STATES'  is selected\");\n                                                                            _context16.next = 5;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 5:\n                                                                            //  Remove first choice\n                                                                            assert.deepEqual(_this4.model.country, [\"INDIA\", \"CANADA\", \"UNITED STATES\"], \"check 'INDIA','CANADA' and 'UNITED STATES'  is selected\");\n                                                                            _context16.next = 8;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 8:\n                                                                            assert.deepEqual(_this4.model.country, [\"INDIA\", \"UNITED STATES\"], \"check 'INDIA' and 'UNITED STATES'  is selected\");\n                                                                            _context16.next = 11;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                                                                          case 11:\n                                                                            assert.deepEqual(_this4.model.country, [\"INDIA\"], \"check 'INDIA' is selected\");\n                                                                            _context16.next = 14;\n                                                                            return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                                                          case 14:\n                                                                            assert.deepEqual(_this4.model.country, [], \"check if model is empty\");\n\n                                                                          case 15:\n                                                                          case \"end\":\n                                                                            return _context16.stop();\n                                                                        }\n                                                                      }\n                                                                    }, _callee16);\n                                                                  }))));\n\n                                                                case 6:\n                                                                case \"end\":\n                                                                  return _context17.stop();\n                                                              }\n                                                            }\n                                                          }, _callee17);\n                                                        }))));\n\n                                                      case 4:\n                                                      case \"end\":\n                                                        return _context18.stop();\n                                                    }\n                                                  }\n                                                }, _callee18);\n                                              }))));\n\n                                            case 9:\n                                            case \"end\":\n                                              return _context19.stop();\n                                          }\n                                        }\n                                      }, _callee19);\n                                    }))));\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context20.stop();\n                                }\n                              }\n                            }, _callee20);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context21.stop();\n                      }\n                    }\n                  }, _callee21);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      return function (_x4) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/auto-complete/fieldOptions/minSearchCharLength/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"ember-cli-fake-server\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _emberCliFakeServer, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/auto-complete | fieldOptions | minSearchCharLength ', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        choicesList: [{\n          id: 'country_1',\n          value: 'INDIA',\n          shortCode: 'IND',\n          position: 1\n        }, {\n          id: 'country_2',\n          value: 'UNITED STATES',\n          shortCode: 'USA',\n          position: 2\n        }, {\n          id: 'country_3',\n          value: 'CHINA',\n          shortCode: 'CHN',\n          position: 3\n        }]\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 auto-complete(minSearchCharLength=5): check network requests are only made when input length is > minSearchCharLength\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: false,\n                    creatable: false,\n                    minSearchCharLength: 5\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCDEF&qf=value', 'query field is populated');\n                  request.ok(_this.choicesList);\n                });\n                _context3.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context3.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context3.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCD');\n\n              case 9:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 1, \"No Choices are shown since input length < minSearchCharLength\");\n                          _context2.next = 3;\n                          return (0, _emberPowerSelect.typeInSearch)('ABCDEF');\n\n                        case 3:\n                          return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                            return regeneratorRuntime.wrap(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 3, \"Choices are shown since input length > minSearchCharLength\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, _callee);\n                          }))));\n\n                        case 4:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 auto-complete-with-create-multiple(minSearchCharLength=7): check network requests are only made when input length is > minSearchCharLength\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(3);\n\n                _createField.default.autoComplete(this, {\n                  fieldOptions: {\n                    multiple: true,\n                    creatable: true,\n                    minSearchCharLength: 7\n                  },\n                  optionValuePath: 'value',\n                  optionLabelPath: 'value'\n                });\n\n                (0, _emberCliFakeServer.stubRequest)('get', 'url/search', function (request) {\n                  assert.equal(request.url, 'url/search?q=ABCDEGHI&qf=value', 'query field is populated');\n                  request.ok(_this2.choicesList);\n                });\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                _context6.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context6.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('ABCDEF');\n\n              case 9:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 1, \"No Choices are shown since input length < minSearchCharLength\");\n                          _context5.next = 3;\n                          return (0, _emberPowerSelect.typeInSearch)('ABCDEGHI');\n\n                        case 3:\n                          return _context5.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                            return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                              while (1) {\n                                switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('li').length, 4, \"Choices are shown since input length > minSearchCharLength\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }\n                            }, _callee4);\n                          }))));\n\n                        case 4:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-field/Custom/Create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Custom | Create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1: Check if the field renders and value is updated in model', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(5);\n                createField.checkbox(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));\n\n                        case 2:\n                          assert.ok((0, _emberNativeDomHelpers.find)('[paramchecked]'), \"Check tick mark appear on the DOM\");\n                          assert.ok(Ember.get(_this, 'model.customField.your_gender'), \"Check if selected value is updated in the model\");\n                          _context.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));\n\n                        case 6:\n                          assert.notOk((0, _emberNativeDomHelpers.find)('[paramchecked]'), \"Check tick mark disappear on the DOM\");\n                          assert.notOk(Ember.get(_this, 'model.customField.your_gender'), \"Check if selected value is updated in the model\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_gender', 'Hint for the field renders properly');\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-field/Custom/Edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Custom | Edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 : Check if the field renders with saved value in model', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.checkbox(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {\n                    your_gender: true\n                  }\n                };\n                _context2.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.notEqual((0, _emberNativeDomHelpers.find)('input')['attributes']['paramchecked'], undefined, \"Check tick mark appear on the DOM\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-field/Default/Create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Default | Create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1: Check if the field renders and value is updated in model', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(5);\n                createField.checkbox(this);\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));\n\n                        case 2:\n                          assert.ok((0, _emberNativeDomHelpers.find)('[paramchecked]'), \"Check tick mark appear on the DOM\");\n                          assert.ok(Ember.get(_this, 'model.yourGender'), \"Check if selected value is updated in the model\");\n                          _context.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('input'));\n\n                        case 6:\n                          assert.notOk((0, _emberNativeDomHelpers.find)('[paramchecked]'), \"Check tick mark disappear on the DOM\");\n                          assert.notOk(Ember.get(_this, 'model.yourGender'), \"Check if selected value is updated in the model\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?Enter_gender', 'Hint for the field renders properly');\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the checkbox component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"નમસ્તે\";\n                createField.checkbox(this, {\n                  label: sampleLabel\n                });\n                _context3.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-field/Default/Edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/checkbox field | Default | Edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1: Check if the field renders with value', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.checkbox(this);\n                Ember.set(this, 'model.yourGender', true);\n                _context2.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('[paramchecked]'), \"Check tick mark appear on the DOM\");\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-group/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-checkbox-group-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, _createCheckboxGroupField, _emberNativeDomHelpers, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)(\"Integration | Component | form fields/checkbox group | custom | create\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)(\"#TEST1 Form gets rendered in the UI\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  custom: true\n                });\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  var items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='customField.known_programming_langugages']\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[1].innerText), \"C\", \"Check the first Option is displayed\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[2].innerText), \"Java\", \"Check the second Option is displayed\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[3].innerText), \"Go\", \"Check the third Option is displayed\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 Check if option selection is updated and reflected in the model and UI\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(5);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  custom: true\n                });\n                this.model.customField = {};\n                _context2.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  (0, _emberNativeDomHelpers.click)('input[value=\"Go\"]');\n                  (0, _emberNativeDomHelpers.click)('input[value=\"Java\"]');\n                  assert.equal(_this.model.customField.known_programming_langugages[0], \"Go\", \"Check 'Go' Option is updated in the model\");\n                  assert.equal(_this.model.customField.known_programming_langugages[1], \"Java\", \"Check 'Java' Option is updated in the model\");\n                  (0, _emberNativeDomHelpers.click)('input[value=\"Go\"]');\n                  (0, _emberNativeDomHelpers.click)('input[value=\"C\"]');\n                  assert.equal(_this.model.customField.known_programming_langugages[1], \"C\", \"Check 'C' Option is updated in the model\");\n                  assert.equal(_this.model.customField.known_programming_langugages[0], \"Java\", \"Check 'Java' Option is updated in the model\");\n                  assert.equal(_this.model.customField.known_programming_langugages.indexOf(\"Go\"), -1, \"Check 'Go' Option is removed from the model\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionValuePath is '', Check value is updated in model\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  optionValuePath: \"\",\n                  custom: true\n                });\n                this.model.customField = {};\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input\")[2]);\n                  assert.deepEqual(Object.values(_this2.model.customField.known_programming_langugages[0]), [\"go_id\", \"Go\", 3, null], \"Check 'Go' Option is updated in the model\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionValuePath is id, Check value is updated in model\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  optionValuePath: \"id\",\n                  custom: true\n                });\n                this.model.customField = {};\n                _context4.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  (0, _emberNativeDomHelpers.click)('input[value=\"c_id\"]');\n                  assert.equal(_this3.model.customField.known_programming_langugages[0], \"c_id\", \"Check 'C' Option is updated in the model\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-group/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-checkbox-group-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, _createCheckboxGroupField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)(\"Integration | Component | form fields/checkbox group | custom | edit\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)(\"#TEST1 optionValuePath is value, Check if saved value is rendered in UI\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  custom: true\n                });\n                this.model.customField = {\n                  known_programming_langugages: [\"Java\", \"C\"]\n                };\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  var items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='customField.known_programming_langugages']\");\n                  assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'C' is selected\");\n                  assert.equal(items[2].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'Java' is selected\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionValuePath is id, Check if saved value is rendered in UI\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  custom: true,\n                  optionValuePath: \"id\"\n                });\n                this.model.customField = {\n                  known_programming_langugages: [\"c_id\", \"go_id\"]\n                };\n                _context2.next = 5;\n                return this.render(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  var items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='customField.known_programming_langugages']\");\n                  assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'C' is selected\");\n                  assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'Go' is selected\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionValuePath is '', Check if saved value is rendered in UI\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  optionValuePath: \"\",\n                  custom: true\n                });\n                this.model = {\n                  customField: {\n                    known_programming_langugages: [{\n                      id: \"c_id\",\n                      value: \"C\",\n                      position: 1,\n                      parentChoiceIds: null\n                    }, {\n                      id: \"go_id\",\n                      value: \"Go\",\n                      position: 3,\n                      parentChoiceIds: null\n                    }]\n                  }\n                };\n                _context3.next = 5;\n                return this.render(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  var items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='customField.known_programming_langugages']\");\n                  assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'C' is selected\");\n                  assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'Go' is selected\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-group/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/create-checkbox-group-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, createField, _createCheckboxGroupField, _emberNativeDomHelpers, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)(\"Integration | Component | form fields/checkbox group | default | create\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)(\"#TEST1 Check if Form gets rendered in the UI as default field\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                (0, _createCheckboxGroupField.checkboxGroup)(this);\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  var items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='knownProgrammingLangugages']\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[1].innerText), \"C\", \"Check the first Option is displayed\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[2].innerText), \"Java\", \"Check the second Option is displayed\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(items[3].innerText), \"Go\", \"Check the third Option is displayed\");\n                  assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 Check if option selection is updated and reflected in the model and UI\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(5);\n                (0, _createCheckboxGroupField.checkboxGroup)(this);\n                _context2.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  (0, _emberNativeDomHelpers.click)('input[value=\"C\"]');\n                  (0, _emberNativeDomHelpers.click)('input[value=\"Java\"]');\n                  assert.equal(_this.model.knownProgrammingLangugages[0], \"C\", \"Check 'C' Option is updated in the model\");\n                  assert.equal(_this.model.knownProgrammingLangugages[1], \"Java\", \"Check 'Java' Option is updated in the model\");\n                  (0, _emberNativeDomHelpers.click)('input[value=\"Java\"]');\n                  (0, _emberNativeDomHelpers.click)('input[value=\"Go\"]');\n                  assert.equal(_this.model.knownProgrammingLangugages[0], \"C\", \"Check 'C' Option is updated in the model\");\n                  assert.equal(_this.model.knownProgrammingLangugages[1], \"Go\", \"Check 'Go' Option is updated in the model\");\n                  assert.equal(_this.model.knownProgrammingLangugages.indexOf(\"Java\"), -1, \"Check 'Java' Option is removed from the model\");\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionValuePath is '', Check value is updated in model\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  optionValuePath: \"\"\n                });\n                _context3.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input\")[1]);\n                  assert.deepEqual(Object.values(_this2.model.knownProgrammingLangugages[0]), [\"java_id\", \"Java\", 2, null], \"Check 'Java' Option is updated in the model\");\n                }));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 optionValuePath is id, Check value is updated in model\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  optionValuePath: \"id\"\n                });\n                _context4.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  (0, _emberNativeDomHelpers.click)(\"input[value='go_id']\");\n                  assert.equal(_this3.model.knownProgrammingLangugages[0], \"go_id\", \"Check 'Go' Option is updated in the model\");\n                }));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the checkboxGroup component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"નમસ્તે\";\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  label: sampleLabel\n                });\n                _context5.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-group/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-checkbox-group-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, _createCheckboxGroupField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)(\"Integration | Component | form fields/checkbox group | default | edit\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)(\"#TEST1 optionValuePath is value, Check if saved value is rendered in UI\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var items;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createCheckboxGroupField.checkboxGroup)(this);\n                this.model = {\n                  knownProgrammingLangugages: [\"Go\", \"C\"]\n                };\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='knownProgrammingLangugages']\");\n                assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'C' is selected\");\n                assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'Go' is selected\");\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 optionValuePath is id, Check if saved value is rendered in UI\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var items;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  optionValuePath: \"id\"\n                });\n                this.model = {\n                  knownProgrammingLangugages: [\"go_id\", \"java_id\"]\n                };\n                _context2.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='knownProgrammingLangugages']\");\n                assert.equal(items[2].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'Java' is selected\");\n                assert.equal(items[3].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'Go' is selected\");\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 optionValuePath is '', Check if saved value is rendered in UI\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var items;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createCheckboxGroupField.checkboxGroup)(this, {\n                  optionValuePath: \"\"\n                });\n                this.model = {\n                  knownProgrammingLangugages: [{\n                    id: \"c_id\",\n                    value: \"C\",\n                    position: 1,\n                    parentChoiceIds: null\n                  }, {\n                    id: \"java_id\",\n                    value: \"Java\",\n                    position: 2,\n                    parentChoiceIds: null\n                  }]\n                };\n                _context3.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"tcMoy+jk\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"      \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                items = (0, _emberNativeDomHelpers.findAll)(\"[data-test-field-name='knownProgrammingLangugages']\");\n                assert.equal(items[1].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'C' is selected\");\n                assert.equal(items[2].firstElementChild.hasAttribute('paramchecked'), true, \"Check option 'Java' is selected\");\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/checkbox-group/option/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/checkbox group/option', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.set(this, 'object', Ember.Object.create());\n                Ember.set(this, 'propertyName', 'something');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"5s6eVC03\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-fields/checkbox-group/option\\\",null,[[\\\"propertyName\\\",\\\"object\\\",\\\"value\\\",\\\"optionValuePath\\\"],[[20,[\\\"propertyName\\\"]],[20,[\\\"object\\\"]],\\\"\\\",\\\"value\\\"]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(this.$().text().trim(), '');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/date-field/component-test\", [\"qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\", \"dummy/tests/helpers/create-field\", \"ember-power-calendar/test-support\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _emberNativeDomHelpers, _stringHelperMethods, _createField, _testSupport, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/date field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          fFrom: ''\n        },\n        customFieldModel: {\n          customField: {\n            fFrom: ''\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'from_field_id',\n            parent: null,\n            type: 'date',\n            label: 'From',\n            hint: 'some_date',\n            name: 'fFrom',\n            position: 1,\n            editable: true,\n            custom: false,\n            inputType: 'date-field',\n            placeholder: '',\n            fieldOptions: {},\n            fields: []\n          }]\n        },\n        customFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'from_field_id',\n            parent: null,\n            type: 'date',\n            label: 'From',\n            hint: 'some_date',\n            name: 'fFrom',\n            position: 1,\n            editable: true,\n            custom: true,\n            inputType: 'date-field',\n            placeholder: '',\n            fieldOptions: {},\n            fields: []\n          }]\n        }\n      });\n    });\n    (0, _qunit.test)('date (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date : Field can be hidden properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n                Ember.run(function () {\n                  Ember.set(_this, 'defaultFieldSchema.fields.0.hidden', true);\n                });\n                _context2.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"t7ijM873\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')['length'], 0, 'Label for the field is hidden properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 0, 'The date control is hidden properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button.formserv-tooltip')['length'], 0, 'Hint for the field is hidden properly');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field) : Hint for the field renders properly', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(3);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"t7ijM873\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as custom field) : Hint for the field renders properly', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(3);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field) : date control\\'s contains default value and can be compared', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(4);\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                Ember.run(function () {\n                  Ember.set(_this2, 'defaultFieldModel.fFrom', '2014-02-14T00:00:00.000Z');\n                });\n                _context5.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/14/2014', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z  as field value');\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field) : checking if wrong is provided whether the test is failing or not', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(4);\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                Ember.run(function () {\n                  Ember.set(_this3, 'defaultFieldModel.fFrom', '2014-14-02T00:00:00.000Z');\n                });\n                _context6.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.notEqual((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/14/2014', 'The date is setted renders properly');\n                assert.notEqual(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z  as field value');\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date : able to enable and disable the field based on \\'editable\\' property of schema', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(2);\n                Ember.run(function () {\n                  Ember.set(_this4, 'defaultFieldSchema.fields.0.editable', false);\n                });\n                _context7.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.notEqual((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is disabled when \\'editable\\' is \\'false\\'');\n                Ember.run(function () {\n                  Ember.set(_this4, 'defaultFieldSchema.fields.0.editable', true);\n                });\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is enabled when \\'editable\\' is \\'true\\'');\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date: able to provide seperate placeholder for date control in the field', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n                Ember.run(function () {\n                  Ember.set(_this5, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    placeholder: {\n                      date: 'Select date...'\n                    }\n                  });\n                });\n                _context8.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['placeholder'], 'Select date...', 'Date control renders its placeholder');\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field) :  date control\\'s contains proper content and can be selected', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(4);\n                _context9.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context9.next = 6;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 6:\n                _context9.next = 8;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field) : Default date can be overridden', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this6, 'defaultFieldModel.fFrom', '2014-02-14');\n                });\n                _context10.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14', 'Initially the field is rendered with 2014-02-14');\n                _context10.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context10.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field) : selecting a date for two times and saving', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(7);\n                _context11.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context11.next = 6;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 6:\n                _context11.next = 8;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n                _context11.next = 13;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 13:\n                _context11.next = 15;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date(\"2014-02-28\"));\n\n              case 15:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2014', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 18:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field) :  date control\\'s savingFormat can be changed', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var formConfig, datePickerConfig;\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(4);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                datePickerConfig = Ember.get(formConfig, 'datePickerDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('datePickerDefaultConfig', {\n                    format: 'DD/MM/YYYY'\n                  });\n                });\n                _context12.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context12.next = 9;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 9:\n                _context12.next = 11;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 11:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28/02/2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');\n                Ember.run(function () {\n                  formConfig.set('datePickerDefaultConfig', datePickerConfig);\n                });\n\n              case 15:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the date component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"નમસ્તે\";\n\n                _createField.default.date(this, {\n                  label: sampleLabel\n                });\n\n                _context13.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n\n    (0, _qunit.test)('date(as default field): passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this7, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    format: 'YYYY-MM-DD'\n                  });\n                });\n                _context14.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context14.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context14.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013-02-28', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field): passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this8, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    format: 'YYYY/MM/DD'\n                  });\n                });\n                _context15.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context15.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context15.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013/02/28', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x15) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date(as default field): passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    format: 'DD-MM-YYYY'\n                  });\n                });\n                _context16.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context16.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context16.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28-02-2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x16) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"date(as default field): passing a different format in 'formOptions' to a date field, nested inside section fields\", /*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  var formSchema = {\n                    name: 'Nested Sections formOptions test Form',\n                    formOptions: {\n                      format: 'DD-MM-YYYY'\n                    },\n                    fields: [{\n                      id: 'basic_info_id',\n                      parent: null,\n                      type: 'section',\n                      label: 'Basic Information',\n                      name: 'basic_info',\n                      position: 1,\n                      editable: true,\n                      custom: false,\n                      inputType: 'nested-section',\n                      placeholder: '',\n                      fieldOptions: {},\n                      fields: [{\n                        id: 'personal_info_id',\n                        parent: null,\n                        type: 'section',\n                        label: 'Personal Information',\n                        name: 'personal_info',\n                        position: 1,\n                        editable: true,\n                        custom: false,\n                        inputType: 'nested-section',\n                        placeholder: '',\n                        fieldOptions: {},\n                        fields: [{\n                          id: 'from_field_id',\n                          parent: null,\n                          type: 'Date of Birth',\n                          label: 'From',\n                          hint: 'some_date',\n                          name: 'date_of_birth',\n                          position: 1,\n                          editable: true,\n                          custom: false,\n                          inputType: 'date-field',\n                          placeholder: '',\n                          fieldOptions: {},\n                          fields: []\n                        }]\n                      }]\n                    }]\n                  };\n                  Ember.set(_this10, 'dateInsideSectionsFormSchema', formSchema);\n                });\n                _context17.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"d2SkRKmz\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"dateInsideSectionsFormSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.dateOfBirth'), undefined, 'field data in model is undefined initially');\n                _context17.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context17.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28-02-2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.dateOfBirth'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x17) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/date-range-field/component-test\", [\"qunit\", \"ember-native-dom-helpers\", \"ember-power-calendar/test-support\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _emberNativeDomHelpers, _testSupport, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/date range field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {},\n        defaultFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'date_range_id',\n            label: 'Time period',\n            name: 'date_range_name',\n            position: 1,\n            editable: true,\n            custom: false,\n            type: 'date_range',\n            inputType: 'date-range-field',\n            fieldOptions: {},\n            fields: [{\n              id: 'date_from_id',\n              label: 'From date',\n              name: 'from_date',\n              type: 'date',\n              inputType: 'datetime-field',\n              custom: false,\n              field_class: 'period',\n              parent_id: 'date_range_id',\n              visible: false,\n              fieldOptions: {\n                'isFromDate': 'true'\n              },\n              fields: []\n            }, {\n              id: 'date_to_id',\n              label: 'To date',\n              name: 'to_date',\n              type: 'date',\n              inputType: 'datetime-field',\n              custom: false,\n              field_class: 'period',\n              parent_id: 'date_range_id',\n              visible: false,\n              fieldOptions: {\n                'isFromDate': 'false'\n              },\n              fields: []\n            }]\n          }]\n        },\n        customFieldModel: {\n          customField: {}\n        },\n        customFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'date_range_id',\n            label: 'Time period',\n            name: 'date_range_name',\n            position: 1,\n            editable: true,\n            custom: true,\n            inputType: 'date-range-field',\n            fieldOptions: {},\n            fields: [{\n              id: 'date_from_id',\n              label: 'From date',\n              name: 'from_date',\n              inputType: 'datetime-field',\n              custom: true,\n              field_class: 'period',\n              parent_id: 'date_range_id',\n              visible: false,\n              fieldOptions: {\n                'isFromDate': 'true'\n              },\n              fields: []\n            }, {\n              id: 'date_to_id',\n              label: 'To date',\n              name: 'to_date',\n              inputType: 'datetime-field',\n              custom: true,\n              field_class: 'period',\n              parent_id: 'date_range_id',\n              visible: false,\n              fieldOptions: {\n                'isFromDate': 'false'\n              },\n              fields: []\n            }]\n          }]\n        }\n      });\n    });\n    (0, _qunit.test)('date range field(as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(10);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Time period', 'Label for the field renders properly');\n                assert.notOk((0, _emberNativeDomHelpers.findAll)('label')[1], '', 'nested date fields does not be get rendered');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date range control renders properly');\n                assert.notOk(Ember.get(this, 'defaultFieldModel.fromDate'), '', 'From date field data in model is empty');\n                _context.next = 9;\n                return (0, _emberNativeDomHelpers.click)('.date-range-control .ember-basic-dropdown-trigger');\n\n              case 9:\n                _context.next = 11;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 11:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - ', 'The date set renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'To date field data in model is empty');\n                _context.next = 16;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date(\"2014-02-28\"));\n\n              case 16:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - 02/28/2014', 'The date range renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as from date value');\n                assert.equal(Ember.get(this, 'defaultFieldModel.toDate'), '2014-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as to date value');\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date range field(as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(10);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Time period', 'Label for the field renders properly');\n                assert.notOk((0, _emberNativeDomHelpers.findAll)('label')[1], '', 'nested date fields does not be get rendered');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date range control renders properly');\n                assert.notOk(Ember.get(this, 'customFieldModel.customField.fromDate'), '', 'From date field data in model is empty');\n                _context2.next = 9;\n                return (0, _emberNativeDomHelpers.click)('.date-range-control .ember-basic-dropdown-trigger');\n\n              case 9:\n                _context2.next = 11;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 11:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - ', 'The date set renders properly');\n                assert.equal(Ember.get(this, 'customFieldModel.customField.from_date'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n                assert.notOk(Ember.get(this, 'customFieldModel.customField.to_date'), '', 'To date field data in model is empty');\n                _context2.next = 16;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date(\"2014-02-28\"));\n\n              case 16:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - 02/28/2014', 'The date range renders properly');\n                assert.equal(Ember.get(this, 'customFieldModel.customField.from_date'), '2013-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as from date value');\n                assert.equal(Ember.get(this, 'customFieldModel.customField.to_date'), '2014-02-28T00:00:00.000Z', 'Model contains 2014-02-28T00:00:00.000Z as to date value');\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date range field(as default field) :  date control\\'s savingFormat can be changed', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var formConfig, dateRangePickerDefaultConfig;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(6);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dateRangePickerDefaultConfig = Ember.get(formConfig, 'dateRangePickerDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dateRangePickerDefaultConfig', {\n                    format: 'DD/MM/YYYY'\n                  });\n                });\n                _context3.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.notOk(Ember.get(this, 'defaultFieldModel.fromDate'), '', 'from date in model is empty');\n                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'to date in model is empty');\n                _context3.next = 10;\n                return (0, _emberNativeDomHelpers.click)('.date-range-control .ember-basic-dropdown-trigger');\n\n              case 10:\n                _context3.next = 12;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 12:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date range control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/28/2013 - ', 'The date set renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2013-02-28T00:00:00.000Z', 'Model contains 2013-02-28T00:00:00.000Z  as field value');\n                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'to date in model is empty');\n                Ember.run(function () {\n                  formConfig.set('dateRangePickerDefaultConfig', dateRangePickerDefaultConfig);\n                });\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date range field(as default field) : date range control\\'s contains default value and can be compared', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(6);\n                assert.notOk(Ember.get(this, 'defaultFieldModel.fromDate'), '', 'from date in model is empty');\n                assert.notOk(Ember.get(this, 'defaultFieldModel.toDate'), '', 'to date in model is empty');\n                Ember.run(function () {\n                  Ember.set(_this, 'defaultFieldModel.fromDate', '2021-02-14T00:00:00.000Z');\n                  Ember.set(_this, 'defaultFieldModel.toDate', '2021-03-28T00:00:00.000Z');\n                });\n                _context4.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/14/2021 - 03/28/2021', 'The date is set renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fromDate'), '2021-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z as from date value');\n                assert.equal(Ember.get(this, 'defaultFieldModel.toDate'), '2021-03-28T00:00:00.000Z', 'Model contains 2021-03-28T00:00:00.000Z as to date value');\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date range field(as custom field) : date range control\\'s contains default value and can be compared', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(6);\n                assert.notOk(Ember.get(this, 'customFieldModel.customField.from_date'), '', 'from date in model is empty');\n                assert.notOk(Ember.get(this, 'customFieldModel.customField.to_date'), '', 'to date in model is empty');\n                Ember.run(function () {\n                  Ember.set(_this2, 'customFieldModel.customField.from_date', '2021-02-14T00:00:00.000Z');\n                  Ember.set(_this2, 'customFieldModel.customField.to_date', '2021-03-28T00:00:00.000Z');\n                });\n                _context5.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-range-control input')[0]['value'], '02/14/2021 - 03/28/2021', 'The date set renders properly');\n                assert.equal(Ember.get(this, 'customFieldModel.customField.from_date'), '2021-02-14T00:00:00.000Z', 'Model contains 2014-02-14T00:00:00.000Z as from date value');\n                assert.equal(Ember.get(this, 'customFieldModel.customField.to_date'), '2021-03-28T00:00:00.000Z', 'Model contains 2021-03-28T00:00:00.000Z as to date value');\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/date-time-split-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/string-helper-methods\", \"dummy/tests/helpers/create-field\", \"ember-power-calendar/test-support\"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods, createField, _testSupport) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/date time split field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          fFrom: ''\n        },\n        customFieldModel: {\n          customField: {\n            fFrom: ''\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'from_field_id',\n            parent: null,\n            type: 'date_time_split',\n            label: 'From',\n            hint: 'some_date',\n            name: 'fFrom',\n            position: 1,\n            editable: true,\n            custom: false,\n            inputType: 'date-time-split-field',\n            placeholder: '',\n            fieldOptions: {},\n            fields: []\n          }]\n        },\n        customFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'from_field_id',\n            parent: null,\n            type: 'date_time_split',\n            label: 'From',\n            hint: 'some_date',\n            name: 'fFrom',\n            position: 1,\n            editable: true,\n            custom: true,\n            inputType: 'date-time-split-field',\n            placeholder: '',\n            fieldOptions: {},\n            fields: []\n          }]\n        }\n      });\n    });\n    (0, _qunit.test)('date-time-split (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')['length'], 1, 'The time control renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(4);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'From', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')['length'], 1, 'The time control renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split : Field can be hidden properly', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this, 'defaultFieldSchema.fields.0.hidden', true);\n                });\n                _context3.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"t7ijM873\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')['length'], 0, 'Label for the field is hidden properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 0, 'The date control is hidden properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')['length'], 0, 'The time control is hidden properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('button.formserv-tooltip')['length'], 0, 'Hint for the field is hidden properly');\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as default field) : clicking the time control expands to show dropdown content', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(3);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');\n                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?some_date', 'Hint for the field renders properly');\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as custom field) : clicking the time control expands to show dropdown content', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');\n                (0, _emberNativeDomHelpers.click)('.time-control .ember-power-select-trigger');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.time-control .ember-power-select-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as default field) : all time control choices renders properly', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                _context6.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberPowerSelect.clickTrigger)();\n                return _context6.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 96, 'All choices are getting displayed');\n                }));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as custom field) : all time control choices renders properly', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(3);\n                _context7.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                (0, _emberPowerSelect.clickTrigger)();\n                return _context7.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 96, 'All choices are getting displayed');\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]['innerText'], '12:00 AM', 'First choice is displayed properly');\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[95]['innerText'], '11:45 PM', 'Last choice is displayed properly');\n                }));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split(as default field) :  date control\\'s contains proper content and can be selected', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(4);\n                _context8.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context8.next = 6;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 6:\n                _context8.next = 8;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T  as field value');\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as custom field) : date control\\'s contains proper content and can be selected', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(4);\n                _context9.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '', 'field data in model is empty');\n                _context9.next = 6;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 6:\n                _context9.next = 8;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T  as field value');\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as default field) : time control\\'s options contain proper content and can be selected and replaced', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(7);\n                _context10.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context10.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  var optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .ember-power-select-selected-item');\n                  assert.equal(optionDomElement.length, 1, 'A choice is now selected');\n                  assert.equal(optionDomElement[0]['innerText'], '12:00 AM', 'Choice \\'12:00 AM\\' is now selected');\n                  assert.equal(Ember.get(_this2, 'defaultFieldModel.fFrom'), 'T00:00:00.000Z', 'Model contains \\'T00:00:00.000Z\\' as field value');\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0], 40); //  Press Key-down\n\n                  //  Press Key-down\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0], 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .ember-power-select-selected-item');\n                    assert.equal(optionDomElement.length, 1, 'Another choice are now selected');\n                    assert.equal(optionDomElement[0]['innerText'], '12:15 AM', 'Choice \\'12:15 AM\\' is also selected now');\n                    assert.equal(Ember.get(_this2, 'defaultFieldModel.fFrom'), 'T00:15:00.000Z', 'Model contains \\'T00:15:00.000Z\\' as field value');\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as custom field) : time control\\'s options contain proper content and can be selected and replaced', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(7);\n                _context11.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '', 'field data in model is empty');\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context11.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  var optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .ember-power-select-selected-item');\n                  assert.equal(optionDomElement.length, 1, 'A choice is now selected');\n                  assert.equal(optionDomElement[0]['innerText'], '12:00 AM', 'Choice \\'12:00 AM\\' is now selected');\n                  assert.equal(Ember.get(_this3, 'customFieldModel.customField.fFrom'), 'T00:00:00.000Z', 'Model contains \\'T00:00:00.000Z\\' as field value');\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 40); //  Press Key-down\n\n                  //  Press Key-down\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .ember-power-select-selected-item');\n                    assert.equal(optionDomElement.length, 1, 'Another choice are now selected');\n                    assert.equal(optionDomElement[0]['innerText'], '12:15 AM', 'Choice \\'12:15 AM\\' is  selected now');\n                    assert.equal(Ember.get(_this3, 'customFieldModel.customField.fFrom'), 'T00:15:00.000Z', 'Model contains \\'T00:15:00.000Z\\' as field value');\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as default field) : date and time can be selected and replaced', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(6);\n                _context12.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context12.next = 6;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 6:\n                _context12.next = 8;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 8:\n                _context12.next = 10;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n\n              case 10:\n                _context12.next = 12;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);\n\n              case 12:\n                return _context12.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .ember-power-select-selected-item');\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');\n                  assert.equal(timeDomElement.length, 1, 'A time is now selected');\n                  assert.equal(timeDomElement[0]['innerText'], '12:00 AM', 'Time \\'12:00 AM\\' is now selected');\n                  assert.equal(Ember.get(_this4, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains \\'2013-02-28T00:00:00.000Z\\' as field value');\n                }));\n\n              case 13:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as custom field) : date and time can be selected and replaced', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(6);\n                _context13.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '', 'field data in model is empty');\n                _context13.next = 6;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 6:\n                _context13.next = 8;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 8:\n                _context13.next = 10;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n\n              case 10:\n                _context13.next = 12;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);\n\n              case 12:\n                return _context13.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .date-control input');\n                  var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .ember-power-select-selected-item');\n                  assert.equal(dateDomElement.length, 1, 'A date is now selected');\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The date is setted renders properly');\n                  assert.equal(timeDomElement.length, 1, 'A time is now selected');\n                  assert.equal(timeDomElement[0]['innerText'], '12:00 AM', 'Time \\'12:00 AM\\' is now selected');\n                  assert.equal(Ember.get(_this5, 'customFieldModel.customField.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains \\'2013-02-28T00:00:00.000Z\\' as field value');\n                }));\n\n              case 13:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as default field) : in edit scenerio, the control renders the content properly', /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(9);\n                Ember.run(function () {\n                  Ember.set(_this6, 'defaultFieldModel.fFrom', '2014-02-14T23:15:00.000Z');\n                });\n                _context15.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2014-02-14T23:15:00.000Z', 'Initially the field contains the content provided');\n                return _context15.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                  var dateDomElement, timeDomElement;\n                  return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .date-control input');\n                          timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .ember-power-select-selected-item');\n                          assert.equal(dateDomElement[0]['value'], '02/14/2014', 'Date \\'02/14/2014\\' is now selected in date control');\n                          assert.equal(timeDomElement.length, 1, 'A choice is now selected in time control');\n                          assert.equal(timeDomElement[0]['innerText'], '11:15 PM', 'Time \\'11:15 PM\\' is now selected in time control');\n                          _context14.next = 7;\n                          return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n                        case 7:\n                          _context14.next = 9;\n                          return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n                        case 9:\n                          _context14.next = 11;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n\n                        case 11:\n                          _context14.next = 13;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 40);\n\n                        case 13:\n                          _context14.next = 15;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);\n\n                        case 15:\n                          return _context14.abrupt(\"return\", (0, _wait.default)().then(function () {\n                            var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .date-control input');\n                            var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .ember-power-select-selected-item');\n                            assert.equal(dateDomElement.length, 1, 'A date is now selected');\n                            assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '02/28/2013', 'The selected date renders properly');\n                            assert.equal(timeDomElement.length, 1, 'A time is now selected');\n                            assert.equal(timeDomElement[0]['innerText'], '11:30 PM', 'Time \\'11:30 PM\\' is now selected');\n                            assert.equal(Ember.get(_this6, 'defaultFieldModel.fFrom'), '2013-02-28T23:30:00.000Z', 'Model contains \\'2013-02-28T23:30:00.000Z\\' as field value');\n                          }));\n\n                        case 16:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split (as custom field) : in edit scenerio, the control renders the content properly', /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(9);\n                Ember.run(function () {\n                  Ember.set(_this7, 'customFieldModel.customField.fFrom', '2014-02-14T23:15:00.000Z');\n                });\n                _context17.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'customFieldModel.customField.fFrom'), '2014-02-14T23:15:00.000Z', 'Initially the field contains the content provided');\n                return _context17.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\n                  var dateDomElement, timeDomElement;\n                  return regeneratorRuntime.wrap(function _callee16$(_context16) {\n                    while (1) {\n                      switch (_context16.prev = _context16.next) {\n                        case 0:\n                          dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .date-control input');\n                          timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .ember-power-select-selected-item');\n                          assert.equal(dateDomElement[0]['value'], '02/14/2014', 'Date \\'02/14/2014\\' is now selected in date control');\n                          assert.equal(timeDomElement.length, 1, 'A choice is now selected in time control');\n                          assert.equal(timeDomElement[0]['innerText'], '11:15 PM', 'Time \\'11:15 PM\\' is now selected in time control');\n                          _context16.next = 7;\n                          return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n                        case 7:\n                          _context16.next = 9;\n                          return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n                        case 9:\n                          _context16.next = 11;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n\n                        case 11:\n                          _context16.next = 13;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 40);\n\n                        case 13:\n                          _context16.next = 15;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);\n\n                        case 15:\n                          return _context16.abrupt(\"return\", (0, _wait.default)().then(function () {\n                            var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .date-control input');\n                            var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fFrom\"] .ember-power-select-selected-item');\n                            assert.equal(dateDomElement.length, 1, 'A date is now selected');\n                            assert.equal(dateDomElement[0]['value'], '02/28/2013', 'Date \\'02/28/2013\\' is now selected');\n                            assert.equal(timeDomElement.length, 1, 'A time is now selected');\n                            assert.equal(timeDomElement[0]['innerText'], '11:30 PM', 'Time \\'11:30 PM\\' is now selected');\n                            assert.equal(Ember.get(_this7, 'customFieldModel.customField.fFrom'), '2013-02-28T23:30:00.000Z', 'Model contains \\'2014-02-15T23:30:00.000Z\\' as field value');\n                          }));\n\n                        case 16:\n                        case \"end\":\n                          return _context16.stop();\n                      }\n                    }\n                  }, _callee16);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x15) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split : able to enable and disable the field based on \\'editable\\' property of schema', /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this8, 'defaultFieldSchema.fields.0.editable', false);\n                });\n                _context18.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.notEqual((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is disabled when \\'editable\\' is \\'true\\'');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'].value, 'true', 'Time control is disabled when \\'editable\\' is \\'true\\'');\n                Ember.run(function () {\n                  Ember.set(_this8, 'defaultFieldSchema.fields.0.editable', true);\n                });\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['attributes']['disabled'], undefined, 'Date control is enabled when \\'editable\\' is \\'false\\'');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')[0]['attributes']['aria-disabled'], undefined, 'Time control is enabled when \\'editable\\' is \\'false\\'');\n\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      return function (_x16) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split : able to provide seperate placeholders for date and time control in the field', /*#__PURE__*/function () {\n      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                assert.expect(2);\n                Ember.run(function () {\n                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    placeholder: {\n                      date: 'Select date...',\n                      time: 'Select time...'\n                    }\n                  });\n                });\n                _context19.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['placeholder'], 'Select date...', 'Date control renders its placeholder');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-placeholder')[0]['innerText'], 'Select time...', 'Time control renders its placeholder');\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      return function (_x17) {\n        return _ref20.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the date-time-split component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"שלום\";\n                createField.dateTimeSplit(this, {\n                  label: sampleLabel\n                });\n                _context20.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      return function (_x18) {\n        return _ref21.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n\n    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    format: 'YYYY-MM-DD'\n                  });\n                });\n                _context21.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context21.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context21.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013-02-28', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      return function (_x19) {\n        return _ref22.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {\n      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {\n        var _this11 = this;\n\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    format: 'YYYY/MM/DD'\n                  });\n                });\n                _context22.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context22.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context22.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '2013/02/28', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      return function (_x20) {\n        return _ref23.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {\n      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {\n        var _this12 = this;\n\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    format: 'DD-MM-YYYY'\n                  });\n                });\n                _context23.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context23.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context23.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')['length'], 1, 'The date control renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.date-control input')[0]['value'], '28-02-2013', 'The date is setted renders properly');\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '2013-02-28T', 'Model contains 2014-02-28T00:00:00.000Z  as field value');\n\n              case 12:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      return function (_x21) {\n        return _ref24.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('date-time-split: passing different format in fieldoptions and asserting whether it rendered properly or not', /*#__PURE__*/function () {\n      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(assert) {\n        var _this13 = this;\n\n        return regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                assert.expect(6);\n                Ember.run(function () {\n                  Ember.set(_this13, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    format: 'YYYY-MM-DD'\n                  });\n                });\n                _context24.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fFrom'), '', 'field data in model is empty');\n                _context24.next = 7;\n                return (0, _emberNativeDomHelpers.click)('.date-control .ember-basic-dropdown-trigger');\n\n              case 7:\n                _context24.next = 9;\n                return (0, _testSupport.calendarSelect)('.ember-power-calendar', new Date('2013-02-28'));\n\n              case 9:\n                _context24.next = 11;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'));\n\n              case 11:\n                _context24.next = 13;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), 13);\n\n              case 13:\n                return _context24.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  var dateDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .date-control input');\n                  var timeDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fFrom\"] .ember-power-select-selected-item');\n                  assert.equal(dateDomElement.length, 1, 'A date is now selected');\n                  assert.equal(dateDomElement[0]['value'], '2013-02-28', 'Date \\'2013-02-28\\' is now selected');\n                  assert.equal(timeDomElement.length, 1, 'A time is now selected');\n                  assert.equal(timeDomElement[0]['innerText'], '12:00 AM', 'Time \\'11:30 PM\\' is now selected');\n                  assert.equal(Ember.get(_this13, 'defaultFieldModel.fFrom'), '2013-02-28T00:00:00.000Z', 'Model contains \\'2014-02-15T23:30:00.000Z\\' as field value');\n                }));\n\n              case 14:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      return function (_x22) {\n        return _ref25.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/dependent-dropdown-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/dependent dropdown field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          cfCountry: undefined,\n          cfNorthState: undefined,\n          cfSouthState: undefined,\n          cfNorthStateUrbanCity: undefined,\n          cfNorthStateRuralCity: undefined\n        },\n        defaultFieldSchema: {\n          name: 'Dependent Dropdown Test Form',\n          description: 'A form designed to test the rendering of dependent dropdown in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            hint: 'resident_country',\n            type: 'dependent_dropdown',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: false,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              parentChoiceIds: null\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              parentChoiceIds: null\n            }],\n            inputType: 'dependent-dropdown',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'id',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              hint: 'resident_state',\n              type: 'dependent_dropdown',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                parentChoiceIds: ['usa_id']\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                parentChoiceIds: ['india_id']\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                parentChoiceIds: ['usa_id']\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                parentChoiceIds: ['india_id']\n              }],\n              inputType: 'dependent-dropdown',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                hint: 'current_resident_northern_state_urban_city',\n                type: 'dropdown',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  parentChoiceIds: ['punjab_id']\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  parentChoiceIds: ['punjab_id']\n                }],\n                inputType: 'power-select-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'dropdown',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  parentChoiceIds: ['punjab_id']\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  parentChoiceIds: ['punjab_id']\n                }],\n                inputType: 'power-select-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'dropdown',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                parentChoiceIds: ['india_id']\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                parentChoiceIds: ['india_id']\n              }],\n              inputType: 'power-select-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        }\n      });\n    });\n\n    function assertFieldStatusBeforeClick(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] label')['innerText'].trim(), fieldLabel, 'Label for \\'' + fieldName + '\\' field renders properly');\n    }\n\n    function assertFieldStatusAfterClick(assert, fieldName, fieldDomId, choiceValues) {\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option').length, choiceValues.length, 'All choices for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[0]['innerText'].trim(), choiceValues[0], 'First choice is \\'' + choiceValues[0] + '\\' for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[1]['innerText'].trim(), choiceValues[1], 'Second choice is \\'' + choiceValues[1] + '\\' for \\'' + fieldName + '\\' field');\n    }\n\n    function assertFieldStatusAfterSelect(assert, testScope, fieldName, fieldChoiceSelected, valueInModel, fieldsCnt, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n      var fieldDom = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] .ember-power-select-selected-item');\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], fieldsCnt, 'All dependent selects for \\'' + fieldName + '\\' field renders properly');\n      if (Ember.isNone(fieldDom)) assert.equal(fieldDom, fieldChoiceSelected, 'No choice for \\'' + fieldName + '\\' field is selected now');else assert.equal(fieldDom['innerText'], fieldChoiceSelected, 'Choice \\'' + fieldChoiceSelected + '\\' for \\'' + fieldName + '\\' field is selected now');\n    }\n\n    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {\n      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';\n      var fieldNameIndex = 0;\n\n      for (var fieldName in Ember.get(testScope, model)) {\n        var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n        var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \\'' + valuesInModel[fieldNameIndex] + '\\' as value for \\'' + fieldName + '\\' field');\n        fieldNameIndex++;\n      }\n    }\n\n    (0, _qunit.test)('dependent-dropdown-field with leaf fields as dropdowns : selecting or unselecting a choice of controlling field updates its dependent dropdowns', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var fieldId;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(47);\n                this.owner.register('component:custom-tooltip', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"wpQ1P2uR\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"my_tooltip\\\"],[7],[0,\\\"This_is_custom_tooltip\\\"],[8]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                Ember.setProperties(this, {\n                  fieldNameToHintComponentMap: {\n                    cfNorthState: 'custom-tooltip'\n                  }\n                });\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"G8ajctLL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldNameToHintComponentMap\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]],[20,[\\\"fieldNameToHintComponentMap\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?resident_country', 'Hint for the field renders properly');\n                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('cfCountry_hint'), 'Hint id for the hint component gets populated properly');\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'India', 'india_id', 3, true);\n                  assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Hint for the field renders properly');\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this, 'cfNorthState', 'North State', undefined, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _testHelpers.settled)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);\n                    assert.equal(Ember.$('button.formserv-tooltip').text().replace(/\\s/g, ''), '?resident_country?current_resident_northern_state_urban_city', 'Hint for the field renders properly');\n                    assert.ok(Ember.$('button.formserv-tooltip')[1]['id'].includes('cfNorthStateUrbanCity_hint'), 'Hint id for the hint component gets populated properly');\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    Ember.run(function () {\n                      _this.owner.unregister('component:custom-tooltip');\n                    });\n                    return (0, _testHelpers.settled)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this, 'cfNorthStateUrbanCity', 'Patiala', 'patiala_id', 5, true);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this, 'cfCountry', 'Country', 'india_id', true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _testHelpers.settled)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'USA', 'usa_id', 2, true);\n                        assertModelStatus(assert, _this, ['usa_id', undefined, undefined, undefined, undefined], true);\n                      });\n                    });\n                  });\n                }));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/dependent-select/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/dependent select', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"D+TlJRx8\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"form-fields/dependent-select\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(this.$().text().trim(), '');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/dependent-selects/checkbox-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/dependent selects/checkbox field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          cfProvidedName: undefined,\n          cfProvidedPersonalInfo: undefined,\n          cfProvidedAge: undefined,\n          cfProvidedGender: undefined,\n          cfProvidedAddress: undefined\n        },\n        customFieldModel: {\n          customField: {\n            cfProvidedName: undefined,\n            cfProvidedPersonalInfo: undefined,\n            cfProvidedAge: undefined,\n            cfProvidedGender: undefined,\n            cfProvidedAddress: undefined\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"provided_name_id\",\n            name: \"cfProvidedName\",\n            label: \"Provided Name ?\",\n            type: 'checkbox',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: false,\n            getChoices: [{\n              id: \"provided_name_true_id\",\n              value: \"true\",\n              position: 1,\n              dependentIds: {\n                field: [\"provided_personal_info_id\", \"provided_address_id\"]\n              }\n            }, {\n              id: \"provided_name_false_id\",\n              value: \"false\",\n              position: 2,\n              dependentIds: {\n                field: []\n              }\n            }],\n            inputType: 'checkbox-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'id',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"provided_personal_info_id\",\n              name: \"cfProvidedPersonalInfo\",\n              label: \"Provided Personal Information ?\",\n              type: 'checkbox',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"provided_personal_info_true_id\",\n                value: \"true\",\n                position: 3,\n                dependentIds: {\n                  field: [\"provided_age_id\", \"provided_gender_id\"]\n                }\n              }, {\n                id: \"provided_personal_info_false_id\",\n                value: \"false\",\n                position: 7,\n                dependentIds: {\n                  field: []\n                }\n              }],\n              inputType: 'checkbox-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"provided_age_id\",\n                name: \"cfProvidedAge\",\n                label: \"Provided Age ?\",\n                type: 'checkbox',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"provided_age_true_id\",\n                  value: \"true\",\n                  position: 1,\n                  dependentIds: {\n                    field: []\n                  }\n                }, {\n                  id: \"provided_age_false_id\",\n                  value: \"false\",\n                  position: 2,\n                  dependentIds: {\n                    field: []\n                  }\n                }],\n                inputType: 'checkbox-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"provided_gender_id\",\n                name: \"cfProvidedGender\",\n                label: \"Provided Gender ?\",\n                type: 'checkbox',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"provided_gender_true_id\",\n                  value: \"true\",\n                  position: 1,\n                  dependentIds: {\n                    field: []\n                  }\n                }, {\n                  id: \"provided_gender_false_id\",\n                  value: \"false\",\n                  position: 2,\n                  dependentIds: {\n                    field: []\n                  }\n                }],\n                inputType: 'checkbox-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"provided_address_id\",\n              name: \"cfProvidedAddress\",\n              label: \"Provided Address ?\",\n              hint: 'current_residence',\n              type: 'checkbox',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"provided_address_true_id\",\n                value: \"true\",\n                position: 1,\n                dependentIds: {\n                  field: []\n                }\n              }, {\n                id: \"provided_address_false_id\",\n                value: \"false\",\n                position: 2,\n                dependentIds: {\n                  field: []\n                }\n              }],\n              inputType: 'checkbox-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        },\n        customFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"provided_name_id\",\n            name: \"cfProvidedName\",\n            label: \"Provided Name ?\",\n            type: 'checkbox',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: true,\n            getChoices: [{\n              id: \"provided_name_true_id\",\n              value: \"true\",\n              position: 1,\n              dependentIds: {\n                field: [\"provided_personal_info_id\", \"provided_address_id\"]\n              }\n            }, {\n              id: \"provided_name_false_id\",\n              value: \"false\",\n              position: 2,\n              dependentIds: {\n                field: []\n              }\n            }],\n            inputType: 'checkbox-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'value',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"provided_personal_info_id\",\n              name: \"cfProvidedPersonalInfo\",\n              label: \"Provided Personal Information ?\",\n              type: 'checkbox',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"provided_personal_info_true_id\",\n                value: \"true\",\n                position: 3,\n                dependentIds: {\n                  field: [\"provided_age_id\", \"provided_gender_id\"]\n                }\n              }, {\n                id: \"provided_personal_info_false_id\",\n                value: \"false\",\n                position: 7,\n                dependentIds: {\n                  field: []\n                }\n              }],\n              inputType: 'checkbox-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"provided_age_id\",\n                name: \"cfProvidedAge\",\n                label: \"Provided Age ?\",\n                type: 'checkbox',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"provided_age_true_id\",\n                  value: \"true\",\n                  position: 1,\n                  dependentIds: {\n                    field: []\n                  }\n                }, {\n                  id: \"provided_age_false_id\",\n                  value: \"false\",\n                  position: 2,\n                  dependentIds: {\n                    field: []\n                  }\n                }],\n                inputType: 'checkbox-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                fields: []\n              }, {\n                id: \"provided_gender_id\",\n                name: \"cfProvidedGender\",\n                label: \"Provided Gender ?\",\n                type: 'checkbox',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"provided_gender_true_id\",\n                  value: \"true\",\n                  position: 1,\n                  dependentIds: {\n                    field: []\n                  }\n                }, {\n                  id: \"provided_gender_false_id\",\n                  value: \"false\",\n                  position: 2,\n                  dependentIds: {\n                    field: []\n                  }\n                }],\n                inputType: 'checkbox-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"provided_address_id\",\n              name: \"cfProvidedAddress\",\n              label: \"Provided Address ?\",\n              hint: 'current_residence',\n              type: 'checkbox',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"provided_address_true_id\",\n                value: \"true\",\n                position: 1,\n                dependentIds: {\n                  field: []\n                }\n              }, {\n                id: \"provided_address_false_id\",\n                value: \"false\",\n                position: 2,\n                dependentIds: {\n                  field: []\n                }\n              }],\n              inputType: 'checkbox-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        }\n      });\n    });\n\n    function assertFieldStatus(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] label')['innerText'].trim(), fieldLabel, 'Label for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input')[0]['type'], 'checkbox', 'Choices are displayed as checkbox for \\'' + fieldName + '\\' field');\n    }\n\n    function assertChoiceStatus(assert, fieldName, isChecked, fieldsCnt, isDefault) {\n      var checkboxStatus = isChecked ? 'checked' : 'unchecked';\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      assert.equal((0, _emberNativeDomHelpers.findAll)('input')['length'], fieldsCnt, 'All dependent selects for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input')[0]['checked'], isChecked, 'Checkbox for \\'' + fieldName + '\\' field is ' + checkboxStatus + ' now');\n    }\n\n    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {\n      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';\n      var fieldNameIndex = 0;\n\n      for (var fieldName in Ember.get(testScope, model)) {\n        var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n        var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \\'' + valuesInModel[fieldNameIndex] + '\\' as value for \\'' + fieldName + '\\' field');\n        fieldNameIndex++;\n      }\n    }\n\n    (0, _qunit.test)('dependent-checkbox-field (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), \"\", 'Hint for the field does not render if field is not selected');\n                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, true);\n                assertChoiceStatus(assert, 'cfProvidedName', false, 1, true);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-checkbox-field (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(6);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), \"\", 'Hint for the field does not render if field is not selected');\n                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, false);\n                assertChoiceStatus(assert, 'cfProvidedName', false, 1, false);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-checkbox-field (as default field) : checking or unchecking a controlling field updates its dependent fields', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(55);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertModelStatus(assert, this, [false, undefined, undefined, undefined, undefined], true);\n                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, true);\n                assertChoiceStatus(assert, 'cfProvidedName', false, 1, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfProvidedName\"] input'));\n                assertChoiceStatus(assert, 'cfProvidedName', true, 3, true);\n                assertModelStatus(assert, this, [true, false, undefined, undefined, false], true);\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assertFieldStatus(assert, _this, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', false, true);\n                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', false, 3, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfProvidedPersonalInfo\"] input'));\n                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, true);\n                  assertModelStatus(assert, _this, [true, true, false, false, false], true);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assertFieldStatus(assert, _this, 'cfProvidedGender', 'Provided Gender ?', false, true);\n                    assertChoiceStatus(assert, 'cfProvidedGender', false, 5, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfProvidedGender\"] input'));\n                    assertChoiceStatus(assert, 'cfProvidedGender', true, 5, true);\n                    assertModelStatus(assert, _this, [true, true, false, true, false], true);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assertFieldStatus(assert, _this, 'cfProvidedName', 'Provided Name ?', true, true);\n                      assertChoiceStatus(assert, 'cfProvidedName', true, 5, true);\n                      assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residence', 'Hint for the field renders properly');\n                      assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('cfProvidedAddress_hint'), 'Hint id for the hint component gets populated properly');\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfProvidedName\"] input'));\n                      assertChoiceStatus(assert, 'cfProvidedName', false, 1, true);\n                      assertModelStatus(assert, _this, [false, undefined, undefined, undefined, undefined], true);\n                    });\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-checkbox-field (as custom field) : checking or unchecking a controlling field updates its dependent fields', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(55);\n                _context4.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertModelStatus(assert, this, [false, undefined, undefined, undefined, undefined], false);\n                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', false, false);\n                assertChoiceStatus(assert, 'cfProvidedName', false, 1, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfProvidedName\"] input'));\n                assertChoiceStatus(assert, 'cfProvidedName', true, 3, false);\n                assertModelStatus(assert, this, [true, false, undefined, undefined, false], false);\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assertFieldStatus(assert, _this2, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', false, false);\n                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', false, 3, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfProvidedPersonalInfo\"] input'));\n                  assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, false);\n                  assertModelStatus(assert, _this2, [true, true, false, false, false], false);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assertFieldStatus(assert, _this2, 'cfProvidedGender', 'Provided Gender ?', false, false);\n                    assertChoiceStatus(assert, 'cfProvidedGender', false, 5, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfProvidedGender\"] input'));\n                    assertChoiceStatus(assert, 'cfProvidedGender', true, 5, false);\n                    assertModelStatus(assert, _this2, [true, true, false, true, false], false);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assertFieldStatus(assert, _this2, 'cfProvidedName', 'Provided Name ?', true, false);\n                      assertChoiceStatus(assert, 'cfProvidedName', true, 5, false);\n                      assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residence', 'Hint for the field renders properly');\n                      assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('customField.cfProvidedAddress_hint'), 'Hint id for the hint component gets populated properly');\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfProvidedName\"] input'));\n                      assertChoiceStatus(assert, 'cfProvidedName', false, 1, false);\n                      assertModelStatus(assert, _this2, [false, undefined, undefined, undefined, undefined], false);\n                    });\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Render custom hint for dependent-checkbox-field depending on fieldNameToHintComponentMap', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                this.owner.register('component:custom-tooltip', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"wpQ1P2uR\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"my_tooltip\\\"],[7],[0,\\\"This_is_custom_tooltip\\\"],[8]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                Ember.setProperties(this, {\n                  fieldNameToHintComponentMap: {\n                    cfProvidedAddress: 'custom-tooltip'\n                  }\n                });\n                _context5.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"TYERHTcO\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldNameToHintComponentMap\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]],[20,[\\\"fieldNameToHintComponentMap\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfProvidedName\"] input'));\n                return _context5.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfProvidedPersonalInfo\"] input'));\n                  return (0, _testHelpers.settled)().then(function () {\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfProvidedGender\"] input'));\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Hint for the field renders properly');\n                      Ember.run(function () {\n                        _this3.owner.unregister('component:custom-tooltip');\n                      });\n                    });\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-checkbox-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(30);\n                Ember.run(function () {\n                  Ember.set(_this4, 'defaultFieldModel.cfProvidedName', true);\n                  Ember.set(_this4, 'defaultFieldModel.cfProvidedPersonalInfo', true);\n                  Ember.set(_this4, 'defaultFieldModel.cfProvidedGender', true);\n                });\n                _context6.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', true, true);\n                assertChoiceStatus(assert, 'cfProvidedName', true, 5, true);\n                assertFieldStatus(assert, this, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', true, true);\n                assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, true);\n                assertFieldStatus(assert, this, 'cfProvidedAge', 'Provided Age ?', false, true);\n                assertChoiceStatus(assert, 'cfProvidedAge', false, 5, true);\n                assertFieldStatus(assert, this, 'cfProvidedGender', 'Provided Gender ?', true, true);\n                assertChoiceStatus(assert, 'cfProvidedGender', true, 5, true);\n                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ?', false, true);\n                assertChoiceStatus(assert, 'cfProvidedAddress', false, 5, true);\n                assertModelStatus(assert, this, [true, true, false, true, false], true);\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-checkbox-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(30);\n                Ember.run(function () {\n                  Ember.set(_this5, 'customFieldModel.customField.cfProvidedName', true);\n                  Ember.set(_this5, 'customFieldModel.customField.cfProvidedPersonalInfo', true);\n                  Ember.set(_this5, 'customFieldModel.customField.cfProvidedGender', true);\n                });\n                _context7.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfProvidedName', 'Provided Name ?', true, false);\n                assertChoiceStatus(assert, 'cfProvidedName', true, 5, false);\n                assertFieldStatus(assert, this, 'cfProvidedPersonalInfo', 'Provided Personal Information ?', true, false);\n                assertChoiceStatus(assert, 'cfProvidedPersonalInfo', true, 5, false);\n                assertFieldStatus(assert, this, 'cfProvidedAge', 'Provided Age ?', false, false);\n                assertChoiceStatus(assert, 'cfProvidedAge', false, 5, false);\n                assertFieldStatus(assert, this, 'cfProvidedGender', 'Provided Gender ?', true, false);\n                assertChoiceStatus(assert, 'cfProvidedGender', true, 5, false);\n                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ?', false, false);\n                assertChoiceStatus(assert, 'cfProvidedAddress', false, 5, false);\n                assertModelStatus(assert, this, [true, true, false, true, false], false);\n\n              case 15:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-checkbox-field (as custom field) : Required-fieldids is honoured ', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(3);\n                Ember.run(function () {\n                  Ember.set(_this6, 'customFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['provided_address_id']);\n                  Ember.set(_this6, 'customFieldModel.customField.cfProvidedName', true);\n                  Ember.set(_this6, 'customFieldModel.customField.cfProvidedPersonalInfo', true);\n                  Ember.set(_this6, 'customFieldModel.customField.cfProvidedGender', true);\n                });\n                _context8.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ? *', false, false);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-checkbox-field (as custom field) : Setting required-fieldids is not honoured ', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(3);\n                Ember.run(function () {\n                  Ember.set(_this7, 'customFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['provided_address_id']);\n                  Ember.set(_this7, 'customFieldSchema.fields.0.getChoices.1.dependentIds.field', ['provided_address_id']);\n                  Ember.set(_this7, 'customFieldModel.customField.cfProvidedName', false);\n                });\n                _context9.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfProvidedAddress', 'Provided Address ?', false, false);\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/dependent-selects/power-select-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers, _emberPowerSelect) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/dependent selects/power select field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          cfCountry: undefined,\n          cfNorthState: undefined,\n          cfSouthState: undefined,\n          cfNorthStateUrbanCity: undefined,\n          cfNorthStateRuralCity: undefined\n        },\n        customFieldModel: {\n          customField: {\n            cfCountry: undefined,\n            cfNorthState: undefined,\n            cfSouthState: undefined,\n            cfNorthStateUrbanCity: undefined,\n            cfNorthStateRuralCity: undefined\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'dropdown',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: false,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'power-select-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'id',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'dropdown',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'dropdown',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'dropdown',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'dropdown',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        },\n        customFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'dropdown',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: true,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'power-select-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'value',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'dropdown',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'dropdown',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'dropdown',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'dropdown',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        }\n      });\n    });\n\n    function assertFieldStatusBeforeClick(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] label')['innerText'], fieldLabel, 'Label for \\'' + fieldName + '\\' field renders properly');\n    }\n\n    function assertFieldStatusAfterClick(assert, fieldName, fieldDomId, choiceValues) {\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option').length, choiceValues.length, 'All choices for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[0]['innerText'].trim(), choiceValues[0], 'First choice is \\'' + choiceValues[0] + '\\' for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[1]['innerText'].trim(), choiceValues[1], 'Second choice is \\'' + choiceValues[1] + '\\' for \\'' + fieldName + '\\' field');\n    }\n\n    function assertFieldStatusAfterSelect(assert, testScope, fieldName, fieldChoiceSelected, valueInModel, fieldsCnt, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n      var fieldDom = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] .ember-power-select-selected-item');\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], fieldsCnt, 'All dependent selects for \\'' + fieldName + '\\' field renders properly');\n      if (Ember.isNone(fieldDom)) assert.equal(fieldDom, fieldChoiceSelected, 'No choice for \\'' + fieldName + '\\' field is selected now');else assert.equal(fieldDom['innerText'], fieldChoiceSelected, 'Choice \\'' + fieldChoiceSelected + '\\' for \\'' + fieldName + '\\' field is selected now');\n    }\n\n    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {\n      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';\n      var fieldNameIndex = 0;\n\n      for (var fieldName in Ember.get(testScope, model)) {\n        var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n        var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \\'' + valuesInModel[fieldNameIndex] + '\\' as value for \\'' + fieldName + '\\' field');\n        fieldNameIndex++;\n      }\n    }\n\n    (0, _qunit.test)('dependent-power-select-field (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        var fieldId;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(46);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'India', 'india_id', 3, true);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this, 'cfNorthState', 'North State', undefined, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _testHelpers.settled)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _testHelpers.settled)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this, 'cfNorthStateUrbanCity', 'Patiala', 'patiala_id', 5, true);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this, 'cfCountry', 'Country', 'india_id', true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _testHelpers.settled)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'USA', 'usa_id', 2, true);\n                        assertModelStatus(assert, _this, ['usa_id', undefined, undefined, undefined, undefined], true);\n                      });\n                    });\n                  });\n                }));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this2 = this;\n\n        var fieldId, usaObj, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(42);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context4.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context4.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'India', indiaObj, 3, true);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this2, 'cfNorthState', 'North State', undefined, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this2, 'cfNorthState', 'Punjab', punjabObj, 5, true);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this2, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this2, 'cfCountry', 'Country', indiaObj, true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _wait.default)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'USA', usaObj, 2, true);\n                        assertModelStatus(assert, _this2, [usaObj, undefined, undefined, undefined, undefined], true);\n                      });\n                    });\n                  });\n                }));\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this3 = this;\n\n        var fieldId;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(42);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context5.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'India', 'India', 3, false);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this3, 'cfNorthState', 'North State', undefined, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this3, 'cfNorthState', 'Punjab', 'Punjab', 5, false);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this3, 'cfNorthStateUrbanCity', 'Patiala', 'Patiala', 5, false);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this3, 'cfCountry', 'Country', 'India', false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _wait.default)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'USA', 'USA', 2, false);\n                        assertModelStatus(assert, _this3, ['USA', undefined, undefined, undefined, undefined], false);\n                      });\n                    });\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this4 = this;\n\n        var usaObj, indiaObj, punjabObj, patialaObj, fieldId;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(42);\n                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context6.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context6.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'India', indiaObj, 3, false);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this4, 'cfNorthState', 'North State', undefined, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this4, 'cfNorthState', 'Punjab', punjabObj, 5, false);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this4, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this4, 'cfCountry', 'Country', indiaObj, false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _wait.default)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'USA', usaObj, 2, false);\n                        assertModelStatus(assert, _this4, [usaObj, undefined, undefined, undefined, undefined], false);\n                      });\n                    });\n                  });\n                }));\n\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(25);\n                Ember.run(function () {\n                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');\n                });\n                _context7.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'india_id', 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'punjab_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'mandi_id', 5, true);\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerioby keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this6 = this;\n\n        var indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(25);\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                Ember.run(function () {\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldModel.cfCountry', indiaObj);\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', punjabObj);\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', patialaObj);\n                });\n                _context8.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, true);\n\n              case 17:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(25);\n                Ember.run(function () {\n                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');\n                });\n                _context9.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'India', false);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'India', 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'Punjab', false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'Punjab', 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'Mandi', 5, false);\n\n              case 14:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this8 = this;\n\n        var indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(25);\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                Ember.run(function () {\n                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);\n                });\n                _context10.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, false);\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: allow dependency mapping with \\'None\\' choice', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this9 = this;\n\n        var fieldId;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(15);\n                Ember.run(function () {\n                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');\n                });\n                _context11.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['New York', 'Punjab']);\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfSouthState', fieldId, ['Tamil Nadu', 'Kerala']);\n\n              case 16:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: dependent fields for dropdown renders properly', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(15);\n                Ember.run(function () {\n                  /*  'cfNorthStateUrbanCity' is a text field  */\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.0.type', 'text');\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.0.inputType', 'text-field');\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices', []);\n                  /*  'cfNorthStateRuralCity' is a text field  */\n\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.1.type', 'text');\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.1.inputType', 'text-field');\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.fields.1.getChoices', []);\n                  /*  Update parent field's choice to contain dependent field ids as 'northern_state_rural_city_id' and 'northern_state_urban_city_id'  */\n\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.0.getChoices.0.dependentIds.field', ['northern_state_rural_city_id', 'northern_state_urban_city_id']);\n                  /*  'cfSouthState' is a section  */\n\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.1.type', 'section');\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.1.inputType', 'nested-section');\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.fields.1.getChoices', []);\n                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */\n\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);\n                  Ember.set(_this10, 'defaultFieldModel.cfCountry', 'usa_id');\n                  Ember.set(_this10, 'defaultFieldModel.cfNorthState', 'new_york_id');\n                });\n                _context12.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 2, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 2, true);\n                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateRuralCity\"] label').innerText.trim(), 'North State Rural City', 'Label for \\'cfNorthStateRuralCity\\' field renders properly');\n                assert.ok((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateRuralCity\"] input'), 'Control for \\'cfNorthStateRuralCity\\' field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] label').innerText.trim(), 'North State Urban City', 'Label for \\'cfNorthStateUrbanCity\\' field renders properly');\n                assert.ok((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] input'), 'Control for \\'cfNorthStateUrbanCity\\' field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.find)('.fieldset-title').innerText.trim(), 'South State', 'Label for \\'cfSouthState\\' field renders properly');\n\n              case 13:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: checkbox as dependent field(i.e. not as dependent select) for dropdown renders properly', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this11 = this;\n\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(13);\n                Ember.run(function () {\n                  /*  'cfSouthState' is a checkbox field */\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fields.1.type', 'checkbox');\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fields.1.inputType', 'checkbox-dependent-field');\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.fields.1.getChoices', []);\n                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */\n\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);\n                  Ember.set(_this11, 'defaultFieldModel.cfCountry', 'usa_id');\n                  Ember.set(_this11, 'defaultFieldModel.cfNorthState', 'new_york_id');\n                  Ember.set(_this11, 'defaultFieldModel.cfSouthState', true);\n                });\n                _context13.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 2, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 2, true);\n                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] label')['innerText'].trim(), 'South State', 'Label for \\'cfSouthState\\' field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfSouthState\"] input')[0]['type'], 'checkbox', 'Choices are displayed as checkbox for \\'cfSouthState\\' field');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfSouthState\"] input')[0]['checked'], true, 'Checkbox for \\'cfSouthState\\' field is checked now');\n\n              case 11:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: dropdown as dependent field(i.e. not as dependent select) for dropdown renders properly', /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this12 = this;\n\n        var fieldId;\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(15);\n                Ember.run(function () {\n                  /*  'cfSouthState' is a dropdown field  */\n                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fields.1.type', 'dropdown');\n                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fields.1.inputType', 'power-select-dependent-field');\n                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */\n\n                  Ember.set(_this12, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);\n                  Ember.set(_this12, 'defaultFieldModel.cfCountry', 'usa_id');\n                  Ember.set(_this12, 'defaultFieldModel.cfNorthState', 'new_york_id');\n                });\n                _context14.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 3, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 3, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] .ember-power-select-trigger'));\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusAfterClick(assert, 'cfSouthState', fieldId, ['Tamil Nadu', 'Kerala']);\n\n              case 12:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: radio as dependent field(i.e. not as dependent select) for dropdown renders properly', /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this13 = this;\n\n        var choicePos, choices, _i, _choices, choice;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(14);\n                Ember.run(function () {\n                  /*  'cfSouthState' is a radio field  */\n                  Ember.set(_this13, 'defaultFieldSchema.fields.0.fields.1.type', 'radio');\n                  Ember.set(_this13, 'defaultFieldSchema.fields.0.fields.1.inputType', 'radio-dependent-field');\n                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */\n\n                  Ember.set(_this13, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);\n                  Ember.set(_this13, 'defaultFieldModel.cfCountry', 'usa_id');\n                  Ember.set(_this13, 'defaultFieldModel.cfNorthState', 'new_york_id');\n                });\n                _context15.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 2, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 2, true);\n                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] .control-label')['innerText'].trim(), 'South State', 'Label for \\'cfSouthState\\' field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfSouthState\"] input')[0]['type'], 'radio', 'Choices are displayed as radio for \\'cfSouthState\\' field');\n                choicePos = 0;\n                choices = ['Tamil Nadu', 'Kerala'];\n\n                for (_i = 0, _choices = choices; _i < _choices.length; _i++) {\n                  choice = _choices[_i];\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfSouthState\"] .radio-field label')[choicePos]['innerText'].trim(), choice, 'Choice ' + (choicePos + 1) + ' is \\'' + choice + '\\' for \\'cfSouthState\\' field');\n                  choicePos++;\n                }\n\n              case 13:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x15) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: multi-select as dependent select renders properly', /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this14 = this;\n\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(10);\n                Ember.run(function () {\n                  /*  'cfSouthState' is a multi-select field  */\n                  Ember.set(_this14, 'defaultFieldSchema.fields.0.fields.1.type', 'multi_select_dropdown');\n                  Ember.set(_this14, 'defaultFieldSchema.fields.0.fields.1.inputType', 'multi-select-dropdown-field');\n                  Ember.set(_this14, 'defaultFieldModel.cfCountry', 'india_id');\n                });\n                _context16.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                _context16.next = 6;\n                return assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);\n\n              case 6:\n                _context16.next = 8;\n                return assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'india_id', 3, true);\n\n              case 8:\n                _context16.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"cfSouthState\"]');\n\n              case 10:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 2, 'Both the choices gets rendered inside the \\'cfSouthState\\' field properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]['innerText'], 'Kerala', 'Choice \\'Kerala\\' for \\'cfSouthState\\' field is rendered properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]['innerText'], 'Tamil Nadu', 'Choice \\'Tamil Nadu\\' for \\'cfSouthState\\' field is rendered properly');\n                _context16.next = 15;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);\n\n              case 15:\n                _context16.next = 17;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 17:\n                _context16.next = 19;\n                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"cfSouthState\"]');\n\n              case 19:\n                _context16.next = 21;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 21:\n                //  Press Enter\n                assert.equal(Ember.get(this, 'defaultFieldModel.cfSouthState'), 'kerala_id;tamilnadu_id', 'Model contains ids of \\'Kerala\\' and \\'Tamil Nadu\\' as field value');\n                _context16.next = 24;\n                return (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"cfCountry\"]');\n\n              case 24:\n                _context16.next = 26;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 38);\n\n              case 26:\n                _context16.next = 28;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13);\n\n              case 28:\n                //  Press Enter\n                assert.equal(Ember.get(this, 'defaultFieldModel.cfSouthState'), undefined, 'Model contains \\'undefined\\' as field value');\n\n              case 29:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x16) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: Setting required-field option for the immediate child for a particular choice', /*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var _this15 = this;\n\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(12);\n                Ember.run(function () {\n                  /*  'cfSouthState' is a dropdown field  */\n                  Ember.set(_this15, 'defaultFieldSchema.fields.0.fields.1.type', 'dropdown');\n                  Ember.set(_this15, 'defaultFieldSchema.fields.0.fields.1.inputType', 'power-select-dependent-field');\n                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */\n\n                  Ember.set(_this15, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);\n                  Ember.set(_this15, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['south_state_id']);\n                  Ember.set(_this15, 'defaultFieldModel.cfCountry', 'usa_id');\n                  Ember.set(_this15, 'defaultFieldModel.cfNorthState', 'new_york_id');\n                });\n                _context17.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'usa_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'USA', 'usa_id', 3, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'new_york_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'New York', 'new_york_id', 3, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State *', undefined, true);\n\n              case 9:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x17) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: Setting required-field option, but selecting a different parent choice', /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var _this16 = this;\n\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(4);\n                Ember.run(function () {\n                  /*  'cfSouthState' is a dropdown field  */\n                  Ember.set(_this16, 'defaultFieldSchema.fields.0.fields.1.type', 'dropdown');\n                  Ember.set(_this16, 'defaultFieldSchema.fields.0.fields.1.inputType', 'power-select-dependent-field');\n                  /*  Update parent field's choice to contain dependent field id as 'south_state_id'  */\n\n                  Ember.set(_this16, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.field', ['south_state_id']);\n                  Ember.set(_this16, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['south_state_id']);\n                  Ember.set(_this16, 'defaultFieldModel.cfCountry', 'india_id');\n                });\n                _context18.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x18) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: allow Required-fieldIds mapping with \\'None\\' choice', /*#__PURE__*/function () {\n      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {\n        var _this17 = this;\n\n        var fieldId;\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                assert.expect(15);\n                Ember.run(function () {\n                  Ember.set(_this17, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');\n                  Ember.set(_this17, 'defaultFieldSchema.fields.0.fieldOptions.dependent_required_field_ids_for_none', 'south_state_id');\n                });\n                _context19.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['New York', 'Punjab']);\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State *', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfSouthState\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfSouthState', fieldId, ['Tamil Nadu', 'Kerala']);\n\n              case 16:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      return function (_x19) {\n        return _ref20.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field: Toggling between child text fields, based on choice selection, should clear data of non displayed field', /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {\n        var _this18 = this;\n\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                assert.expect(5);\n                Ember.run(function () {\n                  /*  'cfNorthStateUrbanCity' is a text field  */\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.0.type', 'text');\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.0.inputType', 'text-field');\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.0.defaultValue', '');\n                  /*  'cfNorthStateRuralCity' is a text field  */\n\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.1.type', 'text');\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.1.inputType', 'text-field');\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.fields.1.defaultValue', '');\n                  /*  'cfNorthState' now has field mappings with child fields  */\n\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.1.dependentIds.choice', []);\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.1.dependentIds.field', ['northern_state_urban_city_id']);\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.3.dependentIds.choice', []);\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.fields.0.getChoices.3.dependentIds.field', ['northern_state_rural_city_id']);\n                  Ember.set(_this18, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this18, 'defaultFieldModel.cfNorthState', 'punjab_id');\n                  Ember.set(_this18, 'defaultFieldModel.cfNorthStateUrbanCity', 'Amritsar');\n                });\n                _context20.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context20.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertModelStatus(assert, _this18, ['india_id', 'himachal_pradesh_id', undefined, '', ''], true);\n                }));\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      return function (_x20) {\n        return _ref21.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/dependent-selects/power-select-field/prevent-resetting-of-child-fields/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\"], function (_qunit, _emberQunit, _wait, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/dependent selects/power select field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          cfCountry: undefined,\n          cfNorthState: undefined,\n          cfSouthState: undefined,\n          cfNorthStateUrbanCity: undefined,\n          cfNorthStateRuralCity: undefined\n        },\n        customFieldModel: {\n          customField: {\n            cfCountry: undefined,\n            cfNorthState: undefined,\n            cfSouthState: undefined,\n            cfNorthStateUrbanCity: undefined,\n            cfNorthStateRuralCity: undefined\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'dropdown',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: false,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"punjab_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'power-select-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'id',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'dropdown',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'dropdown',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'dropdown',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'dropdown',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        },\n        customFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'dropdown',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: true,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"punjab_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'power-select-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'value',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'dropdown',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'dropdown',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'dropdown',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'power-select-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'dropdown',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'power-select-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        }\n      });\n    });\n\n    function assertFieldStatusBeforeClick(assert, testScope, fieldName, fieldLabel, valueInModel, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] label')['innerText'], fieldLabel, 'Label for \\'' + fieldName + '\\' field renders properly');\n    }\n\n    function assertFieldStatusAfterClick(assert, fieldName, fieldDomId, choiceValues) {\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option').length, choiceValues.length, 'All choices for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[0]['innerText'].trim(), choiceValues[0], 'First choice is \\'' + choiceValues[0] + '\\' for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('#' + fieldDomId + ' .ember-power-select-option')[1]['innerText'].trim(), choiceValues[1], 'Second choice is \\'' + choiceValues[1] + '\\' for \\'' + fieldName + '\\' field');\n    }\n\n    function assertFieldStatusAfterSelect(assert, testScope, fieldName, fieldChoiceSelected, valueInModel, fieldsCnt, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n      var fieldDom = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] .ember-power-select-selected-item');\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], fieldsCnt, 'All dependent selects for \\'' + fieldName + '\\' field renders properly');\n      if (Ember.isNone(fieldDom)) assert.equal(fieldDom, fieldChoiceSelected, 'No choice for \\'' + fieldName + '\\' field is selected now');else assert.equal(fieldDom['innerText'], fieldChoiceSelected, 'Choice \\'' + fieldChoiceSelected + '\\' for \\'' + fieldName + '\\' field is selected now');\n    }\n\n    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {\n      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';\n      var fieldNameIndex = 0;\n\n      for (var fieldName in Ember.get(testScope, model)) {\n        var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n        var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \\'' + valuesInModel[fieldNameIndex] + '\\' as value for \\'' + fieldName + '\\' field');\n        fieldNameIndex++;\n      }\n    }\n\n    (0, _qunit.test)('dependent-power-select-field (as default field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var formConfig, dependentSelectConfig, fieldId;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(42);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                _context.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'India', 'india_id', 3, true);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this, 'cfNorthState', 'North State', undefined, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this, 'cfNorthStateUrbanCity', 'Patiala', 'patiala_id', 5, true);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this, 'cfCountry', 'Country', 'india_id', true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _wait.default)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this, 'cfCountry', 'USA', 'usa_id', 4, true);\n                        assertModelStatus(assert, _this, ['usa_id', 'punjab_id', undefined, 'patiala_id', undefined], true);\n                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                      });\n                    });\n                  });\n                }));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : changing parent field value and checking whether the dependent field values are still persisting by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var formConfig, dependentSelectConfig, fieldId, usaObj, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(42);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context2.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context2.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'India', indiaObj, 3, true);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this2, 'cfNorthState', 'North State', undefined, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this2, 'cfNorthState', 'Punjab', punjabObj, 5, true);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this2, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this2, 'cfCountry', 'Country', indiaObj, true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _wait.default)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this2, 'cfCountry', 'USA', usaObj, 4, true);\n                        assertModelStatus(assert, _this2, [usaObj, punjabObj, undefined, patialaObj, undefined], true);\n                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                      });\n                    });\n                  });\n                }));\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var formConfig, dependentSelectConfig, fieldId;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(42);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                _context3.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context3.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'India', 'India', 3, false);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this3, 'cfNorthState', 'North State', undefined, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this3, 'cfNorthState', 'Punjab', 'Punjab', 5, false);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this3, 'cfNorthStateUrbanCity', 'Patiala', 'Patiala', 5, false);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this3, 'cfCountry', 'Country', 'India', false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _wait.default)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this3, 'cfCountry', 'USA', 'USA', 4, false);\n                        assertModelStatus(assert, _this3, ['USA', 'Punjab', undefined, 'Patiala', undefined], false);\n                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                      });\n                    });\n                  });\n                }));\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : changing parent field value and checking whether the dependent field values are still persisting by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this4 = this;\n\n        var formConfig, dependentSelectConfig, usaObj, indiaObj, punjabObj, patialaObj, fieldId;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(42);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context4.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', undefined, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context4.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'India', indiaObj, 3, false);\n                  var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                  assertFieldStatusBeforeClick(assert, _this4, 'cfNorthState', 'North State', undefined, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'));\n                  assertFieldStatusAfterClick(assert, 'cfNorthState', fieldId, ['Punjab', 'Himachal Pradesh']);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                  //  Press Enter\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatusAfterSelect(assert, _this4, 'cfNorthState', 'Punjab', punjabObj, 5, false);\n                    var fieldId1 = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                    assertFieldStatusBeforeClick(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'));\n                    assertFieldStatusAfterClick(assert, 'cfNorthStateUrbanCity', fieldId1, ['Amritsar', 'Patiala']);\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                    //  Press Key-down\n                    (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                    //  Press Enter\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatusAfterSelect(assert, _this4, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);\n                      var fieldId = (0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger')['attributes']['aria-owns']['value'];\n                      assertFieldStatusBeforeClick(assert, _this4, 'cfCountry', 'Country', indiaObj, false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'));\n                      assertFieldStatusAfterClick(assert, 'cfCountry', fieldId, ['USA', 'India']);\n                      assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 38); //  Press Key-down\n\n                      //  Press Key-down\n                      (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfCountry\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                      //  Press Enter\n                      return (0, _wait.default)().then(function () {\n                        assertFieldStatusAfterSelect(assert, _this4, 'cfCountry', 'USA', usaObj, 4, false);\n                        assertModelStatus(assert, _this4, [usaObj, punjabObj, undefined, patialaObj, undefined], false);\n                        formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                      });\n                    });\n                  });\n                }));\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this5 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(25);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');\n                });\n                _context5.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'india_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'india_id', 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'punjab_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'punjab_id', 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'mandi_id', 5, true);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 18:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : all fields renders properly in edit scenerio by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this6 = this;\n\n        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(25);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                Ember.run(function () {\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldModel.cfCountry', indiaObj);\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', punjabObj);\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', patialaObj);\n                });\n                _context6.next = 10;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 10:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, true);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, true);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, true);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this7 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(25);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');\n                });\n                _context7.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', 'India', false);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', 'India', 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', 'Punjab', false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', 'Punjab', 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', undefined, undefined, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', 'Mandi', 'Mandi', 5, false);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this8 = this;\n\n        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(25);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                Ember.run(function () {\n                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);\n                });\n                _context8.next = 10;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 10:\n                assertFieldStatusBeforeClick(assert, this, 'cfCountry', 'Country', indiaObj, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfCountry', 'India', indiaObj, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthState', 'North State', punjabObj, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthState', 'Punjab', punjabObj, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfSouthState', 'South State', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfSouthState', undefined, undefined, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateUrbanCity', 'Patiala', patialaObj, 5, false);\n                assertFieldStatusBeforeClick(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, false);\n                assertFieldStatusAfterSelect(assert, this, 'cfNorthStateRuralCity', undefined, undefined, 5, false);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 21:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this9 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(5);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this9, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this9, 'defaultFieldModel.cfNorthState', 'punjab_id');\n                  Ember.set(_this9, 'defaultFieldModel.cfNorthStateUrbanCity', 'Amritsar');\n                });\n                _context9.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'));\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context9.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertModelStatus(assert, _this9, ['india_id', 'himachal_pradesh_id', undefined, undefined, undefined], true);\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                }));\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this10 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(5);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this10, 'customFieldModel.customField.cfCountry', 'India');\n                  Ember.set(_this10, 'customFieldModel.customField.cfNorthState', 'Punjab');\n                  Ember.set(_this10, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');\n                });\n                _context10.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'));\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'), 40); //  Press Key-down\n\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"customField.cfNorthState\"] .ember-power-select-trigger'), 13); //  Press Enter\n\n                return _context10.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertModelStatus(assert, _this10, ['India', 'Himachal Pradesh', undefined, undefined, undefined], false);\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                }));\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/dependent-selects/radio-group/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, _wait, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  (0, _qunit.module)('Integration | Component | form fields/dependent selects/radio group', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          cfCountry: undefined,\n          cfNorthState: undefined,\n          cfSouthState: undefined,\n          cfNorthStateUrbanCity: undefined,\n          cfNorthStateRuralCity: undefined\n        },\n        customFieldModel: {\n          customField: {\n            cfCountry: undefined,\n            cfNorthState: undefined,\n            cfSouthState: undefined,\n            cfNorthStateUrbanCity: undefined,\n            cfNorthStateRuralCity: undefined\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'radio',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: false,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'radio-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'id',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'radio',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: [\"shimla_id\", \"solan_id\"]\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'radio',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'radio',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'radio',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        },\n        customFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'radio',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: true,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'radio-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'value',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'radio',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: [\"shimla_id\", \"solan_id\"]\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'radio',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'radio',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'radio',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        }\n      });\n    });\n\n    function assertFieldStatus(assert, testScope, fieldName, fieldLabel, valueInModel, choices, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] .control-label')['innerText'], fieldLabel, 'Label for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input').length, choices.length, 'All choices for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input')[0]['type'], 'radio', 'Choices are displayed as radio buttons for \\'' + fieldName + '\\' field');\n      var choicePos = 0;\n\n      var _iterator = _createForOfIteratorHelper(choices),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var choice = _step.value;\n          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] .radio-field label')[choicePos]['innerText'].trim(), choice, 'Choice ' + (choicePos + 1) + ' is \\'' + choice + '\\' for \\'' + fieldName + '\\' field');\n          choicePos++;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    function assertChoiceStatus(assert, fieldName, choiceValues, fieldsCnt, isDefault) {\n      var choicePos = 0;\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-group')['length'], fieldsCnt, 'All dependent selects for \\'' + fieldName + '\\' field renders properly');\n\n      var _iterator2 = _createForOfIteratorHelper(choiceValues),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var choice = _step2.value;\n          var checkboxStatus = choiceValues[choicePos] ? 'selected' : 'unselected';\n          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input')[choicePos]['checked'], choice, 'Choice ' + (choicePos + 1) + ' is \\'' + checkboxStatus + '\\' for \\'' + fieldName + '\\' field');\n          choicePos++;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {\n      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';\n      var fieldNameIndex = 0;\n\n      for (var fieldName in Ember.get(testScope, model)) {\n        var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n        var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \\'' + valuesInModel[fieldNameIndex] + '\\' as value for \\'' + fieldName + '\\' field');\n        fieldNameIndex++;\n      }\n    }\n\n    (0, _qunit.test)('dependent-radio-field (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(9);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(9);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(58);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assertFieldStatus(assert, _this, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assertFieldStatus(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);\n                    assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assertFieldStatus(assert, _this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, true);\n                      assertModelStatus(assert, _this, ['usa_id', undefined, undefined, undefined, undefined], true);\n                    });\n                  });\n                }));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this2 = this;\n\n        var usaObj, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(58);\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context4.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"t7ijM873\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);\n                return _context4.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatus(assert, _this2, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatus(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);\n                    assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatus(assert, _this2, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, true);\n                      assertModelStatus(assert, _this2, [usaObj, undefined, undefined, undefined, undefined], true);\n                    });\n                  });\n                }));\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(58);\n                _context5.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);\n                return _context5.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assertFieldStatus(assert, _this3, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assertFieldStatus(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);\n                    assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assertFieldStatus(assert, _this3, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, false);\n                      assertModelStatus(assert, _this3, ['USA', undefined, undefined, undefined, undefined], false);\n                    });\n                  });\n                }));\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this4 = this;\n\n        var usaObj, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(58);\n                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context6.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', null, ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);\n                return _context6.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatus(assert, _this4, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatus(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);\n                    assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatus(assert, _this4, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 2, false);\n                      assertModelStatus(assert, _this4, [usaObj, undefined, undefined, undefined, undefined], false);\n                    });\n                  });\n                }));\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(45);\n                Ember.run(function () {\n                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');\n                });\n                _context7.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'punjab_id', ['Punjab', 'Himachal Pradesh'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', ['Mandi', 'Ajdhar'], true);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, true);\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this6 = this;\n\n        var indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(45);\n                Ember.run(function () {\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldModel.cfCountry', Ember.get(_this6, 'defaultFieldSchema.fields.0.getChoices.1'));\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', Ember.get(_this6, 'defaultFieldSchema.fields.0.fields.0.getChoices.1'));\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', Ember.get(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1'));\n                });\n                _context8.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], true);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], true);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, true);\n\n              case 17:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(45);\n                Ember.run(function () {\n                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');\n                });\n                _context9.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'Punjab', ['Punjab', 'Himachal Pradesh'], false);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', ['Mandi', 'Ajdhar'], false);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, false);\n\n              case 14:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this8 = this;\n\n        var indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(45);\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                Ember.run(function () {\n                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);\n                });\n                _context10.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], false);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], false);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], false);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, false);\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field: allow dependency mapping with \\'None\\' choice', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(27);\n                Ember.run(function () {\n                  Ember.set(_this9, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');\n                });\n                _context11.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 3, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', undefined, ['New York', 'Punjab'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 3, true);\n\n              case 10:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : Required-fieldIds is honoured', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(20);\n                Ember.run(function () {\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.getChoices.1.dependentIds.field', ['north_state_id']);\n                  Ember.set(_this10, 'defaultFieldSchema.fields.0.getChoices.1.dependentIds.required_field', ['north_state_id']);\n                  Ember.set(_this10, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this10, 'defaultFieldModel.cfNorthState', 'new_york_id');\n                  Ember.set(_this10, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');\n                });\n                _context12.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State *', 'new_york_id', ['New York', 'Punjab', 'New Jersey', 'Himachal Pradesh'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 3, true);\n\n              case 8:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : Required-fieldIds is not honoured', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this11 = this;\n\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(20);\n                Ember.run(function () {\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices.1.dependentIds.field', ['north_state_id']);\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices.0.dependentIds.required_field', ['north_state_id']);\n                  Ember.set(_this11, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this11, 'defaultFieldModel.cfNorthState', 'new_york_id');\n                  Ember.set(_this11, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');\n                });\n                _context13.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'new_york_id', ['New York', 'Punjab', 'New Jersey', 'Himachal Pradesh'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 3, true);\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field: allow Required-fieldIds mapping with \\'None\\' choice', /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this12 = this;\n\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(20);\n                Ember.run(function () {\n                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions.dependent_choice_ids_for_none', 'punjab_id,tamilnadu_id,new_york_id,kerala_id');\n                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions.dependent_field_ids_for_none', 'north_state_id');\n                  Ember.set(_this12, 'defaultFieldSchema.fields.0.fieldOptions.dependent_required_field_ids_for_none', 'north_state_id');\n                });\n                _context14.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 3, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State *', undefined, ['New York', 'Punjab', 'New Jersey', 'Himachal Pradesh'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);\n\n              case 8:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/dependent-selects/radio-group/prevent-resetting-of-child-fields/component-test\", [\"qunit\", \"ember-qunit\", \"ember-test-helpers/wait\", \"ember-native-dom-helpers\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _wait, _emberNativeDomHelpers, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  (0, _qunit.module)('Integration | Component | form fields/dependent selects/radio group', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          cfCountry: undefined,\n          cfNorthState: undefined,\n          cfSouthState: undefined,\n          cfNorthStateUrbanCity: undefined,\n          cfNorthStateRuralCity: undefined\n        },\n        customFieldModel: {\n          customField: {\n            cfCountry: undefined,\n            cfNorthState: undefined,\n            cfSouthState: undefined,\n            cfNorthStateUrbanCity: undefined,\n            cfNorthStateRuralCity: undefined\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'radio',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: false,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"punjab_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'radio-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'id',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'radio',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: [\"shimla_id\", \"solan_id\"]\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'radio',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'radio',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: false,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'id',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'radio',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: false,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'id',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        },\n        customFieldSchema: {\n          name: 'Dependent Select Test Form',\n          description: 'A form designed to test the rendering of dependent select in formserv-addon.',\n          active: true,\n          fields: [{\n            id: \"country_id\",\n            name: \"cfCountry\",\n            label: \"Country\",\n            type: 'radio',\n            position: 1,\n            required: false,\n            editable: true,\n            custom: true,\n            getChoices: [{\n              id: \"usa_id\",\n              value: \"USA\",\n              position: 1,\n              dependentIds: {\n                choice: [\"new_york_id\", \"punjab_id\", \"new_jersey_id\"]\n              }\n            }, {\n              id: \"india_id\",\n              value: \"India\",\n              position: 2,\n              dependentIds: {\n                choice: [\"himachal_pradesh_id\", \"punjab_id\", \"tamilnadu_id\", \"kerala_id\"]\n              }\n            }],\n            inputType: 'radio-dependent-field',\n            fieldOptions: {\n              dependent: true\n            },\n            optionValuePath: 'value',\n            optionLabelPath: 'value',\n            fields: [{\n              id: \"north_state_id\",\n              name: \"cfNorthState\",\n              label: \"North State\",\n              type: 'radio',\n              position: 1,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"new_york_id\",\n                value: \"New York\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"punjab_id\",\n                value: \"Punjab\",\n                position: 2,\n                dependentIds: {\n                  choice: [\"amritsar_id\", \"chandigarh_id\", \"patiala_id\", \"ajdhar_id\", \"mandi_id\"]\n                }\n              }, {\n                id: \"new_jersey_id\",\n                value: \"New Jersey\",\n                position: 3,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"himachal_pradesh_id\",\n                value: \"Himachal Pradesh\",\n                position: 4,\n                dependentIds: {\n                  choice: [\"shimla_id\", \"solan_id\"]\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: [{\n                id: \"northern_state_urban_city_id\",\n                name: \"cfNorthStateUrbanCity\",\n                label: \"North State Urban City\",\n                type: 'radio',\n                position: 1,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"amritsar_id\",\n                  value: \"Amritsar\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"patiala_id\",\n                  value: \"Patiala\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }, {\n                id: \"northern_state_rural_city_id\",\n                name: \"cfNorthStateRuralCity\",\n                label: \"North State Rural City\",\n                type: 'radio',\n                position: 2,\n                required: false,\n                editable: true,\n                custom: true,\n                getChoices: [{\n                  id: \"mandi_id\",\n                  value: \"Mandi\",\n                  position: 1,\n                  dependentIds: {\n                    choice: []\n                  }\n                }, {\n                  id: \"ajdhar_id\",\n                  value: \"Ajdhar\",\n                  position: 2,\n                  dependentIds: {\n                    choice: []\n                  }\n                }],\n                inputType: 'radio-dependent-field',\n                fieldOptions: {\n                  dependent: true\n                },\n                optionValuePath: 'value',\n                optionLabelPath: 'value',\n                fields: []\n              }]\n            }, {\n              id: \"south_state_id\",\n              name: \"cfSouthState\",\n              label: \"South State\",\n              type: 'radio',\n              position: 2,\n              required: false,\n              editable: true,\n              custom: true,\n              getChoices: [{\n                id: \"tamilnadu_id\",\n                value: \"Tamil Nadu\",\n                position: 1,\n                dependentIds: {\n                  choice: []\n                }\n              }, {\n                id: \"kerala_id\",\n                value: \"Kerala\",\n                position: 2,\n                dependentIds: {\n                  choice: []\n                }\n              }],\n              inputType: 'radio-dependent-field',\n              fieldOptions: {\n                dependent: true\n              },\n              optionValuePath: 'value',\n              optionLabelPath: 'value',\n              fields: []\n            }]\n          }]\n        }\n      });\n    });\n\n    function assertFieldStatus(assert, testScope, fieldName, fieldLabel, valueInModel, choices, isDefault) {\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      var relativeName = isDefault ? 'defaultFieldModel.' + pathName : 'customFieldModel.' + pathName;\n      assert.equal(Ember.get(testScope, relativeName), valueInModel, 'Model contains \\'' + valueInModel + '\\' as value for \\'' + fieldName + '\\' field');\n      assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"' + pathName + '\"] .control-label')['innerText'], fieldLabel, 'Label for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input').length, choices.length, 'All choices for \\'' + fieldName + '\\' field renders properly');\n      assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input')[0]['type'], 'radio', 'Choices are displayed as radio buttons for \\'' + fieldName + '\\' field');\n      var choicePos = 0;\n\n      var _iterator = _createForOfIteratorHelper(choices),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var choice = _step.value;\n          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] .radio-field label')[choicePos]['innerText'].trim(), choice, 'Choice ' + (choicePos + 1) + ' is \\'' + choice + '\\' for \\'' + fieldName + '\\' field');\n          choicePos++;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    function assertChoiceStatus(assert, fieldName, choiceValues, fieldsCnt, isDefault) {\n      var choicePos = 0;\n      var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n      assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-group')['length'], fieldsCnt, 'All dependent selects for \\'' + fieldName + '\\' field renders properly');\n\n      var _iterator2 = _createForOfIteratorHelper(choiceValues),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var choice = _step2.value;\n          var checkboxStatus = choiceValues[choicePos] ? 'selected' : 'unselected';\n          assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"' + pathName + '\"] input')[choicePos]['checked'], choice, 'Choice ' + (choicePos + 1) + ' is \\'' + checkboxStatus + '\\' for \\'' + fieldName + '\\' field');\n          choicePos++;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    function assertModelStatus(assert, testScope, valuesInModel, isDefault) {\n      var model = isDefault ? 'defaultFieldModel' : 'customFieldModel.customField';\n      var fieldNameIndex = 0;\n\n      for (var fieldName in Ember.get(testScope, model)) {\n        var pathName = isDefault ? fieldName : 'customField.' + fieldName;\n        var relativeName = isDefault ? \"defaultFieldModel.\" + pathName : 'customFieldModel.' + pathName;\n        assert.equal(Ember.get(testScope, relativeName), valuesInModel[fieldNameIndex], 'Model contains \\'' + valuesInModel[fieldNameIndex] + '\\' as value for \\'' + fieldName + '\\' field');\n        fieldNameIndex++;\n      }\n    }\n\n    (0, _qunit.test)('dependent-radio-field (as default field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(58);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                _context.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);\n                return _context.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatus(assert, _this, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatus(assert, _this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);\n                    assertModelStatus(assert, _this, ['india_id', 'punjab_id', undefined, 'patiala_id', undefined], true);\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatus(assert, _this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, true);\n                      assertModelStatus(assert, _this, ['usa_id', 'punjab_id', undefined, 'patiala_id', undefined], true);\n                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                    });\n                  });\n                }));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : selecting or unselecting a choice of controlling field updates its dependent fields by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var formConfig, dependentSelectConfig, usaObj, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(58);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.set(this, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context2.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"t7ijM873\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                usaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', null, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, true);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, true);\n                return _context2.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatus(assert, _this2, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], true);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, true);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatus(assert, _this2, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);\n                    assertModelStatus(assert, _this2, [indiaObj, punjabObj, undefined, patialaObj, undefined], true);\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatus(assert, _this2, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, true);\n                      assertModelStatus(assert, _this2, [usaObj, punjabObj, undefined, patialaObj, undefined], true);\n                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                    });\n                  });\n                }));\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : changing parent field value and checking whether the dependent field values are still persisting', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(58);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                _context3.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', undefined, ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);\n                return _context3.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatus(assert, _this3, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatus(assert, _this3, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);\n                    assertModelStatus(assert, _this3, ['India', 'Punjab', undefined, 'Patiala', undefined], false);\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatus(assert, _this3, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, false);\n                      assertModelStatus(assert, _this3, ['USA', 'Punjab', undefined, 'Patiala', undefined], false);\n                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                    });\n                  });\n                }));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : selecting or unselecting a choice of controlling field updates its dependent fields', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this4 = this;\n\n        var formConfig, dependentSelectConfig, usaObj, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(58);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.set(this, 'customFieldSchema.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                Ember.set(this, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                _context4.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                usaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.0');\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', null, ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, false], 1, false);\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[1]);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 3, false);\n                return _context4.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertFieldStatus(assert, _this4, 'cfNorthState', 'North State', undefined, ['Punjab', 'Himachal Pradesh'], false);\n                  assertChoiceStatus(assert, 'cfNorthState', [false, false], 3, false);\n                  (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthState\"] input')[0]);\n                  assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                  return (0, _wait.default)().then(function () {\n                    assertFieldStatus(assert, _this4, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);\n                    (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthStateUrbanCity\"] input')[1]);\n                    assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);\n                    assertModelStatus(assert, _this4, [indiaObj, punjabObj, undefined, patialaObj, undefined], false);\n                    return (0, _wait.default)().then(function () {\n                      assertFieldStatus(assert, _this4, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);\n                      assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                      (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfCountry\"] input')[0]);\n                      assertChoiceStatus(assert, 'cfCountry', [true, false], 4, false);\n                      assertModelStatus(assert, _this4, [usaObj, punjabObj, undefined, patialaObj, undefined], false);\n                      formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                    });\n                  });\n                }));\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this5 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(45);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this5, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthState', 'punjab_id');\n                  Ember.set(_this5, 'defaultFieldModel.cfNorthStateRuralCity', 'mandi_id');\n                });\n                _context5.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'india_id', ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'punjab_id', ['Punjab', 'Himachal Pradesh'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], true);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'mandi_id', ['Mandi', 'Ajdhar'], true);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, true);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 18:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as default field) : all fields renders properly in edit scenerio by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this6 = this;\n\n        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(45);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                indiaObj = Ember.get(this, 'defaultFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'defaultFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                Ember.run(function () {\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this6, 'defaultFieldModel.cfCountry', indiaObj);\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthState', punjabObj);\n                  Ember.set(_this6, 'defaultFieldModel.cfNorthStateUrbanCity', patialaObj);\n                });\n                _context6.next = 10;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 10:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], true);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], true);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, true);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], true);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], true);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, true);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], true);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, true);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this7 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(45);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this7, 'customFieldModel.customField.cfCountry', 'India');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthState', 'Punjab');\n                  Ember.set(_this7, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');\n                });\n                _context7.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', 'India', ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', 'Punjab', ['Punjab', 'Himachal Pradesh'], false);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', undefined, ['Amritsar', 'Patiala'], false);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, false], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', 'Mandi', ['Mandi', 'Ajdhar'], false);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [true, false], 5, false);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-radio-field (as custom field) : all fields renders properly in edit scenerio by keeping optionValuePath as \\'\\'', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this8 = this;\n\n        var formConfig, dependentSelectConfig, indiaObj, punjabObj, patialaObj;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(45);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                indiaObj = Ember.get(this, 'customFieldSchema.fields.0.getChoices.1');\n                punjabObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.getChoices.1');\n                patialaObj = Ember.get(this, 'customFieldSchema.fields.0.fields.0.fields.0.getChoices.1');\n                Ember.run(function () {\n                  Ember.set(_this8, 'customFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldSchema.fields.0.fields.0.fields.0.optionValuePath', '');\n                  Ember.set(_this8, 'customFieldModel.customField.cfCountry', indiaObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthState', punjabObj);\n                  Ember.set(_this8, 'customFieldModel.customField.cfNorthStateUrbanCity', patialaObj);\n                });\n                _context8.next = 10;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 10:\n                assertFieldStatus(assert, this, 'cfCountry', 'Country', indiaObj, ['USA', 'India'], false);\n                assertChoiceStatus(assert, 'cfCountry', [false, true], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthState', 'North State', punjabObj, ['Punjab', 'Himachal Pradesh'], false);\n                assertChoiceStatus(assert, 'cfNorthState', [true, false], 5, false);\n                assertFieldStatus(assert, this, 'cfSouthState', 'South State', undefined, ['Tamil Nadu', 'Kerala'], false);\n                assertChoiceStatus(assert, 'cfSouthState', [false, false], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateUrbanCity', 'North State Urban City', patialaObj, ['Amritsar', 'Patiala'], false);\n                assertChoiceStatus(assert, 'cfNorthStateUrbanCity', [false, true], 5, false);\n                assertFieldStatus(assert, this, 'cfNorthStateRuralCity', 'North State Rural City', undefined, ['Mandi', 'Ajdhar'], false);\n                assertChoiceStatus(assert, 'cfNorthStateRuralCity', [false, false], 5, false);\n                formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n\n              case 21:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as default field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var _this9 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(5);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this9, 'defaultFieldModel.cfCountry', 'india_id');\n                  Ember.set(_this9, 'defaultFieldModel.cfNorthState', 'punjab_id');\n                  Ember.set(_this9, 'defaultFieldModel.cfNorthStateUrbanCity', 'Amritsar');\n                });\n                _context9.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"cfNorthState\"] input')[1]);\n                return _context9.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertModelStatus(assert, _this9, ['india_id', 'himachal_pradesh_id', undefined, undefined, undefined], true);\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                }));\n\n              case 9:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('dependent-power-select-field (as custom field) : Toggling between child fields, based on choice selection, should clear data when same child choice is not present in current state', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this10 = this;\n\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(5);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    resetChildFields: false,\n                    choiceMappingAttr: 'id'\n                  });\n                });\n                Ember.run(function () {\n                  Ember.set(_this10, 'customFieldModel.customField.cfCountry', 'India');\n                  Ember.set(_this10, 'customFieldModel.customField.cfNorthState', 'Punjab');\n                  Ember.set(_this10, 'customFieldModel.customField.cfNorthStateRuralCity', 'Mandi');\n                });\n                _context10.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.cfNorthState\"] input')[1]);\n                return _context10.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assertModelStatus(assert, _this10, ['India', 'Himachal Pradesh', undefined, undefined, undefined], false);\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                }));\n\n              case 9:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/email-field/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _createField, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/email field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"Check the email component renders hint as default field\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.email(this);\n\n                _context.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check the email component renders hint as custom field', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n\n                _createField.default.email(this, {\n                  custom: true\n                });\n\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the email component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"française\";\n\n                _createField.default.email(this, {\n                  label: sampleLabel\n                });\n\n                _context3.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check if the email component follows accessibility features related to required attribute', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var inputElement;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n\n                _createField.default.email(this, {\n                  required: true\n                });\n\n                _context4.next = 4;\n                return _createField.default.renderForm(this);\n\n              case 4:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];\n                assert.equal(true, inputElement[\"required\"]);\n                assert.equal(null, inputElement[\"ariaRequired\"]);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/checkbox-field/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field/checkbox field | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n                this.schema.fields[0].custom = true;\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context3.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return (0, _emberNativeDomHelpers.click)(inputs[0]);\n\n                        case 2:\n                          assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Formula field NOT updated\");\n                          assert.notOk(_this.model.customField.drive, \"Check property 'drive' is set to false on the model\");\n                          _context2.next = 6;\n                          return (0, _emberNativeDomHelpers.click)(inputs[1]);\n\n                        case 6:\n                          return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                            return regeneratorRuntime.wrap(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                    assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Formula field is updated\");\n                                    assert.ok(_this.model.customField.drive, \"Check value 'true' is updated on the model\");\n                                    _context.next = 4;\n                                    return (0, _emberNativeDomHelpers.click)(inputs[0]);\n\n                                  case 4:\n                                    assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Formula field is updated\");\n                                    assert.notOk(_this.model.customField.drive, \"Check value 'false' is updated on the model\");\n\n                                  case 6:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, _callee);\n                          }))));\n\n                        case 7:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated when controlling field changes, formula-field custom', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                _context4.next = 9;\n                return (0, _emberNativeDomHelpers.click)(inputs[0]);\n\n              case 9:\n                assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Formula field NOT updated\");\n                assert.notOk(this.model.customField.drive, \"Check property 'drive' is set to false on the model\");\n                _context4.next = 13;\n                return (0, _emberNativeDomHelpers.click)(inputs[1]);\n\n              case 13:\n                assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Formula field is updated\");\n                assert.ok(this.model.customField.drive, \"Check value 'true' is updated on the model\");\n                _context4.next = 17;\n                return (0, _emberNativeDomHelpers.click)(inputs[0]);\n\n              case 17:\n                assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Formula field is updated\");\n                assert.notOk(this.model.customField.drive, \"Check value 'false' is updated on the model\");\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated when controlling field changes, formula-field and 1 input custom', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context5.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                _context5.next = 10;\n                return (0, _emberNativeDomHelpers.click)(inputs[0]);\n\n              case 10:\n                assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Formula field NOT updated\");\n                assert.notOk(this.model.customField.drive, \"Check property 'drive' is set to false on the model\");\n                _context5.next = 14;\n                return (0, _emberNativeDomHelpers.click)(inputs[1]);\n\n              case 14:\n                assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Formula field is updated\");\n                assert.ok(this.model.customField.drive, \"Check value 'true' is updated on the model\");\n                _context5.next = 18;\n                return (0, _emberNativeDomHelpers.click)(inputs[0]);\n\n              case 18:\n                assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Formula field is updated\");\n                assert.notOk(this.model.customField.drive, \"Check value 'false' is updated on the model\");\n\n              case 20:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/checkbox-field/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | checkbox-field | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                _context.next = 3;\n                return (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n\n              case 3:\n                this.schema.fields[0].custom = true;\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {\n                    age: true,\n                    licence: true\n                  }\n                };\n                _context.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Formula field is updated\");\n                  assert.ok(_this.model.customField.drive, \"property 'drive' is set as true in model\");\n                }));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated when controlling field changes, formula-field custom', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  age: true,\n                  licence: true,\n                  customField: {}\n                };\n                _context2.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Formula field is updated\");\n                  assert.ok(_this2.model.customField.drive, \"property 'drive' is set as true in model\");\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated when controlling field changes, formula-field and 1 input custom', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  age: true,\n                  customField: {\n                    licence: true\n                  }\n                };\n                _context3.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Formula field is updated\");\n                  assert.ok(_this3.model.customField.drive, \"property 'drive' is set as true in model\");\n                }));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/checkbox-field/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | checkbox-field | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.click)(inputs[0]);\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Check formula is NOT updated\");\n                  assert.notOk(_this.model.drive, \"property 'drive' is set to 'false' on the model\");\n                  (0, _emberNativeDomHelpers.click)(inputs[1]);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Check formula is updated\");\n                    assert.ok(_this.model.drive, \"value 'true' is updated in model\");\n                    (0, _emberNativeDomHelpers.click)(inputs[0]);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].hasAttribute('paramchecked'), false, \"Check formula is updated\");\n                      assert.notOk(_this.model.drive, \"value 'false' is updated in model\");\n                    });\n                  });\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/checkbox-field/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | checkbox-field | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                (0, _createFormulaField.createFormulaField)(this, 'checkbox-field');\n                this.model = {\n                  age: true,\n                  licence: true\n                };\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].hasAttribute('paramchecked'), true, \"Check formula field 'drive' is updated as 'true'\");\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/class-name-bindings/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | class-name-bindings', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"#TEST1 check css class 'expression-eval-failed' is attached to formula-field when evaluation failed\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[2].fieldOptions.expr = \"#{revenue_from_product_a}/#{revenue_from_product_b}\";\n                this.model = {};\n                _context3.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                _context3.next = 9;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 100);\n\n              case 9:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return (0, _emberNativeDomHelpers.fillIn)(inputs[1], 0);\n\n                        case 2:\n                          return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                            return regeneratorRuntime.wrap(function _callee$(_context) {\n                              while (1) {\n                                switch (_context.prev = _context.next) {\n                                  case 0:\n                                    assert.ok((0, _emberNativeDomHelpers.find)('.expression-eval-failed'), \"check class name 'expression-eval-failed' is bound to formula-field\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }\n                            }, _callee);\n                          }))));\n\n                        case 3:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 check css class 'expression-eval-failed' is removed when a subsequent evaluation is success\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[2].fieldOptions.expr = \"#{revenue_from_product_a}/#{revenue_from_product_b}\";\n                this.model = {};\n                _context7.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                _context7.next = 9;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 800);\n\n              case 9:\n                return _context7.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                  return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _context6.next = 2;\n                          return (0, _emberNativeDomHelpers.fillIn)(inputs[1], 0);\n\n                        case 2:\n                          assert.ok((0, _emberNativeDomHelpers.find)('.expression-eval-failed'), \"check class name 'expression-eval-failed' is bound to the formula-field\");\n                          return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                            return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                              while (1) {\n                                switch (_context5.prev = _context5.next) {\n                                  case 0:\n                                    _context5.next = 2;\n                                    return (0, _emberNativeDomHelpers.fillIn)(inputs[1], 2);\n\n                                  case 2:\n                                    return _context5.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                                      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                                        while (1) {\n                                          switch (_context4.prev = _context4.next) {\n                                            case 0:\n                                              assert.notOk((0, _emberNativeDomHelpers.find)('.expression-eval-failed'), \"check class name 'expression-eval-failed' is removed from the formula-field\");\n\n                                            case 1:\n                                            case \"end\":\n                                              return _context4.stop();\n                                          }\n                                        }\n                                      }, _callee4);\n                                    }))));\n\n                                  case 3:\n                                  case \"end\":\n                                    return _context5.stop();\n                                }\n                              }\n                            }, _callee5);\n                          }))));\n\n                        case 4:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 check css class 'expression-eval-in-progress' is attached to the element when evaluation is in progress\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[2].fieldOptions.expr = \"#{revenue_from_product_a}/#{revenue_from_product_b}\";\n                this.model = {};\n                _context10.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                _context10.next = 9;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 800);\n\n              case 9:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          (0, _emberNativeDomHelpers.fillIn)(inputs[1], 4);\n                          assert.ok((0, _emberNativeDomHelpers.find)('.expression-eval-in-progress'), \"check class name 'expression-eval-in-progress' is bound to the formula-field\");\n                          return _context9.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                            return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                              while (1) {\n                                switch (_context8.prev = _context8.next) {\n                                  case 0:\n                                    assert.notOk((0, _emberNativeDomHelpers.find)('.expression-eval-in-progress'), \"check class name 'expression-eval-in-progress' removed from the formula-field\");\n\n                                  case 1:\n                                  case \"end\":\n                                    return _context8.stop();\n                                }\n                              }\n                            }, _callee8);\n                          }))));\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x3) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/fieldOptions/evalservRequestHeaders/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\", \"ember-cli-fake-server\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField, _emberCliFakeServer) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | fieldOptions | evalservRequestHeaders', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)(\"#TEST1 formula field: Should send http request to server with specified header options\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var dynamicFormConfig, url, inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(5);\n                dynamicFormConfig = this.owner.lookup('service:dynamic-form/config');\n                url = Ember.get(dynamicFormConfig, 'formulaDefaultConfig.evalservUrl');\n                (0, _emberCliFakeServer.stubRequest)('post', url, function (request) {\n                  assert.equal(request.url, url, 'received a request for formserv url');\n                  assert.equal(request.requestHeaders[\"Access-Control-Allow-Origin\"], \"https://foo.bar.org\", \"'Access-Control-Allow-Origin' is present\");\n                  assert.equal(request.requestHeaders[\"Access-Control-Max-Age\"], 86400, \"'Access-Control-Max-Age' is present\");\n                  request.ok({\n                    result: \"Bruce Wayne\"\n                  });\n                });\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[2].fieldOptions.evalserv_request_headers = {\n                  \"Access-Control-Allow-Origin\": 'https://foo.bar.org',\n                  \"Access-Control-Max-Age\": 86400\n                };\n                this.model = {};\n                _context.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"Bruce \");\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], \"Wayne\");\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('input')[2].value, \"Bruce Wayne\", \"formula field should get updated\");\n                  assert.equal(_this.model.fullName, \"Bruce Wayne\", \"model should get updated\");\n                }));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/fieldOptions/evaluateOnOperandDataUpdate/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | fieldOptions | evaluateOnOperandDataUpdate', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)(\"#TEST1 formula field: Should not evaluate expression when 'evaluateOnOperandDataUpdate' is set to false\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[2].fieldOptions.evaluate_on_operand_data_update = false;\n                this.model = {};\n                _context.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"Bruce \");\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], \"Wayne\");\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('input')[2].value, \"\", \"formula field should not get updated\");\n                  assert.equal(_this.model.fullName, undefined, \"model should not get updated\");\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 formula field: Should evaluate expression when 'evaluateOnOperandDataUpdate' is set to true\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[2].fieldOptions.evaluate_on_operand_data_update = true;\n                this.model = {};\n                _context2.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"Bruce \");\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], \"Wayne\");\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)('input')[2].value, \"Bruce Wayne\", \"formula field should get updated\");\n                  assert.equal(_this2.model.fullName, \"Bruce Wayne\", \"model should get updated\");\n                }));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/number-field/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[0].custom = true;\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 100);\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 200);\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 300, \"Check formula field gets expected value\");\n                  assert.equal(_this.model.customField.total_revenue, 300, \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 101);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, 301, \"Check formula field gets new updated value\");\n                    assert.equal(_this.model.customField.total_revenue, 301, \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 400);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, 501, \"Check formula field gets new updated value\");\n                      assert.equal(_this.model.customField.total_revenue, 501, \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated when controlling field changes, formula-field custom', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 11);\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 22);\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 33, \"Check formula field gets expected value\");\n                  assert.equal(_this2.model.customField.total_revenue, 33, \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 10);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, 32, \"Check formula field gets new updated value\");\n                    assert.equal(_this2.model.customField.total_revenue, 32, \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 400);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, 410, \"Check formula field gets new updated value\");\n                      assert.equal(_this2.model.customField.total_revenue, 410, \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated when controlling field changes, formula-field and 1 input custom', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context3.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 1200);\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 800);\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 2000, \"Check formula field gets expected value\");\n                  assert.equal(_this3.model.customField.total_revenue, 2000, \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 1);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, 801, \"Check formula field gets new updated value\");\n                    assert.equal(_this3.model.customField.total_revenue, 801, \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 12);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, 13, \"Check formula field gets new updated value\");\n                      assert.equal(_this3.model.customField.total_revenue, 13, \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST4 formula field: Check if formula-field gets created when expression has no controlling fields', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this4 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.schema.fields[2].fieldOptions.expr = \"2000+3000\";\n                this.schema.fields[2].fieldOptions.expression_field_ids = null;\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 5000, \"Check formula field gets expected value\");\n                  assert.equal(_this4.model.customField.total_revenue, 5000, \"Check value is updated on the model\");\n                }));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/number-field/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value, all fields custom', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[0].custom = true;\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {\n                    revenue_from_product_a: 60,\n                    revenue_from_product_b: 70\n                  }\n                };\n                _context.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 130, \"Check formula field gets expected value\");\n                  assert.equal(_this.model.customField.total_revenue, 130, \"Check value is updated on the model\");\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated with previously loaded value, only formula field custom', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {},\n                  revenueFromProductA: 12,\n                  revenueFromProductB: 13\n                };\n                _context2.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 25, \"Check formula field gets expected value\");\n                  assert.equal(_this2.model.customField.total_revenue, 25, \"Check value is updated on the model\");\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated with previously loaded value, formula field and 1 input custom', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.schema.fields[0].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {\n                    revenue_from_product_a: 30\n                  },\n                  revenueFromProductB: 50\n                };\n                _context3.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 80, \"Check formula field gets expected value\");\n                  assert.equal(_this3.model.customField.total_revenue, 80, \"Check value is updated on the model\");\n                }));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/number-field/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], 100);\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], 200);\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 300, \"Check formula field gets expected value\");\n                  assert.equal(_this.model.totalRevenue, 300, \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 101);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, 301, \"Check formula field gets new updated value\");\n                    assert.equal(_this.model.totalRevenue, 301, \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], 400);\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, 501, \"Check formula field gets new updated value\");\n                      assert.equal(_this.model.totalRevenue, 501, \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/number-field/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | number-field | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'number-field');\n                this.model = {\n                  revenueFromProductA: 12,\n                  revenueFromProductB: 13\n                };\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, 25, \"Check formula field gets expected value\");\n                  assert.equal(_this.model.totalRevenue, 25, \"Check value is updated on the model\");\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\", \"dummy/tests/helpers/ember-power-select\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField, _emberPowerSelect) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | power-select-field| default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                (0, _createFormulaField.createFormulaField)(this, 'power-select-field');\n                this.model = {};\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"country\"]');\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"country\"] .ember-power-select-trigger')[0], 13);\n                (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"state\"]');\n                (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"state\"] .ember-power-select-trigger')[0], 13);\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[0].value, \"INDIA KERALA\", \"Check value 'INDIA KERALA' is updated in text field\");\n                  assert.strictEqual(_this.model.address, \"INDIA KERALA\", \"Check value 'INDIA KERALA' is updated on the model\");\n                  (0, _emberPowerSelect.clickTrigger)('[data-test-field-name=\"state\"]');\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"state\"] .ember-power-select-trigger')[0], 40);\n                  (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"state\"] .ember-power-select-trigger')[0], 13);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[0].value, \"INDIA TAMIL NADU\", \"Check value 'INDIA TAMIL NADU' is updated in text field\");\n                    assert.strictEqual(_this.model.address, \"INDIA TAMIL NADU\", \"Check value 'INDIA TAMIL NADU' is updated on the model\");\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | power-select-field | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'power-select-field');\n                this.model = {\n                  country: {\n                    id: \"india_id\",\n                    value: \"INDIA\",\n                    position: 1,\n                    parentChoiceIds: null\n                  },\n                  state: \"TAMIL NADU\"\n                };\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[0].value, \"INDIA TAMIL NADU\", \"Check value 'INDIA TAMIL NADU' is updated in text field\");\n                  assert.strictEqual(_this.model.address, \"INDIA TAMIL NADU\", \"Check value 'INDIA TAMIL NADU' is updated on the model\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/selectable-fields/radio-field/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | radio-field| default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                (0, _createFormulaField.createFormulaField)(this, 'radio-field');\n                this.model = {};\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.click)(inputs[0]);\n                (0, _emberNativeDomHelpers.click)(inputs[2]);\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[4].hasAttribute('paramvalue'), true, \"Check value 'true' is checked\");\n                  assert.strictEqual(_this.model.drive, true, \"Check value 'true' is updated on the model\");\n                  (0, _emberNativeDomHelpers.click)(inputs[1]);\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[5].hasAttribute('paramvalue'), false, \"Check value 'false' is checked\");\n                    assert.strictEqual(_this.model.drive, false, \"Check value 'false' is updated on the model\");\n                  });\n                }));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/selectable-fields/radio-field/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | selectable-fields | radio-field| default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'radio-field');\n                this.model = {\n                  licence: {\n                    id: \"can_drive_id\",\n                    parentChoiceIds: null,\n                    position: 1,\n                    value: \"Yes\"\n                  },\n                  age: \"No\"\n                };\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.strictEqual((0, _emberNativeDomHelpers.findAll)('input')[4].hasAttribute('paramvalue'), false, \"Check value 'false' is checked\");\n                  assert.strictEqual(_this.model.drive, false, \"Check value 'false' is checked\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/text-field/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes, all fields custom', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[0].custom = true;\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"John\");\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Doe\");\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Doe\", \"Check formula field gets expected value\");\n                  assert.equal(_this.model.customField.full_name, \"John Doe\", \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"Mark\");\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, \"Mark Doe\", \"Check formula field gets new updated value\");\n                    assert.equal(_this.model.customField.full_name, \"Mark Doe\", \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Wayne\");\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, \"Mark Wayne\", \"Check formula field gets new updated value\");\n                      assert.equal(_this.model.customField.full_name, \"Mark Wayne\", \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated with previously loaded value, only formula field custom', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"John\");\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Doe\");\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Doe\", \"Check formula field gets expected value\");\n                  assert.equal(_this2.model.customField.full_name, \"John Doe\", \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"Mark\");\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, \"Mark Doe\", \"Check formula field gets new updated value\");\n                    assert.equal(_this2.model.customField.full_name, \"Mark Doe\", \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Wayne\");\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, \"Mark Wayne\", \"Check formula field gets new updated value\");\n                      assert.equal(_this2.model.customField.full_name, \"Mark Wayne\", \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated with previously loaded value, formula field and 1 input custom', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {}\n                };\n                _context3.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"John\");\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Doe\");\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Doe\", \"Check formula field gets expected value\");\n                  assert.equal(_this3.model.customField.full_name, \"John Doe\", \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"Mark\");\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, \"Mark Doe\", \"Check formula field gets new updated value\");\n                    assert.equal(_this3.model.customField.full_name, \"Mark Doe\", \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Wayne\");\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, \"Mark Wayne\", \"Check formula field gets new updated value\");\n                      assert.equal(_this3.model.customField.full_name, \"Mark Wayne\", \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/text-field/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value, all fields custom', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[0].custom = true;\n                this.schema.fields[1].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {\n                    first_name: \"John\",\n                    last_name: \" Doe\"\n                  }\n                };\n                _context.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 8:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Doe\", \"Check formula field gets expected value\");\n                  assert.equal(_this.model.customField.full_name, \"John Doe\", \"Check value is updated on the model\");\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 formula field: Check if formula-field gets updated with previously loaded value, only formula field custom', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {},\n                  firstName: \"John\",\n                  lastName: \" Doe\"\n                };\n                _context2.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Doe\", \"Check formula field gets expected value\");\n                  assert.equal(_this2.model.customField.full_name, \"John Doe\", \"Check value is updated on the model\");\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 formula field: Check if formula-field gets updated with previously loaded value, formula field and 1 input custom', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.schema.fields[0].custom = true;\n                this.schema.fields[2].custom = true;\n                this.model = {\n                  customField: {\n                    first_name: \"John\"\n                  },\n                  lastName: \" Doe\"\n                };\n                _context3.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Doe\", \"Check formula field gets expected value\");\n                  assert.equal(_this3.model.customField.full_name, \"John Doe\", \"Check value is updated on the model\");\n                }));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/text-field/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated when controlling field changes', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"John\");\n                (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Doe\");\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Doe\", \"Check formula field gets expected value\");\n                  assert.equal(_this.model.fullName, \"John Doe\", \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], \"Mark\");\n                  return (0, _testHelpers.settled)().then(function () {\n                    assert.equal(inputs[2].value, \"Mark Doe\", \"Check formula field gets new updated value\");\n                    assert.equal(_this.model.fullName, \"Mark Doe\", \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[1], \" Wayne\");\n                    return (0, _testHelpers.settled)().then(function () {\n                      assert.equal(inputs[2].value, \"Mark Wayne\", \"Check formula field gets new updated value\");\n                      assert.equal(_this.model.fullName, \"Mark Wayne\", \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/formula-field/text-field/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-formula-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _createFormulaField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/formula field | text-field | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 formula field: Check if formula-field gets updated with previously loaded value', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(2);\n                (0, _createFormulaField.createFormulaField)(this, 'text-field');\n                this.model = {\n                  firstName: \"John\",\n                  lastName: \" Wick\"\n                };\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Ou6csUKL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal(inputs[2].value, \"John Wick\", \"Check formula field gets expected value\");\n                  assert.equal(_this.model.fullName, \"John Wick\", \"Check value is updated on the model\");\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/group-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/string-helper-methods\", \"dummy/tests/helpers/create-field\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/group field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    Ember.setProperties(this, {\n      defaultModel: {},\n      customModel: {},\n      defaultSchema: {\n        name: 'Some Form',\n        fields: [{\n          id: 'my_emails_id',\n          parent: null,\n          type: 'group_field',\n          label: 'My Emails',\n          hint: 'personal_email',\n          name: 'my_emails',\n          position: 1,\n          editable: true,\n          custom: false,\n          inputType: 'group-field',\n          placeholder: 'Email Address',\n          fieldOptions: {\n            group_type: 'email',\n            max_items: 2\n          },\n          fields: []\n        }]\n      },\n      customSchema: {\n        name: 'Some Form',\n        fields: [{\n          id: 'my_emails_id',\n          parent: null,\n          type: 'group_field',\n          label: 'My Emails',\n          hint: 'personal_email',\n          name: 'my_emails',\n          position: 1,\n          editable: true,\n          custom: true,\n          inputType: 'group-field',\n          placeholder: '',\n          fieldOptions: {\n            group_type: 'email',\n            max_items: 2\n          },\n          fields: []\n        }]\n      },\n      groupFieldAsADependentFieldSchema: {\n        name: 'Some Form',\n        fields: [{\n          id: 'has_email_id',\n          parent: null,\n          type: 'dropdown',\n          label: 'Has Email',\n          name: 'has_email',\n          position: 1,\n          editable: true,\n          custom: false,\n          inputType: 'power-select-dependent-field',\n          placeholder: '',\n          fieldOptions: {\n            dependent: true\n          },\n          getChoices: [{\n            id: \"yes_id\",\n            name: \"Yes\",\n            position: 1,\n            dependentIds: {\n              field: [\"my_emails_id\"],\n              choice: []\n            }\n          }, {\n            id: \"no_id\",\n            name: \"No\",\n            position: 2,\n            dependentIds: {\n              field: [],\n              choice: []\n            }\n          }],\n          fields: [{\n            id: 'my_emails_id',\n            parent: null,\n            type: 'group_field',\n            label: 'My Emails',\n            name: 'my_emails',\n            position: 1,\n            editable: true,\n            custom: false,\n            inputType: 'group-field',\n            placeholder: '',\n            fieldOptions: {\n              group_type: 'email',\n              max_items: 2,\n              dependent: true\n            },\n            fields: []\n          }],\n          optionValuePath: 'id',\n          optionLabelPath: 'name'\n        }]\n      },\n      fieldMap: Ember.computed({\n        get: function get() {\n          return {\n            section: {\n              single: 'nested-section',\n              dependent: 'nested-section'\n            },\n            dropdown: {\n              single: 'power-select-field',\n              dependent: 'power-select-dependent-field'\n            },\n            dependent_dropdown: {\n              single: 'dependent-dropdown',\n              dependent: 'dependent-dropdown'\n            },\n            text: {\n              single: 'text-field',\n              dependent: 'text-field'\n            },\n            checkbox: {\n              single: 'checkbox-field',\n              dependent: 'checkbox-dependent-field'\n            },\n            number: {\n              single: 'number-field',\n              dependent: 'number-field'\n            },\n            paragraph: {\n              single: 'textarea-field',\n              dependent: 'textarea-field'\n            },\n            radio: {\n              single: 'radio-field',\n              dependent: 'radio-dependent-field'\n            },\n            date: {\n              single: 'datetime-field',\n              dependent: 'datetime-field'\n            },\n            date_time: {\n              single: 'datetime-field',\n              dependent: 'datetime-field'\n            },\n            auto_complete: {\n              single: 'auto-complete',\n              dependent: 'auto-complete'\n            },\n            email: {\n              single: 'email-field',\n              dependent: 'email-field'\n            },\n            phone_number: {\n              single: 'text-field',\n              dependent: 'text-field'\n            },\n            url: {\n              single: 'url-field',\n              dependent: 'url-field'\n            },\n            decimal: {\n              single: 'number-field',\n              dependent: 'number-field'\n            },\n            multi_select_dropdown: {\n              single: 'multi-select-dropdown-field',\n              dependent: 'multi-select-dropdown-field'\n            },\n            date_time_split: {\n              single: 'date-time-split-field',\n              dependent: 'date-time-split-field'\n            },\n            group_field: {\n              single: 'group-field',\n              dependent: 'group-field'\n            }\n          };\n        }\n      }).readOnly()\n    });\n    (0, _qunit.test)('group-field (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(5);\n                Ember.setProperties(this, {\n                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),\n                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)\n                });\n                Ember.set(this, 'defaultFieldModel', {\n                  myEmails: Ember.A([])\n                });\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'The \\'Add more...\\' button renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');\n                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('myEmails_hint'), 'Hint id for the hint component gets populated properly');\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Render custom hint component for group-field', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                this.owner.register('component:custom-tooltip', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"wpQ1P2uR\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"my_tooltip\\\"],[7],[0,\\\"This_is_custom_tooltip\\\"],[8]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                Ember.setProperties(this, {\n                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),\n                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true),\n                  fieldNameToHintComponentMap: {\n                    my_emails: 'custom-tooltip'\n                  }\n                });\n                Ember.set(this, 'defaultFieldModel', {\n                  myEmails: Ember.A([])\n                });\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context2.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"G8ajctLL\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldNameToHintComponentMap\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]],[20,[\\\"fieldNameToHintComponentMap\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Custom hint for field renders properly');\n                Ember.run(function () {\n                  _this.owner.unregister('component:custom-tooltip');\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field (as default field) : Check if the placeholder gets rendered for all fields', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(4);\n                Ember.setProperties(this, {\n                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),\n                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)\n                });\n                Ember.set(this, 'defaultFieldModel', {\n                  myEmails: Ember.A([])\n                });\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldOptions.max_items', 4);\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context3.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[0]['placeholder'], 'Email Address');\n                _context3.next = 10;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));\n\n              case 10:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[1]['placeholder'], 'Email Address');\n                _context3.next = 13;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));\n\n              case 13:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[2]['placeholder'], 'Email Address');\n                _context3.next = 16;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));\n\n              case 16:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('input[type=email]')[3]['placeholder'], 'Email Address');\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(5);\n                Ember.setProperties(this, {\n                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),\n                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)\n                });\n                Ember.set(this, 'customFieldModel', {\n                  customField: {\n                    my_emails: Ember.A([])\n                  }\n                });\n                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context4.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'The \\'Add more...\\' button renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?personal_email', 'Hint for the field renders properly');\n                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('customField.my_emails_hint'), 'Hint id for the hint component gets populated properly');\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field (as default field) : Clicking \\'Add more...\\' button allows user to add more group field items', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(5);\n                Ember.setProperties(this, {\n                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),\n                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)\n                });\n                Ember.set(this, 'defaultFieldModel', {\n                  myEmails: Ember.A([])\n                });\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context5.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User is allowed to add more items, if needed');\n                _context5.next = 11;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));\n\n              case 11:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 2, 'Two items are currently shown in group field');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field (as custom field) : Clicking \\'Add more...\\' button allows user to add more group field items', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(5);\n                Ember.setProperties(this, {\n                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),\n                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)\n                });\n                Ember.set(this, 'customFieldModel', {\n                  customField: {\n                    my_emails: Ember.A([])\n                  }\n                });\n                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context6.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'My Emails', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 1, 'An item is shown initially');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User is allowed to add more items, if needed');\n                _context6.next = 11;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));\n\n              case 11:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.controls-container')['length'], 2, 'Two items are currently shown in group field');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field (as default field) : User is able to add items and mark one such item as primary', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(6);\n                Ember.setProperties(this, {\n                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),\n                  defaultFieldSchema: Ember.copy(Ember.get(this, 'defaultSchema'), true)\n                });\n                Ember.set(this, 'defaultFieldModel', {\n                  myEmails: Ember.A([])\n                });\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                Ember.set(this, 'defaultFieldModel.myEmails', Ember.A([{\n                  id: 1,\n                  value: 'xyz@example.com',\n                  is_primary: true\n                }, {\n                  id: 2,\n                  value: 'abc@test.com',\n                  is_primary: false\n                }]));\n                _context7.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'First item is marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), 'xyz@example.com', 'First item contains \\'xyz@example.com\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1].checked, false, 'Second item is not marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[1]['value']), 'abc@test.com', 'Second item contains \\'abc@test.com\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control')[0]['innerText'], 'Remove', 'Second item\\'s \\'Remove\\' button renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field (as custom field) : User is able to add items and mark one such item as primary', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(6);\n                Ember.setProperties(this, {\n                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),\n                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)\n                });\n                Ember.set(this, 'customFieldModel', {\n                  customField: {\n                    my_emails: Ember.A([])\n                  }\n                });\n                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                Ember.set(this, 'customFieldModel.customField.my_emails', Ember.A([{\n                  id: 1,\n                  value: 'xyz@example.com',\n                  is_primary: true\n                }, {\n                  id: 2,\n                  value: 'abc@test.com',\n                  is_primary: false\n                }]));\n                _context8.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'First item is marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), 'xyz@example.com', 'First item contains \\'xyz@example.com\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1].checked, false, 'Second item is not marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[1]['value']), 'abc@test.com', 'Second item contains \\'abc@test.com\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control')[0]['innerText'], 'Remove', 'Second item\\'s \\'Remove\\' button renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');\n\n              case 13:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field : Apps can configure minimum number of items to be always rendered', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(6);\n                Ember.setProperties(this, {\n                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),\n                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)\n                });\n                Ember.set(this, 'customFieldModel', {\n                  customField: {\n                    my_emails: Ember.A([])\n                  }\n                });\n                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                Ember.set(this, 'customFieldSchema.fields.0.fieldOptions.min_items', 2);\n                _context9.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'First item is marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), '', 'First item contains \\'\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1].checked, false, 'Second item is not marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[1]['value']), '', 'Second item contains \\'\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control').length, 0, 'Remove button does not appear next to each item, as minimum items limit is reached');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');\n\n              case 13:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field : Removing an item sets \\'_destroy\\' meta as true for the item', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(5);\n                Ember.setProperties(this, {\n                  customFieldModel: Ember.copy(Ember.get(this, 'customModel'), true),\n                  customFieldSchema: Ember.copy(Ember.get(this, 'customSchema'), true)\n                });\n                Ember.set(this, 'customFieldModel', {\n                  customField: {\n                    my_emails: Ember.A([])\n                  }\n                });\n                Ember.set(this, 'customFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                Ember.set(this, 'customFieldModel.customField.my_emails', Ember.A([{\n                  id: 1,\n                  value: 'xyz@example.com',\n                  is_primary: true\n                }, {\n                  id: 2,\n                  value: 'abc@test.com',\n                  is_primary: false\n                }]));\n                _context10.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"SIw1GWIn\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context10.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.radio-control input')[1]);\n\n              case 9:\n                _context10.next = 11;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.remove-button-control'));\n\n              case 11:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')['length'], 1, 'There is only one item');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')[0].checked, true, 'Item is marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('.field-type-control input')[0]['value']), 'abc@test.com', 'Item contains \\'abc@test.com\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.remove-button-control')['length'], 0, 'User cannot remove primary item');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User can add more items');\n\n              case 16:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field : Works properly as a dependent field', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(4);\n                Ember.setProperties(this, {\n                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),\n                  groupFieldAsDependentFieldSchema: Ember.copy(Ember.get(this, 'groupFieldAsADependentFieldSchema'), true)\n                });\n                Ember.set(this, 'defaultFieldModel', {\n                  myEmails: Ember.A([])\n                });\n                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context11.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"NSPcukJo\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"groupFieldAsDependentFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context11.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'));\n\n              case 9:\n                _context11.next = 11;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'), 13);\n\n              case 11:\n                _context11.next = 13;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"myEmails\"] .add-button-control'));\n\n              case 13:\n                _context11.next = 15;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .radio-control input')[1]);\n\n              case 15:\n                _context11.next = 17;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'));\n\n              case 17:\n                _context11.next = 19;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'), 40);\n\n              case 19:\n                _context11.next = 21;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'), 13);\n\n              case 21:\n                _context11.next = 23;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'));\n\n              case 23:\n                _context11.next = 25;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'), 38);\n\n              case 25:\n                _context11.next = 27;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-trigger'), 13);\n\n              case 27:\n                //  Press Enter\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')['length'], 1, 'There is only one item');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .radio-control input')[0].checked, true, 'First item is marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .field-type-control input')[0]['value']), '', 'First item contains \\'\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 1, 'User can add more items');\n\n              case 31:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('group-field : Works properly as a dependent field, in edit scenario', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(7);\n                Ember.setProperties(this, {\n                  defaultFieldModel: Ember.copy(Ember.get(this, 'defaultModel'), true),\n                  groupFieldAsDependentFieldSchema: Ember.copy(Ember.get(this, 'groupFieldAsADependentFieldSchema'), true)\n                });\n                Ember.set(this, 'defaultFieldModel', {\n                  myEmails: Ember.A([])\n                });\n                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                Ember.set(this, 'groupFieldAsDependentFieldSchema.fields.0.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                Ember.set(this, 'defaultFieldModel.hasEmail', 'yes_id');\n                Ember.set(this, 'defaultFieldModel.myEmails', Ember.A([{\n                  id: 1,\n                  value: 'xyz@example.com',\n                  is_primary: false\n                }, {\n                  id: 2,\n                  value: 'abc@test.com',\n                  is_primary: true\n                }]));\n                _context12.next = 9;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"NSPcukJo\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"groupFieldAsDependentFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"hasEmail\"] .ember-power-select-selected-item')['innerText'], 'Yes', 'Choice \\'Yes\\' is selected in parent field');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.radio-control input')['length'], 2, 'There are two items shown');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .radio-control input')[0].checked, false, 'First item is not marked as primary');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .field-type-control input')[0]['value']), 'xyz@example.com', 'First item contains \\'xyz@example.com\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .radio-control input')[1].checked, true, 'Second item is marked as primary');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .field-type-control input')[1]['value'].trim(), 'abc@test.com', 'Second item contains \\'abc@test.com\\' as value');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.add-button-control')['length'], 0, 'User can no longer add more items, as he has reached the maximum items limit');\n\n              case 16:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the group_field component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"여보세요\";\n\n                _createField.default.group(this, {\n                  label: sampleLabel\n                });\n\n                _context13.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/group-field/custom-palette/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, _emberPowerSelect, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/group field | custom-palette', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    Ember.setProperties(this, {\n      defaultFieldModel: {\n        myEmails: Ember.A([])\n      },\n      defaultFieldSchema: {\n        name: 'Some Form',\n        fields: [{\n          id: 'my_emails_id',\n          parent: null,\n          type: 'group_field',\n          label: 'My Emails',\n          hint: 'personal_email',\n          name: 'my_emails',\n          position: 1,\n          editable: true,\n          custom: false,\n          inputType: 'group-field',\n          placeholder: 'Email Address',\n          fieldOptions: {\n            group_type: 'email',\n            max_items: 2\n          },\n          getChoices: [{\n            id: \"work_id\",\n            value: \"Work\",\n            position: 1\n          }, {\n            id: \"personal_id\",\n            value: \"Personal\",\n            position: 2\n          }],\n          fields: []\n        }]\n      },\n      fieldMap: Ember.computed({\n        get: function get() {\n          return {\n            section: {\n              single: 'nested-section',\n              dependent: 'nested-section'\n            },\n            dropdown: {\n              single: 'power-select-field',\n              dependent: 'power-select-dependent-field'\n            },\n            dependent_dropdown: {\n              single: 'dependent-dropdown',\n              dependent: 'dependent-dropdown'\n            },\n            text: {\n              single: 'text-field',\n              dependent: 'text-field'\n            },\n            checkbox: {\n              single: 'checkbox-field',\n              dependent: 'checkbox-dependent-field'\n            },\n            number: {\n              single: 'number-field',\n              dependent: 'number-field'\n            },\n            paragraph: {\n              single: 'textarea-field',\n              dependent: 'textarea-field'\n            },\n            radio: {\n              single: 'radio-field',\n              dependent: 'radio-dependent-field'\n            },\n            date: {\n              single: 'datetime-field',\n              dependent: 'datetime-field'\n            },\n            date_time: {\n              single: 'datetime-field',\n              dependent: 'datetime-field'\n            },\n            auto_complete: {\n              single: 'auto-complete',\n              dependent: 'auto-complete'\n            },\n            email: {\n              single: 'email-field',\n              dependent: 'email-field'\n            },\n            phone_number: {\n              single: 'text-field',\n              dependent: 'text-field'\n            },\n            url: {\n              single: 'url-field',\n              dependent: 'url-field'\n            },\n            decimal: {\n              single: 'number-field',\n              dependent: 'number-field'\n            },\n            multi_select_dropdown: {\n              single: 'multi-select-dropdown-field',\n              dependent: 'multi-select-dropdown-field'\n            },\n            date_time_split: {\n              single: 'date-time-split-field',\n              dependent: 'date-time-split-field'\n            },\n            group_field: {\n              single: 'group-field',\n              dependent: 'group-field'\n            }\n          };\n        }\n      }).readOnly()\n    });\n    (0, _qunit.test)('group-field : Custom component passed by products gets rendered properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var formConfig, selectedDropdownItems;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                Ember.set(this, 'defaultFieldSchema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                this.owner.register('component:my-custom-palette', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"Fp/D24JC\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-controls/power-select\\\",null,[[\\\"options\\\",\\\"optionValuePath\\\",\\\"optionLabelPath\\\",\\\"object\\\",\\\"propertyName\\\",\\\"schema\\\",\\\"update\\\",\\\"allowClear\\\"],[[20,[\\\"options\\\"]],\\\"value\\\",\\\"value\\\",[20,[\\\"object\\\"]],\\\"category\\\",[20,[\\\"schema\\\"]],[20,[\\\"update\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                Ember.set(formConfig, 'groupFieldDefaultConfig.customPalette', 'my-custom-palette');\n                _context.next = 7;\n                return this.render(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 7:\n                _context.next = 9;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));\n\n              case 9:\n                _context.next = 11;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .ember-power-select-trigger')[0], 13);\n\n              case 11:\n                _context.next = 13;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .ember-power-select-trigger')[0], 13);\n\n              case 13:\n                _context.next = 15;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .ember-power-select-trigger')[1], 13);\n\n              case 15:\n                _context.next = 17;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .ember-power-select-trigger')[1], 40);\n\n              case 17:\n                _context.next = 19;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .ember-power-select-trigger')[1], 13);\n\n              case 19:\n                selectedDropdownItems = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"myEmails\"] .ember-power-select-selected-item');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(selectedDropdownItems[0]['innerText']), 'Work', 'First item contains \\'Work\\' rendered in the custom dropdown.');\n                assert.equal(Ember.get(this, 'defaultFieldModel.myEmails.0.category'), 'Work', 'First item contains \\'Work\\' populated as \\'category\\' value.');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(selectedDropdownItems[1]['innerText']), 'Personal', 'Second item contains \\'Personal\\' rendered in the custom dropdown.');\n                assert.equal(Ember.get(this, 'defaultFieldModel.myEmails.1.category'), 'Personal', 'Second item contains \\'Personal\\' populated as \\'category\\' value.');\n                Ember.set(formConfig, 'groupFieldDefaultConfig.customPalette', undefined);\n                this.owner.unregister('component:my-custom-palette');\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/group-field/field-view-toggle-button/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/group field | field-view-toggle-button | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        model: {\n          myEmails: Ember.A([])\n        },\n        schema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'my_emails_id',\n            parent: null,\n            type: 'group_field',\n            label: 'My Emails',\n            name: 'my_emails',\n            position: 1,\n            editable: true,\n            custom: false,\n            inputType: 'group-field',\n            placeholder: 'Email Address',\n            fieldOptions: {\n              group_type: 'email',\n              max_items: 10,\n              max_fields_to_be_shown: 3\n            },\n            fields: []\n          }]\n        },\n        fieldMap: Ember.computed({\n          get: function get() {\n            return {\n              section: {\n                single: 'nested-section',\n                dependent: 'nested-section'\n              },\n              dropdown: {\n                single: 'power-select-field',\n                dependent: 'dependent-selects/power-select-field'\n              },\n              dependent_dropdown: {\n                single: 'dependent-dropdown',\n                dependent: 'dependent-dropdown'\n              },\n              text: {\n                single: 'text-field',\n                dependent: 'text-field'\n              },\n              checkbox: {\n                single: 'checkbox-field',\n                dependent: 'dependent-selects/checkbox-field'\n              },\n              number: {\n                single: 'number-field',\n                dependent: 'number-field'\n              },\n              paragraph: {\n                single: 'textarea-field',\n                dependent: 'textarea-field'\n              },\n              radio: {\n                single: 'radio-field',\n                dependent: 'dependent-selects/radio-group'\n              },\n              date: {\n                single: 'datetime-field',\n                dependent: 'datetime-field'\n              },\n              date_time: {\n                single: 'datetime-field',\n                dependent: 'datetime-field'\n              },\n              auto_complete: {\n                single: 'auto-complete',\n                dependent: 'auto-complete'\n              },\n              email: {\n                single: 'email-field',\n                dependent: 'email-field'\n              },\n              phone_number: {\n                single: 'text-field',\n                dependent: 'text-field'\n              },\n              url: {\n                single: 'url-field',\n                dependent: 'url-field'\n              },\n              decimal: {\n                single: 'number-field',\n                dependent: 'number-field'\n              },\n              multi_select_dropdown: {\n                single: 'multi-select-dropdown-field',\n                dependent: 'multi-select-dropdown-field'\n              },\n              date_time_split: {\n                single: 'date-time-split-field',\n                dependent: 'date-time-split-field'\n              },\n              group_field: {\n                single: 'group-field',\n                dependent: 'group-field'\n              }\n            };\n          }\n        }).readOnly(),\n        isViewButtonShown: function isViewButtonShown() {\n          return !Ember.isNone((0, _emberNativeDomHelpers.find)('.view-toggle-btn'));\n        },\n        isViewButtonNotShown: function isViewButtonNotShown() {\n          return !this.isViewButtonShown();\n        },\n        addItem: function addItem() {\n          var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n          for (var times = 0; times < count; times++) {\n            (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.add-button-control'));\n          }\n        },\n        removeItem: function removeItem(fields) {\n          var removeBtns = (0, _emberNativeDomHelpers.findAll)('.remove-button-control');\n          fields.forEach(function (index) {\n            return (0, _emberNativeDomHelpers.click)(removeBtns[index]);\n          });\n        },\n        toggleViewButton: function toggleViewButton() {\n          (0, _emberNativeDomHelpers.click)('.view-toggle-btn input');\n        },\n        getViewButtonText: function getViewButtonText() {\n          return (0, _emberNativeDomHelpers.find)('.view-toggle-btn input').value;\n        },\n        getFieldCountSetOnToggleButton: function getFieldCountSetOnToggleButton() {\n          var text = this.getViewButtonText();\n          return parseInt(text.substring(text.indexOf('(') + 1, text.indexOf(')')));\n        },\n        getNumberOfFieldsShown: function getNumberOfFieldsShown() {\n          return (0, _emberNativeDomHelpers.findAll)('input[type=email]').length;\n        },\n        renderForm: function () {\n          var _renderForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                      \"id\": \"pjgPaD/c\",\n                      \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"            \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n                      \"meta\": {}\n                    }));\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function renderForm() {\n            return _renderForm.apply(this, arguments);\n          }\n\n          return renderForm;\n        }()\n      });\n    });\n    (0, _qunit.test)(\"#TEST1 check 'view less' button does not appears by default\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context2.next = 4;\n                return this.renderForm();\n\n              case 4:\n                assert.equal(true, this.isViewButtonNotShown(), \"'view less' button should not be shown by default\");\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 check 'view less' button appears when fieldCount > 'max_fields_to_be_shown' configured\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context3.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(2);\n                assert.equal(true, this.isViewButtonNotShown(), \"'view less' is not shown since fieldCount < max_fields_to_be_shown\");\n                this.addItem();\n                assert.equal(true, this.isViewButtonShown(), \"'view less' is shown since fieldCount > max_fields_to_be_shown\");\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 check 'view less' button disappears when fieldCount is < 'max_fields_to_be_shown' configured\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context4.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(5);\n                assert.equal(true, this.isViewButtonShown(), \"'view less' is shown since fieldCount > max_fields_to_be_shown\");\n                this.removeItem([1, 2, 3]);\n                assert.equal(true, this.isViewButtonNotShown(), \"'view less' is not shown since fieldCount < max_fields_to_be_shown\");\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 check 'view less' toggles to 'view all' when clicked\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context5.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(3);\n                assert.equal(\"View Less\", this.getViewButtonText(), \"'view less' changed to 'view all'\");\n                this.toggleViewButton();\n                assert.equal(\"View All(4)\", this.getViewButtonText(), \"'view less' changed to 'view all'\");\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 check 'view all' toggles to 'view less' when clicked\", /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context6.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(3);\n                this.toggleViewButton();\n                assert.equal(\"View All(4)\", this.getViewButtonText(), \"'view less' changed to 'view all'\");\n                this.toggleViewButton();\n                assert.equal(\"View Less\", this.getViewButtonText(), \"'view all' changed to 'view less'\");\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST6 check field count is properly displayed when fields are added and removed\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(4);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context7.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(5);\n                this.toggleViewButton();\n                assert.equal(6, this.getFieldCountSetOnToggleButton(), \"fieldCount is set as 6\");\n                this.addItem(2);\n                this.toggleViewButton();\n                assert.equal(8, this.getFieldCountSetOnToggleButton(), \"fieldCount is set as 8\");\n                this.removeItem([0, 1]);\n                assert.equal(6, this.getFieldCountSetOnToggleButton(), \"fieldCount is set as 6\");\n                this.toggleViewButton();\n                this.removeItem([3, 4]);\n                this.toggleViewButton();\n                assert.equal(4, this.getFieldCountSetOnToggleButton(), \"fieldCount is set as 4\");\n\n              case 16:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST7 check all fields are displayed when 'addMore' button is clicked\", /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context8.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(6);\n                assert.equal(7, this.getNumberOfFieldsShown(), \"fieldCount is set as 7\");\n                this.addItem(1);\n                assert.equal(8, this.getNumberOfFieldsShown(), \"fieldCount gets updated as 8\");\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST8 check all fields are displayed 'view all' is clicked\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context9.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(7);\n                this.toggleViewButton();\n                this.toggleViewButton();\n                assert.equal(8, this.getNumberOfFieldsShown(), \"only 8 fields are shown\");\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST9 check only 'max_fields_to_be_shown' are shown when 'view less' is clicked\", /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                _context10.next = 4;\n                return this.renderForm();\n\n              case 4:\n                this.addItem(7);\n                this.toggleViewButton();\n                assert.equal(3, this.getNumberOfFieldsShown(), \"only 3 fields are shown\");\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/group-field/field-view-toggle-button/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/group field | field-view-toggle-button | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.setProperties(this, {\n        model: {\n          myEmails: Ember.A([])\n        },\n        schema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'my_emails_id',\n            parent: null,\n            type: 'group_field',\n            label: 'My Emails',\n            name: 'my_emails',\n            position: 1,\n            editable: true,\n            custom: false,\n            inputType: 'group-field',\n            placeholder: 'Email Address',\n            fieldOptions: {\n              group_type: 'email',\n              max_items: 10,\n              max_fields_to_be_shown: 3\n            },\n            fields: []\n          }]\n        },\n        fieldMap: Ember.computed({\n          get: function get() {\n            return {\n              section: {\n                single: 'nested-section',\n                dependent: 'nested-section'\n              },\n              dropdown: {\n                single: 'power-select-field',\n                dependent: 'dependent-selects/power-select-field'\n              },\n              dependent_dropdown: {\n                single: 'dependent-dropdown',\n                dependent: 'dependent-dropdown'\n              },\n              text: {\n                single: 'text-field',\n                dependent: 'text-field'\n              },\n              checkbox: {\n                single: 'checkbox-field',\n                dependent: 'dependent-selects/checkbox-field'\n              },\n              number: {\n                single: 'number-field',\n                dependent: 'number-field'\n              },\n              paragraph: {\n                single: 'textarea-field',\n                dependent: 'textarea-field'\n              },\n              radio: {\n                single: 'radio-field',\n                dependent: 'dependent-selects/radio-group'\n              },\n              date: {\n                single: 'datetime-field',\n                dependent: 'datetime-field'\n              },\n              date_time: {\n                single: 'datetime-field',\n                dependent: 'datetime-field'\n              },\n              auto_complete: {\n                single: 'auto-complete',\n                dependent: 'auto-complete'\n              },\n              email: {\n                single: 'email-field',\n                dependent: 'email-field'\n              },\n              phone_number: {\n                single: 'text-field',\n                dependent: 'text-field'\n              },\n              url: {\n                single: 'url-field',\n                dependent: 'url-field'\n              },\n              decimal: {\n                single: 'number-field',\n                dependent: 'number-field'\n              },\n              multi_select_dropdown: {\n                single: 'multi-select-dropdown-field',\n                dependent: 'multi-select-dropdown-field'\n              },\n              date_time_split: {\n                single: 'date-time-split-field',\n                dependent: 'date-time-split-field'\n              },\n              group_field: {\n                single: 'group-field',\n                dependent: 'group-field'\n              }\n            };\n          }\n        }).readOnly(),\n        isViewButtonShown: function isViewButtonShown() {\n          return !Ember.isNone((0, _emberNativeDomHelpers.find)('.view-toggle-btn'));\n        },\n        isViewButtonNotShown: function isViewButtonNotShown() {\n          return !this.isViewButtonShown();\n        },\n        getViewButtonText: function getViewButtonText() {\n          return (0, _emberNativeDomHelpers.find)('.view-toggle-btn input').value;\n        },\n        getFieldCountSetOnToggleButton: function getFieldCountSetOnToggleButton() {\n          var text = this.getViewButtonText();\n          return parseInt(text.substring(text.indexOf('(') + 1, text.indexOf(')')));\n        },\n        renderForm: function () {\n          var _renderForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                      \"id\": \"pjgPaD/c\",\n                      \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"            \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"        \\\"]],\\\"hasEval\\\":false}\",\n                      \"meta\": {}\n                    }));\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function renderForm() {\n            return _renderForm.apply(this, arguments);\n          }\n\n          return renderForm;\n        }()\n      });\n    });\n    (0, _qunit.test)(\"#TEST1 should not show 'view more' button when number of saved fields < 'max_fields_to_be_shown'\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var savedValues;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                savedValues = Ember.A([{\n                  id: 1,\n                  value: 'abc@example.com',\n                  is_primary: true\n                }, {\n                  id: 2,\n                  value: 'xyz@example.com',\n                  is_primary: false\n                }, {\n                  id: 3,\n                  value: 'pqr@example.com',\n                  is_primary: false\n                }]);\n                Ember.set(this, 'model.myEmails', savedValues);\n                _context2.next = 6;\n                return this.renderForm();\n\n              case 6:\n                assert.equal(true, this.isViewButtonNotShown(), \"'view less' button is not shown since fieldCount < 'max_fields_to_be_shown'\");\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 should show 'view more' button when number of saved fields > 'max_fields_to_be_shown'\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var savedValues;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                Ember.set(this, 'schema.fields.0.fieldMap', Ember.get(this, 'fieldMap'));\n                savedValues = Ember.A([{\n                  id: 1,\n                  value: 'abc@example.com',\n                  is_primary: true\n                }, {\n                  id: 2,\n                  value: 'xyz@example.com',\n                  is_primary: false\n                }, {\n                  id: 3,\n                  value: 'pqr@example.com',\n                  is_primary: false\n                }, {\n                  id: 4,\n                  value: 'def@example.com',\n                  is_primary: false\n                }, {\n                  id: 5,\n                  value: 'ghi@example.com',\n                  is_primary: false\n                }]);\n                Ember.set(this, 'model.myEmails', savedValues);\n                _context3.next = 6;\n                return this.renderForm();\n\n              case 6:\n                assert.equal(true, this.isViewButtonShown(), \"'view less' button is shown since fieldCount > 'max_fields_to_be_shown'\");\n                assert.equal(5, this.getFieldCountSetOnToggleButton(), \"'view all' button has count 5\");\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/multi-select-dropdown-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/string-helper-methods\", \"ember-cli-fake-server\"], function (_qunit, _emberQunit, _testHelpers, _emberNativeDomHelpers, createField, _emberPowerSelect, _stringHelperMethods, _emberCliFakeServer) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/multi select dropdown field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      _emberCliFakeServer.default.start();\n\n      Ember.setProperties(this, {\n        defaultFieldModel: {\n          fSkills: ''\n        },\n        customFieldModel: {\n          customField: {\n            fSkills: ''\n          }\n        },\n        defaultFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'skills_field_id',\n            parent: null,\n            type: 'multi_select_dropdown',\n            label: 'Skills',\n            hint: \"select_intermediate_level_of_proficiency\",\n            name: 'fSkills',\n            position: 1,\n            editable: true,\n            custom: false,\n            getChoices: [{\n              id: 'ember_js_choice_id',\n              name: 'EmberJS',\n              position: 1\n            }, {\n              id: 'java_choice_id',\n              name: 'Java',\n              position: 2\n            }, {\n              id: 'ruby_on_rails_choice_id',\n              name: 'Ruby on Rails',\n              position: 3\n            }],\n            inputType: 'multi-select-dropdown-field',\n            fields: [],\n            optionValuePath: 'id',\n            optionLabelPath: 'name'\n          }]\n        },\n        customFieldSchema: {\n          name: 'Some Form',\n          fields: [{\n            id: 'skills_field_id',\n            parent: null,\n            type: 'multi_select_dropdown',\n            label: 'Skills',\n            hint: \"select_intermediate_level_of_proficiency\",\n            name: 'fSkills',\n            position: 1,\n            editable: true,\n            custom: true,\n            getChoices: [{\n              id: 'ember_js_choice_id',\n              value: 'EmberJS',\n              position: 1\n            }, {\n              id: 'java_choice_id',\n              value: 'Java',\n              position: 2\n            }, {\n              id: 'ruby_on_rails_choice_id',\n              value: 'Ruby on Rails',\n              position: 3\n            }],\n            inputType: 'multi-select-dropdown-field',\n            optionValuePath: 'value',\n            optionLabelPath: 'value',\n            fields: []\n          }]\n        }\n      });\n    });\n    hooks.afterEach(function () {\n      _emberCliFakeServer.default.stop();\n    });\n    (0, _qunit.test)('multi-select (as default field) : component renders properly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(3);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')['length'], 1, 'A dropdown component renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) : component renders properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText']), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')['length'], 1, 'A dropdown component renders properly');\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?select_intermediate_level_of_proficiency', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as default field) : clicking the field expands to show dropdown content', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(6);\n                _context3.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                _context3.next = 5;\n                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');\n\n              case 5:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');\n                assert.equal(Ember.$('.ember-power-select-option')[0]['innerText'].trim(), 'EmberJS', 'Emberjs option is rendered');\n                assert.equal(Ember.$('.ember-power-select-option')[1]['innerText'].trim(), 'Java', 'java option is rendered');\n                assert.equal(Ember.$('.ember-power-select-option')[2]['innerText'].trim(), 'Ruby on Rails', 'ruby on rails option is rendered');\n                _context3.next = 12;\n                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');\n\n              case 12:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select with link renders autocomplete without add option', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(3);\n                createField.multiSelectDropdown(this, {\n                  link: 'url/search'\n                });\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok();\n                });\n                _context5.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Known Programming Langugages', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'auto-complete renders properly');\n                _context5.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context5.next = 11;\n                return (0, _emberPowerSelect.typeInSearch)('john');\n\n              case 11:\n                return _context5.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                  return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          assert.equal(Ember.$('.ember-power-select-option')[0]['innerText'].trim(), 'No results found', 'add option is not rendered');\n\n                        case 1:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }))));\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as default field): checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(3);\n                Ember.run(function () {\n                  Ember.set(_this, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    minOptionsToEnableSearch: 4\n                  });\n                });\n                _context6.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context6.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 0, 'search is disabled');\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as default field): checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(3);\n                Ember.run(function () {\n                  Ember.set(_this2, 'defaultFieldSchema.fields.0.fieldOptions', {\n                    minOptionsToEnableSearch: 2\n                  });\n                });\n                _context7.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context7.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x6) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as default field) :checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is modified in config file', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(3);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    minOptionsToEnableSearch: 2\n                  });\n                });\n                _context8.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context8.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 10:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                });\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x7) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as default field) :checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is modified in config file', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(3);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    minOptionsToEnableSearch: 4\n                  });\n                });\n                _context9.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context9.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 10:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 0, 'search is disabled');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                });\n\n              case 12:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x8) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select with link renders autocomplete with requested choices and data is saved as delimiter separated', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(8);\n                createField.multiSelectDropdown(this, {\n                  label: 'Contacts',\n                  name: 'contact',\n                  link: 'url/search'\n                });\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  assert.equal(request.url, 'url/search?q=tim&qf=name', 'query field is populated');\n                  request.ok([{\n                    id: 'contact_1',\n                    name: 'timmy',\n                    position: 1\n                  }, {\n                    id: 'contact_2',\n                    name: 'timothy',\n                    position: 2\n                  }, {\n                    id: 'contact_3',\n                    name: 'tim',\n                    position: 3\n                  }]);\n                });\n                _context12.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                _context12.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context12.next = 9;\n                return (0, _emberPowerSelect.typeInSearch)('tim');\n\n              case 9:\n                return _context12.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {\n                  return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 3, 'results are loaded');\n                          _context11.next = 3;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                        case 3:\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×timothy', 'choices are selected properly');\n                          assert.equal(Ember.get(_this3, 'model.contact'), 'contact_2', 'selected data is saved properly');\n                          (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                            assert.equal(request.url, 'url/search?q=timmy&qf=name', 'query field is populated');\n                            request.ok([{\n                              id: 'contact_1',\n                              name: 'timmy',\n                              position: 1\n                            }]);\n                          });\n                          _context11.next = 8;\n                          return (0, _emberPowerSelect.typeInSearch)('timmy');\n\n                        case 8:\n                          return _context11.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                            return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                              while (1) {\n                                switch (_context10.prev = _context10.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 1, 'results are loaded');\n                                    _context10.next = 3;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                                  case 3:\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×timothy×timmy', 'choices are selected properly');\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.get(_this3, 'model.contact')), 'contact_2;contact_1', 'selected data is saved properly');\n\n                                  case 5:\n                                  case \"end\":\n                                    return _context10.stop();\n                                }\n                              }\n                            }, _callee10);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x9) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select renders already saved values along with link choices and data is saved as delimiter separated after edit', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this4 = this;\n\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(5);\n                createField.multiSelectDropdown(this, {\n                  label: 'Contacts',\n                  name: 'contact',\n                  link: 'url/search',\n                  optionValuePath: 'name'\n                }, {\n                  contact: 'test_contact1;test_contact2'\n                });\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  assert.equal(request.url, 'url/search?q=tim&qf=name', 'query field is populated');\n                  request.ok([{\n                    id: 'contact_1',\n                    name: 'tim',\n                    position: 1\n                  }, {\n                    id: 'contact_2',\n                    name: 'timothy',\n                    position: 2\n                  }]);\n                });\n                _context15.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context15.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                  return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×test_contact1×test_contact2', 'already selected choices are rendered properly');\n                          _context14.next = 3;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[1]);\n\n                        case 3:\n                          _context14.next = 5;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 5:\n                          _context14.next = 7;\n                          return (0, _emberPowerSelect.typeInSearch)('tim');\n\n                        case 7:\n                          return _context14.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {\n                            return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                              while (1) {\n                                switch (_context13.prev = _context13.next) {\n                                  case 0:\n                                    assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')['length'], 2, 'results are loaded');\n                                    _context13.next = 3;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[1]);\n\n                                  case 3:\n                                    assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×test_contact1×timothy', 'choices are selected properly');\n                                    assert.equal(Ember.get(_this4, 'model.contact'), 'test_contact1;timothy', 'selected data is saved properly');\n\n                                  case 5:\n                                  case \"end\":\n                                    return _context13.stop();\n                                }\n                              }\n                            }, _callee13);\n                          }))));\n\n                        case 8:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x10) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select field with link meta populated does not save empty values', /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var _this5 = this;\n\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(2);\n                (0, _emberCliFakeServer.stubRequest)('get', encodeURI('url/search'), function (request) {\n                  request.ok([{\n                    id: 'contact_1',\n                    name: null,\n                    position: 1\n                  }]);\n                });\n                createField.multiSelectDropdown(this, {\n                  label: 'Contacts',\n                  name: 'contact',\n                  link: 'url/search',\n                  optionValuePath: 'name'\n                }, {\n                  contact: ';   ;tim'\n                }); // if already saved values are combination of empty , non-empty and no value strings\n\n                _context17.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('.ember-power-select-multiple-option').text()), '×tim', 'choices are selected properly');\n                _context17.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                _context17.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('tim');\n\n              case 10:\n                return _context17.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\n                  return regeneratorRuntime.wrap(function _callee16$(_context16) {\n                    while (1) {\n                      switch (_context16.prev = _context16.next) {\n                        case 0:\n                          _context16.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]);\n\n                        case 2:\n                          assert.equal(Ember.get(_this5, 'model.contact'), 'tim', 'selected data is saved properly');\n\n                        case 3:\n                        case \"end\":\n                          return _context16.stop();\n                      }\n                    }\n                  }, _callee16);\n                }))));\n\n              case 11:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x11) {\n        return _ref17.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) : clicking the field expands to show dropdown content', /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(6);\n                _context18.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                _context18.next = 5;\n                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');\n\n              case 5:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');\n                assert.equal(Ember.$('.ember-power-select-option')[0]['innerText'].trim(), 'EmberJS', 'Emberjs option is rendered');\n                assert.equal(Ember.$('.ember-power-select-option')[1]['innerText'].trim(), 'Java', 'java option is rendered');\n                assert.equal(Ember.$('.ember-power-select-option')[2]['innerText'].trim(), 'Ruby on Rails', 'ruby on rails option is rendered');\n                _context18.next = 12;\n                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');\n\n              case 12:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');\n\n              case 13:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      return function (_x12) {\n        return _ref19.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(assert) {\n        var _this6 = this;\n\n        return regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                assert.expect(3);\n                Ember.run(function () {\n                  Ember.set(_this6, 'customFieldSchema.fields.0.fieldOptions', {\n                    minOptionsToEnableSearch: 4\n                  });\n                });\n                _context19.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context19.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-selsect-trigger-multiple-input')['length'], 0, 'search is disabled');\n\n              case 9:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      return function (_x13) {\n        return _ref20.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {\n        var _this7 = this;\n\n        return regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                assert.expect(3);\n                Ember.run(function () {\n                  Ember.set(_this7, 'customFieldSchema.fields.0.fieldOptions', {\n                    minOptionsToEnableSearch: 2\n                  });\n                });\n                _context20.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"3iU2AzQ6\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"          \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context20.next = 8;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');\n\n              case 9:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      return function (_x14) {\n        return _ref21.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is modified in config file', /*#__PURE__*/function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                assert.expect(3);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    minOptionsToEnableSearch: 2\n                  });\n                });\n                _context21.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context21.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 10:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 1, 'search is enabled');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                });\n\n              case 12:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      return function (_x15) {\n        return _ref22.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) :checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is modified in config file', /*#__PURE__*/function () {\n      var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(assert) {\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                assert.expect(3);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    minOptionsToEnableSearch: 4\n                  });\n                });\n                _context22.next = 6;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[0]['innerText'].trim(), 'Skills', 'Label for the field renders properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger')['length'], 1, 'multi select dropdown renders properly');\n                _context22.next = 10;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 10:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')['length'], 0, 'search is disabled');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                });\n\n              case 12:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      return function (_x16) {\n        return _ref23.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (optionValuePath is not specified) : clicking the field expands to show dropdown content', /*#__PURE__*/function () {\n      var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(assert) {\n        var _this8 = this;\n\n        return regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                assert.expect(2);\n                Ember.run(function () {\n                  Ember.set(_this8, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);\n                });\n                _context23.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"qYGQjtl7\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionValuePath\\\",\\\"optionLabelPath\\\"],[\\\"\\\",\\\"\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                _context23.next = 6;\n                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');\n\n              case 6:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'].value, 'true', 'Dropdown renders when clicked inside it');\n                _context23.next = 9;\n                return (0, _emberNativeDomHelpers.click)('.ember-power-select-multiple-trigger');\n\n              case 9:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-expanded'], undefined, 'Dropdown disappears when again clicked inside it');\n\n              case 10:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23);\n      }));\n\n      return function (_x17) {\n        return _ref24.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as default field) : all choices renders properly', /*#__PURE__*/function () {\n      var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(assert) {\n        var _this9 = this;\n\n        return regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                assert.expect(1);\n                _context25.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                _context25.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                return _context25.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {\n                  return regeneratorRuntime.wrap(function _callee24$(_context24) {\n                    while (1) {\n                      switch (_context24.prev = _context24.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, Ember.get(_this9, 'defaultFieldSchema.fields.0.getChoices.length'), 'All choices are getting displayed');\n\n                        case 1:\n                        case \"end\":\n                          return _context24.stop();\n                      }\n                    }\n                  }, _callee24);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25);\n      }));\n\n      return function (_x18) {\n        return _ref25.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) : all choices renders properly', /*#__PURE__*/function () {\n      var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(assert) {\n        var _this10 = this;\n\n        return regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                assert.expect(1);\n                _context27.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                _context27.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                return _context27.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {\n                  return regeneratorRuntime.wrap(function _callee26$(_context26) {\n                    while (1) {\n                      switch (_context26.prev = _context26.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, Ember.get(_this10, 'customFieldSchema.fields.0.getChoices.length'), 'All choices are getting displayed');\n\n                        case 1:\n                        case \"end\":\n                          return _context26.stop();\n                      }\n                    }\n                  }, _callee26);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27);\n      }));\n\n      return function (_x19) {\n        return _ref27.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (optionValuePath is not specified) : all choices renders properly', /*#__PURE__*/function () {\n      var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(assert) {\n        var _this11 = this;\n\n        return regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                assert.expect(1);\n                Ember.run(function () {\n                  Ember.set(_this11, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);\n                });\n                _context29.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"qYGQjtl7\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionValuePath\\\",\\\"optionLabelPath\\\"],[\\\"\\\",\\\"\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                _context29.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                return _context29.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {\n                  return regeneratorRuntime.wrap(function _callee28$(_context28) {\n                    while (1) {\n                      switch (_context28.prev = _context28.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, Ember.get(_this11, 'customFieldSchema.fields.0.getChoices.length'), 'All choices are getting displayed');\n\n                        case 1:\n                        case \"end\":\n                          return _context28.stop();\n                      }\n                    }\n                  }, _callee28);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29);\n      }));\n\n      return function (_x20) {\n        return _ref29.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as default field) : choices contain proper content and can be selected and removed', /*#__PURE__*/function () {\n      var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(assert) {\n        var _this12 = this;\n\n        return regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                assert.expect(10);\n                _context33.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fSkills'), '', 'Initially the field is rendered empty');\n                _context33.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                _context33.next = 8;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 8:\n                return _context33.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee32$(_context32) {\n                    while (1) {\n                      switch (_context32.prev = _context32.next) {\n                        case 0:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                          assert.equal(optionDomElement.length, 1, 'A choice is now selected');\n                          assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \\'EmberJS\\' is now selected');\n                          assert.equal(Ember.get(_this12, 'defaultFieldModel.fSkills'), 'ember_js_choice_id', 'Model contains \\'EmberJS\\' as field value');\n                          _context32.next = 6;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 6:\n                          _context32.next = 8;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n                        case 8:\n                          return _context32.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {\n                            return regeneratorRuntime.wrap(function _callee31$(_context31) {\n                              while (1) {\n                                switch (_context31.prev = _context31.next) {\n                                  case 0:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                                    assert.equal(optionDomElement.length, 2, 'Two choices are now selected');\n                                    assert.equal(optionDomElement[1]['innerText'], '× Java', 'Choice \\'Java\\' is also selected now');\n                                    assert.equal(Ember.get(_this12, 'defaultFieldModel.fSkills'), 'ember_js_choice_id;java_choice_id', 'Model contains \\'EmberJS;Java\\' as field value');\n                                    _context31.next = 6;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                  case 6:\n                                    return _context31.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {\n                                      return regeneratorRuntime.wrap(function _callee30$(_context30) {\n                                        while (1) {\n                                          switch (_context30.prev = _context30.next) {\n                                            case 0:\n                                              optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                                              assert.equal(optionDomElement.length, 1, 'A choice is removed now');\n                                              assert.equal(optionDomElement[0]['innerText'], '× Java', 'Choice \\'EmberJS\\' is removed from selected list');\n                                              assert.equal(Ember.get(_this12, 'defaultFieldModel.fSkills'), 'java_choice_id', 'Model contains \\'Java\\' as field value');\n\n                                            case 4:\n                                            case \"end\":\n                                              return _context30.stop();\n                                          }\n                                        }\n                                      }, _callee30);\n                                    }))));\n\n                                  case 7:\n                                  case \"end\":\n                                    return _context31.stop();\n                                }\n                              }\n                            }, _callee31);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context32.stop();\n                      }\n                    }\n                  }, _callee32);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      return function (_x21) {\n        return _ref31.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as custom field) : choices contain proper content and can be selected and removed', /*#__PURE__*/function () {\n      var _ref35 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(assert) {\n        var _this13 = this;\n\n        return regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                assert.expect(10);\n                _context37.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(Ember.get(this, 'customFieldModel.customField.fSkills'), '', 'Initially the field is rendered empty');\n                _context37.next = 6;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 6:\n                _context37.next = 8;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 8:\n                return _context37.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee36$(_context36) {\n                    while (1) {\n                      switch (_context36.prev = _context36.next) {\n                        case 0:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fSkills\"] .ember-power-select-multiple-option');\n                          assert.equal(optionDomElement.length, 1, 'A choice is now selected');\n                          assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \\'EmberJS\\' is now selected');\n                          assert.equal(Ember.get(_this13, 'customFieldModel.customField.fSkills'), 'EmberJS', 'Model contains \\'EmberJS\\' as field value');\n                          _context36.next = 6;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 6:\n                          _context36.next = 8;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n                        case 8:\n                          return _context36.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {\n                            return regeneratorRuntime.wrap(function _callee35$(_context35) {\n                              while (1) {\n                                switch (_context35.prev = _context35.next) {\n                                  case 0:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fSkills\"] .ember-power-select-multiple-option');\n                                    assert.equal(optionDomElement.length, 2, 'Two choices are now selected');\n                                    assert.equal(optionDomElement[1]['innerText'], '× Java', 'Choice \\'Java\\' is also selected now');\n                                    assert.equal(Ember.get(_this13, 'customFieldModel.customField.fSkills'), 'EmberJS;Java', 'Model contains \\'EmberJS;Java\\' as field value');\n                                    _context35.next = 6;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                  case 6:\n                                    return _context35.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {\n                                      return regeneratorRuntime.wrap(function _callee34$(_context34) {\n                                        while (1) {\n                                          switch (_context34.prev = _context34.next) {\n                                            case 0:\n                                              optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fSkills\"] .ember-power-select-multiple-option');\n                                              assert.equal(optionDomElement.length, 1, 'A choice is removed now');\n                                              assert.equal(optionDomElement[0]['innerText'], '× Java', 'Choice \\'EmberJS\\' is removed from selected list');\n                                              assert.equal(Ember.get(_this13, 'customFieldModel.customField.fSkills'), 'Java', 'Model contains \\'Java\\' as field value');\n\n                                            case 4:\n                                            case \"end\":\n                                              return _context34.stop();\n                                          }\n                                        }\n                                      }, _callee34);\n                                    }))));\n\n                                  case 7:\n                                  case \"end\":\n                                    return _context35.stop();\n                                }\n                              }\n                            }, _callee35);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context36.stop();\n                      }\n                    }\n                  }, _callee36);\n                }))));\n\n              case 9:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      return function (_x22) {\n        return _ref35.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (optionValuePath is not specified) : choices contain proper content and can be selected and removed', /*#__PURE__*/function () {\n      var _ref39 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(assert) {\n        var _this14 = this;\n\n        return regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                assert.expect(10);\n                Ember.run(function () {\n                  Ember.set(_this14, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);\n                  Ember.set(_this14, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this14, 'defaultFieldSchema.fields.0.optionLabelPath', '');\n                });\n                _context41.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"AOmButnt\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[25,\\\"log\\\",[[20,[\\\"defaultFieldSchema\\\"]]],null],false],[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(Ember.get(this, 'defaultFieldModel.fSkills'), '', 'Initially the field is rendered empty');\n                _context41.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context41.next = 9;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 9:\n                return _context41.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee40$(_context40) {\n                    while (1) {\n                      switch (_context40.prev = _context40.next) {\n                        case 0:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                          assert.equal(optionDomElement.length, 1, 'A choice is now selected');\n                          assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \\'EmberJS\\' is now selected');\n                          assert.equal(Ember.get(_this14, 'defaultFieldModel.fSkills'), 'EmberJS', 'Model contains \\'EmberJS\\' as field value');\n                          _context40.next = 6;\n                          return (0, _emberPowerSelect.clickTrigger)();\n\n                        case 6:\n                          _context40.next = 8;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n                        case 8:\n                          return _context40.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39() {\n                            return regeneratorRuntime.wrap(function _callee39$(_context39) {\n                              while (1) {\n                                switch (_context39.prev = _context39.next) {\n                                  case 0:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                                    assert.equal(optionDomElement.length, 2, 'Two choices are now selected');\n                                    assert.equal(optionDomElement[1]['innerText'], '× Java', 'Choice \\'Java\\' is also selected now');\n                                    assert.equal(Ember.get(_this14, 'defaultFieldModel.fSkills'), 'EmberJS;Java', 'Model contains \\'EmberJS;Java\\' as field value');\n                                    _context39.next = 6;\n                                    return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                                  case 6:\n                                    return _context39.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {\n                                      return regeneratorRuntime.wrap(function _callee38$(_context38) {\n                                        while (1) {\n                                          switch (_context38.prev = _context38.next) {\n                                            case 0:\n                                              optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                                              assert.equal(optionDomElement.length, 1, 'A choice is removed now');\n                                              assert.equal(optionDomElement[0]['innerText'], '× Java', 'Choice \\'EmberJS\\' is removed from selected list');\n                                              assert.equal(Ember.get(_this14, 'defaultFieldModel.fSkills'), 'Java', 'Model contains \\'Java\\' as field value');\n\n                                            case 4:\n                                            case \"end\":\n                                              return _context38.stop();\n                                          }\n                                        }\n                                      }, _callee38);\n                                    }))));\n\n                                  case 7:\n                                  case \"end\":\n                                    return _context39.stop();\n                                }\n                              }\n                            }, _callee39);\n                          }))));\n\n                        case 9:\n                        case \"end\":\n                          return _context40.stop();\n                      }\n                    }\n                  }, _callee40);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      return function (_x23) {\n        return _ref39.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select : able to enable and disable the field based on \\'editable\\' property of schema', /*#__PURE__*/function () {\n      var _ref43 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42(assert) {\n        var _this15 = this;\n\n        return regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                assert.expect(2);\n                _context42.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                Ember.run(function () {\n                  Ember.set(_this15, 'defaultFieldSchema.fields.0.editable', false);\n                });\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-disabled'].value, 'true', 'Field is disabled when \\'editable\\' is \\'true\\'');\n                Ember.run(function () {\n                  Ember.set(_this15, 'defaultFieldSchema.fields.0.editable', true);\n                });\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-trigger')[0]['attributes']['aria-disabled'], undefined, 'Field is enabled when \\'editable\\' is \\'false\\'');\n\n              case 7:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42);\n      }));\n\n      return function (_x24) {\n        return _ref43.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select : filtering based on search works', /*#__PURE__*/function () {\n      var _ref44 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43(assert) {\n        return regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                assert.expect(3);\n                _context43.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"Y4N/tsN5\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionLabelPath\\\"],[\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                _context43.next = 5;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 5:\n                _context43.next = 7;\n                return (0, _emberPowerSelect.typeInSearch)('J');\n\n              case 7:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 2, 'Choice \\'Ruby on Rails\\' gets filtered out');\n                _context43.next = 10;\n                return (0, _emberPowerSelect.typeInSearch)('Jav');\n\n              case 10:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option').length, 1, 'Choice \\'EmberJS\\' also gets filtered out');\n                _context43.next = 13;\n                return (0, _emberPowerSelect.typeInSearch)('abc');\n\n              case 13:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-option')[0]['innerText'], 'No results found', 'All choices are filtered out');\n\n              case 14:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43);\n      }));\n\n      return function (_x25) {\n        return _ref44.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as a default field) : it allows rendering of already selected options', /*#__PURE__*/function () {\n      var _ref45 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46(assert) {\n        var _this16 = this;\n\n        return regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                assert.expect(9);\n                Ember.run(function () {\n                  Ember.set(_this16, 'defaultFieldSchema.fields.0.optionValuePath', 'name');\n                  Ember.set(_this16, 'defaultFieldSchema.fields.0.optionLabelPath', 'name');\n                  Ember.set(_this16, 'defaultFieldModel.fSkills', 'Ruby on Rails;EmberJS');\n                });\n                _context46.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 2, 'Both the choices gets rendered inside the field properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[0]['innerText'], '× Ruby on Rails', 'Choice \\'Ruby on Rails\\' is rendered properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[1]['innerText'], '× EmberJS', 'Choice \\'EmberJS\\' is rendered properly');\n                _context46.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context46.next = 11;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);\n\n              case 11:\n                _context46.next = 13;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 13:\n                return _context46.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee45$(_context45) {\n                    while (1) {\n                      switch (_context45.prev = _context45.next) {\n                        case 0:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                          assert.equal(optionDomElement.length, 3, 'All three choice are now selected');\n                          assert.equal(optionDomElement[2]['innerText'], '× Java', 'Choice \\'Java\\' is also selected now');\n                          assert.equal(Ember.get(_this16, 'defaultFieldModel.fSkills'), 'Ruby on Rails;EmberJS;Java', 'Model contains \\'EmberJS\\' as field value');\n                          _context45.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 6:\n                          return _context45.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44() {\n                            return regeneratorRuntime.wrap(function _callee44$(_context44) {\n                              while (1) {\n                                switch (_context44.prev = _context44.next) {\n                                  case 0:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                                    assert.equal(optionDomElement.length, 2, 'A choice is removed now');\n                                    assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \\'Ruby on Rails\\' is removed from selected list');\n                                    assert.equal(Ember.get(_this16, 'defaultFieldModel.fSkills'), 'EmberJS;Java', 'Model contains \\'EmberJS;Java\\' as field value');\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context44.stop();\n                                }\n                              }\n                            }, _callee44);\n                          }))));\n\n                        case 7:\n                        case \"end\":\n                          return _context45.stop();\n                      }\n                    }\n                  }, _callee45);\n                }))));\n\n              case 14:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46);\n      }));\n\n      return function (_x26) {\n        return _ref45.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (as a custom field) : its allows rendering of already selected options', /*#__PURE__*/function () {\n      var _ref48 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49(assert) {\n        var _this17 = this;\n\n        return regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                assert.expect(9);\n                Ember.run(function () {\n                  Ember.set(_this17, 'customFieldModel.customField.fSkills', 'Ruby on Rails;EmberJS');\n                });\n                _context49.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"59Pal/FU\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"customFieldModel\\\"]],[20,[\\\"customFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionValuePath\\\",\\\"optionLabelPath\\\"],[\\\"value\\\",\\\"value\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 2, 'Both the choices gets rendered inside the field properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[0]['innerText'], '× Ruby on Rails', 'Choice \\'Ruby on Rails\\' is rendered properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[1]['innerText'], '× EmberJS', 'Choice \\'EmberJS\\' is rendered properly');\n                _context49.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context49.next = 11;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);\n\n              case 11:\n                _context49.next = 13;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 13:\n                return _context49.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee48$(_context48) {\n                    while (1) {\n                      switch (_context48.prev = _context48.next) {\n                        case 0:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fSkills\"] .ember-power-select-multiple-option');\n                          assert.equal(optionDomElement.length, 3, 'All three choice are now selected');\n                          assert.equal(optionDomElement[2]['innerText'], '× Java', 'Choice \\'Java\\' is also selected now');\n                          assert.equal(Ember.get(_this17, 'customFieldModel.customField.fSkills'), 'Ruby on Rails;EmberJS;Java', 'Model contains \\'EmberJS\\' as field value');\n                          _context48.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 6:\n                          return _context48.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {\n                            return regeneratorRuntime.wrap(function _callee47$(_context47) {\n                              while (1) {\n                                switch (_context47.prev = _context47.next) {\n                                  case 0:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"customField.fSkills\"] .ember-power-select-multiple-option');\n                                    assert.equal(optionDomElement.length, 2, 'A choice is removed now');\n                                    assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \\'Ruby on Rails\\' is removed from selected list');\n                                    assert.equal(Ember.get(_this17, 'customFieldModel.customField.fSkills'), 'EmberJS;Java', 'Model contains \\'EmberJS;Java\\' as field value');\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context47.stop();\n                                }\n                              }\n                            }, _callee47);\n                          }))));\n\n                        case 7:\n                        case \"end\":\n                          return _context48.stop();\n                      }\n                    }\n                  }, _callee48);\n                }))));\n\n              case 14:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49);\n      }));\n\n      return function (_x27) {\n        return _ref48.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (optionValuePath is not specified) : its allows rendering of already selected options', /*#__PURE__*/function () {\n      var _ref51 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52(assert) {\n        var _this18 = this;\n\n        return regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                assert.expect(9);\n                Ember.run(function () {\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this18, 'defaultFieldSchema.fields.0.optionLabelPath', '');\n                  Ember.set(_this18, 'defaultFieldModel.fSkills', 'Ruby on Rails;EmberJS');\n                });\n                _context52.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"qYGQjtl7\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionValuePath\\\",\\\"optionLabelPath\\\"],[\\\"\\\",\\\"\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 2, 'Both the choices gets rendered inside the field properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[0]['innerText'], '× Ruby on Rails', 'Choice \\'Ruby on Rails\\' is rendered properly');\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option')[1]['innerText'], '× EmberJS', 'Choice \\'EmberJS\\' is rendered properly');\n                _context52.next = 9;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 9:\n                _context52.next = 11;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 40);\n\n              case 11:\n                _context52.next = 13;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-trigger-multiple-input')[0], 13);\n\n              case 13:\n                return _context52.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51() {\n                  var optionDomElement;\n                  return regeneratorRuntime.wrap(function _callee51$(_context51) {\n                    while (1) {\n                      switch (_context51.prev = _context51.next) {\n                        case 0:\n                          optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                          assert.equal(optionDomElement.length, 3, 'All three choice are now selected');\n                          assert.equal(optionDomElement[2]['innerText'], '× Java', 'Choice \\'Java\\' is also selected now');\n                          assert.equal(Ember.get(_this18, 'defaultFieldModel.fSkills'), 'Ruby on Rails;EmberJS;Java', 'Model contains \\'EmberJS\\' as field value');\n                          _context51.next = 6;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-remove-btn')[0]);\n\n                        case 6:\n                          return _context51.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50() {\n                            return regeneratorRuntime.wrap(function _callee50$(_context50) {\n                              while (1) {\n                                switch (_context50.prev = _context50.next) {\n                                  case 0:\n                                    optionDomElement = (0, _emberNativeDomHelpers.findAll)('[data-test-field-name=\"fSkills\"] .ember-power-select-multiple-option');\n                                    assert.equal(optionDomElement.length, 2, 'A choice is removed now');\n                                    assert.equal(optionDomElement[0]['innerText'], '× EmberJS', 'Choice \\'Ruby on Rails\\' is removed from selected list');\n                                    assert.equal(Ember.get(_this18, 'defaultFieldModel.fSkills'), 'EmberJS;Java', 'Model contains \\'EmberJS;Java\\' as field value');\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context50.stop();\n                                }\n                              }\n                            }, _callee50);\n                          }))));\n\n                        case 7:\n                        case \"end\":\n                          return _context51.stop();\n                      }\n                    }\n                  }, _callee51);\n                }))));\n\n              case 14:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52);\n      }));\n\n      return function (_x28) {\n        return _ref51.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('The placeholder is only visible when no options are selected', /*#__PURE__*/function () {\n      var _ref54 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54(assert) {\n        var _this19 = this;\n\n        return regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                assert.expect(2);\n                Ember.run(function () {\n                  Ember.set(_this19, 'defaultFieldSchema.fields.0.placeholder', 'Select your skills...');\n                });\n                _context54.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"FVyp1cOy\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[25,\\\"component\\\",[[19,1,[\\\"drawForm\\\"]]],[[\\\"optionValuePath\\\",\\\"optionLabelPath\\\"],[\\\"name\\\",\\\"name\\\"]]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger-multiple-input')['placeholder'], 'Select your skills...', 'There is a placeholder');\n                _context54.next = 7;\n                return (0, _emberPowerSelect.clickTrigger)();\n\n              case 7:\n                _context54.next = 9;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger-multiple-input'), 13);\n\n              case 9:\n                return _context54.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53() {\n                  return regeneratorRuntime.wrap(function _callee53$(_context53) {\n                    while (1) {\n                      switch (_context53.prev = _context53.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger-multiple-input')['placeholder'], '', 'The placeholder is gone');\n\n                        case 1:\n                        case \"end\":\n                          return _context53.stop();\n                      }\n                    }\n                  }, _callee53);\n                }))));\n\n              case 10:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54);\n      }));\n\n      return function (_x29) {\n        return _ref54.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (optionValuePath is present): if an option not present in dropdown options is set as selected, nothing is rendered in power-select', /*#__PURE__*/function () {\n      var _ref56 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55(assert) {\n        var _this20 = this;\n\n        return regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                assert.expect(1);\n                Ember.run(function () {\n                  Ember.set(_this20, 'defaultFieldModel.fSkills', 'Python');\n                  Ember.set(_this20, 'defaultFieldSchema.fields.0.optionValuePath', 'name');\n                  Ember.set(_this20, 'defaultFieldSchema.fields.0.optionLabelPath', 'name');\n                });\n                _context55.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 0, 'No choices gets rendered inside the field');\n\n              case 5:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55);\n      }));\n\n      return function (_x30) {\n        return _ref56.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('multi-select (optionValuePath is not specified): if an option not present in dropdown options is set as selected, nothing is rendered in power-select', /*#__PURE__*/function () {\n      var _ref57 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56(assert) {\n        var _this21 = this;\n\n        return regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                assert.expect(1);\n                Ember.run(function () {\n                  Ember.set(_this21, 'defaultFieldSchema.fields.0.getChoices', ['EmberJS', 'Java', 'Ruby on Rails']);\n                  Ember.set(_this21, 'defaultFieldSchema.fields.0.optionValuePath', '');\n                  Ember.set(_this21, 'defaultFieldSchema.fields.0.optionLabelPath', '');\n                  Ember.set(_this21, 'defaultFieldModel.fSkills', 'Python');\n                });\n                _context56.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"ZUT4xtiT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"defaultFieldModel\\\"]],[20,[\\\"defaultFieldSchema\\\"]]]],{\\\"statements\\\":[[0,\\\"        \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-multiple-option').length, 0, 'No choices gets rendered inside the field');\n\n              case 5:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56);\n      }));\n\n      return function (_x31) {\n        return _ref57.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the multi_select_dropdown component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref58 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"Hello\";\n                createField.multiSelectDropdown(this, {\n                  label: sampleLabel\n                });\n                _context57.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n\n      return function (_x32) {\n        return _ref58.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/number-field/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/string-helper-methods\", \"@ember/test-helpers\", \"ember-test-helpers/wait\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods, _testHelpers, _wait) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/number field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 Component will not render when propertyName and object are not passed', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Ember.set(this, 'object', {});\n                Ember.set(this, 'propertyName', ' ');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"3fh9TxlU\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-fields/number-field\\\",null,[[\\\"propertyName\\\",\\\"object\\\"],[[20,[\\\"propertyName\\\"]],[20,[\\\"object\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 4:\n                assert.equal(this.$().text().trim(), '');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 Check the number component renders hint as default field', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this);\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_annual_income', 'Hint for the field renders properly');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 Check the number component renders hint as custom field', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context3.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_annual_income', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST4 Create and edit Number field without number value formatting', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var _this = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(7);\n                createField.number(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context4.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['placeholder'], \"income in '\\u20B9'\", \"Check if placeholder gets rendered\");\n                _context4.next = 9;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229);\n\n              case 9:\n                return _context4.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['value'], \"45229\", \"Check if value gets rendered\");\n                  assert.equal(_this.model.customField.income, 45229, \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229.456789);\n                  return (0, _wait.default)().then(function () {\n                    assert.equal(inputs[0]['value'], \"45229.456789\", \"Check if value gets rendered\");\n                    assert.equal(_this.model.customField.income, 45229.456789, \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[0], null);\n                    return (0, _wait.default)().then(function () {\n                      assert.equal(inputs[0]['value'], '', \"Check if value gets rendered\");\n                      assert.equal(_this.model.customField.income, '', \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST5 Get existing number from model when given', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {\n                    income: 45229\n                  }\n                };\n                _context5.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], \"45229\", \"Check if value gets rendered\");\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST6 Create and edit number field when formatting is enabled', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this2 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(7);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'en-US'\n                  }\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context6.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['placeholder'], \"income in '\\u20B9'\", \"Check if placeholder gets rendered\");\n                _context6.next = 9;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229);\n\n              case 9:\n                return _context6.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['value'], \"45,229\", \"Check if value gets rendered\");\n                  assert.equal(_this2.model.customField.income, 45229, \"Check value is updated on the model\");\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229.456789);\n                  return (0, _wait.default)().then(function () {\n                    assert.equal(inputs[0]['value'], \"45,229.456789\", \"Check if value gets rendered\");\n                    assert.equal(_this2.model.customField.income, 45229.456789, \"Check value is updated on the model\");\n                    (0, _emberNativeDomHelpers.fillIn)(inputs[0], '');\n                    return (0, _wait.default)().then(function () {\n                      assert.equal(inputs[0]['value'], '', \"Check if value gets rendered\");\n                      assert.equal(_this2.model.customField.income, null, \"Check value is updated on the model\");\n                    });\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST7 When formatting is enabled, data is formatted properly in edit scenario', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'hi-IN'\n                  }\n                });\n                this.model = {\n                  customField: {\n                    income: 452290\n                  }\n                };\n                _context7.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], \"4,52,290\", \"Check if value gets rendered\");\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST8 When locale is incorrect no formatting should be done', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this3 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'en_EUR'\n                  }\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context8.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                _context8.next = 8;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229);\n\n              case 8:\n                return _context8.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['value'], \"45229\", \"Check if value gets rendered\");\n                  assert.equal(_this3.model.customField.income, 45229, \"Check value is updated on the model\");\n                }));\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST9 Check if null value is stored in model when no value is provided on number formatting', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(2);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'en-US'\n                  }\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context9.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], '', \"Check if null value gets rendered\");\n                assert.equal(this.model.customField.income, undefined, \"Check if null value gets updated in the model\");\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST10 Should not allow users to enter non-numeric characters', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this4 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(4);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'en-US'\n                  }\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context10.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');\n                assert.equal(this.model.customField.income, undefined, 'Check if existing value is in the model');\n                _context10.next = 10;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], 'abcd');\n\n              case 10:\n                return _context10.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');\n                  assert.equal(_this4.model.customField.income, undefined, 'Check value is updated on the model');\n                }));\n\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST11 The entered value can have decimal character at the end', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var _this5 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(6);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'en-US'\n                  }\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context11.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');\n                assert.equal(this.model.customField.income, undefined, 'Check if existing value is in the model');\n                _context11.next = 10;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '12345.');\n\n              case 10:\n                return _context11.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['value'], '12,345.', 'Check if value gets rendered');\n                  assert.equal(_this5.model.customField.income, 12345, 'Check value is updated on the model');\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], '12345..');\n                  return (0, _wait.default)().then(function () {\n                    assert.equal(inputs[0]['value'], '12,345.', 'Check if value gets rendered');\n                    assert.equal(_this5.model.customField.income, 12345, 'Check value is updated on the model');\n                  });\n                }));\n\n              case 11:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST12 Trailing zeros entered by the user in the decimal part must be preserved', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        var _this6 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(4);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'en-US'\n                  }\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context12.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], '', 'Check if value gets rendered');\n                assert.equal(this.model.customField.income, undefined, 'Check if existing value is in the model');\n                _context12.next = 10;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '12345678.9000');\n\n              case 10:\n                return _context12.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['value'], '12,345,678.9000', 'Check if value gets rendered');\n                  assert.equal(_this6.model.customField.income, 12345678.9, 'Check value is updated on the model');\n                }));\n\n              case 11:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST13 Should work properly when thousands separator is \".\" and decimal separator is \",\"', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        var _this7 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                // Test written for es locale (Spain)\n                assert.expect(5);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'es'\n                  }\n                });\n                this.model = {\n                  customField: {\n                    income: 452290456.789012\n                  }\n                };\n                _context13.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], '452.290.456,789012', 'Check if value gets rendered');\n                _context13.next = 9;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '452.290.456.789.012,');\n\n              case 9:\n                return _context13.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['value'], '452.290.456.789.012,', 'Check if value gets rendered');\n                  assert.equal(_this7.model.customField.income, 452290456789012, 'Check value is updated on the model');\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], '452.290.456.789.012,,');\n                  return (0, _wait.default)().then(function () {\n                    assert.equal(inputs[0]['value'], '452.290.456.789.012,', 'Check if value gets rendered');\n                    assert.equal(_this7.model.customField.income, 452290456789012, 'Check value is updated on the model');\n                  });\n                }));\n\n              case 10:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST14 Non-numeric data should not get rendered in edit scenario', /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {\n        var _this8 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                assert.expect(6);\n                createField.number(this, {\n                  custom: true,\n                  fieldOptions: {\n                    locale: 'en-US'\n                  }\n                });\n                this.model = {\n                  customField: {\n                    income: '4522w'\n                  }\n                };\n                _context14.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                assert.equal(inputs[0]['value'], 'NaN', 'Check if value gets rendered');\n                assert.equal(this.model.customField.income, '4522w', 'Check if existing value is in the model');\n                _context14.next = 10;\n                return (0, _emberNativeDomHelpers.fillIn)(inputs[0], '45229w');\n\n              case 10:\n                return _context14.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  // Till wrong format is removed, restore previous model value\n                  assert.equal(inputs[0]['value'], 'NaN', 'Check if value gets rendered');\n                  assert.equal(_this8.model.customField.income, '4522w', 'Check value is updated on the model');\n                  (0, _emberNativeDomHelpers.fillIn)(inputs[0], 45229.456789);\n                  return (0, _wait.default)().then(function () {\n                    assert.equal(inputs[0]['value'], '45,229.456789', 'Check if value gets rendered');\n                    assert.equal(_this8.model.customField.income, 45229.456789, 'Check value is updated on the model');\n                  });\n                }));\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST15 Passing editable as false must disable the field, when number formatting is not enabled', /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var _this9 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(3);\n                createField.number(this, {\n                  custom: true,\n                  editable: false\n                });\n                this.model = {\n                  customField: {\n                    income: 45229.456789\n                  }\n                };\n                _context15.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context15.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['disabled'], true, 'Check if field is disabled');\n                  assert.equal(inputs[0]['value'], '45229.456789', 'Check if value gets rendered');\n                  assert.equal(_this9.model.customField.income, 45229.456789, 'Check value is updated on the model');\n                }));\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x15) {\n        return _ref16.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST16 Passing editable as false must disable the field, when number formatting is enabled', /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {\n        var _this10 = this;\n\n        var inputs;\n        return regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                assert.expect(3);\n                createField.number(this, {\n                  custom: true,\n                  editable: false,\n                  fieldOptions: {\n                    locale: 'en-US'\n                  }\n                });\n                this.model = {\n                  customField: {\n                    income: 45229.456789\n                  }\n                };\n                _context16.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputs = (0, _emberNativeDomHelpers.findAll)('input');\n                return _context16.abrupt(\"return\", (0, _wait.default)().then(function () {\n                  assert.equal(inputs[0]['disabled'], true, 'Check if field is disabled');\n                  assert.equal(inputs[0]['value'], '45,229.456789', 'Check if value gets rendered');\n                  assert.equal(_this10.model.customField.income, 45229.456789, 'Check value is updated on the model');\n                }));\n\n              case 7:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      return function (_x16) {\n        return _ref17.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the number component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"হ্যালো\";\n                createField.number(this, {\n                  label: sampleLabel\n                });\n                _context17.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x17) {\n        return _ref18.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check if the number component follows accessibility features related to required attribute', /*#__PURE__*/function () {\n      var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var inputElement;\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(2);\n                createField.number(this, {\n                  required: true\n                });\n                _context18.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];\n                assert.equal(true, inputElement[\"required\"]);\n                assert.equal(null, inputElement[\"ariaRequired\"]);\n\n              case 7:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x18) {\n        return _ref19.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/power-select-field/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/ember-power-select\", \"dummy/tests/helpers/string-helper-methods\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberPowerSelect, _stringHelperMethods, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/power select field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('#TEST1 (default-field): Check if the field renders and value is updated in the model', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(6);\n                createField.dropdown(this, {\n                  hint: 'current_residance'\n                });\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), \"Check if the component is rendered\");\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residance', 'Hint for the field renders properly');\n                _context.next = 8;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n              case 8:\n                assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[0].outerText, \"Kerala\", \"Check options are listed correctly\");\n                assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[1].outerText, \"Tamil Nadu\", \"Check options are listed correctly\");\n                assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[2].outerText, \"Karnataka\", \"Check options are listed correctly\");\n                /* Select second choices */\n\n                _context.next = 13;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 40);\n\n              case 13:\n                _context.next = 15;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n              case 15:\n                assert.equal(Ember.get(this, 'model.states'), \"tamil_nadu_id\", \"Check if selected optionValuePath is updated in the model\");\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 (custom-field): Check if the field renders and value is updated in the model', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this = this;\n\n        var model;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(7);\n                createField.dropdown(this, {\n                  custom: true,\n                  hint: 'current_residance'\n                });\n                model = {\n                  customField: {}\n                };\n                Ember.set(this, 'model', model);\n                _context3.next = 6;\n                return createField.renderForm(this);\n\n              case 6:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          assert.ok((0, _emberNativeDomHelpers.find)('.ember-power-select-trigger'), \"Check if the component is rendered\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residance', 'Hint for the field renders properly');\n                          _context2.next = 4;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 4:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[0].outerText, \"Kerala\", \"Check options are listed correctly\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[1].outerText, \"Tamil Nadu\", \"Check options are listed correctly\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('ul li')[2].outerText, \"Karnataka\", \"Check options are listed correctly\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?current_residance', 'Hint for the field renders properly');\n                          /* Select second choices */\n\n                          _context2.next = 10;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 40);\n\n                        case 10:\n                          _context2.next = 12;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 12:\n                          assert.equal(Ember.get(_this, 'model.customField.states'), \"tamil_nadu_id\", \"Check if selected optionValuePath is updated in the model\");\n\n                        case 13:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 (edit-scenario && default-field): Check if the field renders with value', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                createField.dropdown(this);\n                Ember.set(this, 'model.states', 'tamil_nadu_id');\n                _context5.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context5.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n                  return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), \"Tamil Nadu\");\n\n                        case 1:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST4 (edit-scenario && custom-field): Check if the field renders with value', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var model;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(1);\n                createField.dropdown(this, {\n                  custom: true\n                });\n                model = {\n                  customField: {\n                    'states': 'tamil_nadu_id'\n                  }\n                };\n                Ember.set(this, 'model', model);\n                _context7.next = 6;\n                return createField.renderForm(this);\n\n              case 6:\n                return _context7.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n                  return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), \"Tamil Nadu\");\n\n                        case 1:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }))));\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x4) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST5 : allowClear Meta is enabled should be able to clear selected option', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(2);\n                createField.dropdown(this, {\n                  fieldOptions: {\n                    allowClear: true\n                  }\n                });\n                _context9.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context9.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n                  return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          _context8.next = 2;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 2:\n                          _context8.next = 4;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 4:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), \"Kerala\", \"Check selected value appears in DOM\");\n                          _context8.next = 7;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('.ember-power-select-clear-btn'));\n\n                        case 7:\n                          assert.notOk((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item'), \"Check the previous value is removed from DOM\");\n\n                        case 8:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x5) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST6 : checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(2);\n                createField.dropdown(this, {\n                  fieldOptions: {\n                    minOptionsToEnableSearch: 2\n                  }\n                });\n                _context11.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context11.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                  return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          _context10.next = 2;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');\n                          _context10.next = 5;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 5:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), \"Kerala\", \"Check selected value appears in DOM\");\n\n                        case 6:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x6) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST7 : checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(2);\n                createField.dropdown(this, {\n                  fieldOptions: {\n                    minOptionsToEnableSearch: 4\n                  }\n                });\n                _context13.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context13.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {\n                  return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          _context12.next = 2;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 0, 'search is disabled');\n                          _context12.next = 5;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 5:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), \"Kerala\", \"Check selected value appears in DOM\");\n\n                        case 6:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x7) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST8 : checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                assert.expect(2);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    minOptionsToEnableSearch: 4\n                  });\n                });\n                createField.dropdown(this, {});\n                _context15.next = 7;\n                return createField.renderForm(this);\n\n              case 7:\n                return _context15.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {\n                  return regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          _context14.next = 2;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 0, 'search is disabled');\n                          _context14.next = 5;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 5:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), \"Kerala\", \"Check selected value appears in DOM\");\n                          Ember.run(function () {\n                            formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                          });\n\n                        case 7:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      return function (_x8) {\n        return _ref14.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST9 : checking whether search is enabled/diabled when \\'minOptionsToEnableSearch\\' is passed through fieldOptions', /*#__PURE__*/function () {\n      var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(assert) {\n        var formConfig, dependentSelectConfig;\n        return regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                assert.expect(2);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                dependentSelectConfig = Ember.get(formConfig, 'dependentSelectDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('dependentSelectDefaultConfig', {\n                    minOptionsToEnableSearch: 2\n                  });\n                });\n                createField.dropdown(this, {});\n                _context17.next = 7;\n                return createField.renderForm(this);\n\n              case 7:\n                return _context17.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {\n                  return regeneratorRuntime.wrap(function _callee16$(_context16) {\n                    while (1) {\n                      switch (_context16.prev = _context16.next) {\n                        case 0:\n                          _context16.next = 2;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 2:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ember-power-select-search-input')['length'], 1, 'search is enabled');\n                          _context16.next = 5;\n                          return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"States\"] .ember-power-select-trigger'), 13);\n\n                        case 5:\n                          assert.equal((0, _emberNativeDomHelpers.find)('span.ember-power-select-selected-item').innerText.trim(), \"Kerala\", \"Check selected value appears in DOM\");\n                          Ember.run(function () {\n                            formConfig.set('dependentSelectDefaultConfig', dependentSelectConfig);\n                          });\n\n                        case 7:\n                        case \"end\":\n                          return _context16.stop();\n                      }\n                    }\n                  }, _callee16);\n                }))));\n\n              case 8:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      return function (_x9) {\n        return _ref16.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the dropdown component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"Բարեւ Ձեզ\";\n                createField.dropdown(this, {\n                  label: sampleLabel\n                });\n                _context18.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      return function (_x10) {\n        return _ref18.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/radio-field/component-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | form fields/radio field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n  });\n});","define(\"dummy/tests/integration/components/form-fields/radio-group/component-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | form fields/radio group', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n  });\n});","define(\"dummy/tests/integration/components/form-fields/radio-group/custom/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/radio group | custom | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"#TEST1 Check the component renders as custom field, optionLabelPath='value'\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(5);\n                createField.radioGroup(this, {\n                  custom: true\n                });\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  var options;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          options = (0, _emberNativeDomHelpers.findAll)(\"label\");\n                          assert.equal(options.length, 4, \"Check 3 options are displayed\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), \"Red\", \"First Option is 'Red'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), \"Green\", \"Second Option is 'Green'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), \"Blue\", \"Third Option is 'Blue'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?most_favourite_color', 'Hint for the field renders properly');\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 Check the component renders as custom field, optionLabelPath='hexValue'\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(4);\n                createField.radioGroup(this, {\n                  custom: true,\n                  optionLabelPath: 'hexValue'\n                });\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  var options;\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          options = (0, _emberNativeDomHelpers.findAll)(\"label\");\n                          assert.equal(options.length, 4, \"Check 3 options are displayed\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), \"#FF0000\", \"First Option is 'Red'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), \"#00FF00\", \"Second Option is 'Green'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), \"#0000FF\", \"Third Option is 'Blue'\");\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 Check options are updated on model, optionValuePath='value'\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                createField.radioGroup(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context6.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[2]);\n\n                        case 2:\n                          assert.equal(_this.model.customField.colors, \"Blue\", \"'Blue' option is selected\");\n                          _context5.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[0]);\n\n                        case 5:\n                          assert.equal(_this.model.customField.colors, \"Red\", \"'Red' option is selected\");\n\n                        case 6:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 Check options are updated on model, optionValuePath='hexValue'\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                createField.radioGroup(this, {\n                  custom: true,\n                  optionValuePath: 'hexValue'\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context8.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context8.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[1]);\n\n                        case 2:\n                          assert.equal(_this2.model.customField.colors, \"#00FF00\", \"'Green' option is selected\");\n                          _context7.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[2]);\n\n                        case 5:\n                          assert.equal(_this2.model.customField.colors, \"#0000FF\", \"'Blue' option is selected\");\n\n                        case 6:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 Check options are updated on model, optionValuePath=''\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                createField.radioGroup(this, {\n                  custom: true,\n                  optionValuePath: ''\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context10.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[1]);\n\n                        case 2:\n                          assert.deepEqual(_this3.model.customField.colors, {\n                            id: \"green_id\",\n                            value: \"Green\",\n                            hexValue: \"#00FF00\",\n                            position: 2,\n                            parentChoiceIds: null\n                          }, \"'Green' option is selected\");\n                          _context9.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[0]);\n\n                        case 5:\n                          assert.deepEqual(_this3.model.customField.colors, {\n                            id: \"red_id\",\n                            value: \"Red\",\n                            hexValue: \"#FF0000\",\n                            position: 1,\n                            parentChoiceIds: null\n                          }, \"'Red' option is selected\");\n\n                        case 6:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/radio-group/custom/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/radio group | custom | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"#TEST1 Check the component renders as custom field with prepopulated data, optionValuePath='value'\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n                createField.radioGroup(this, {\n                  custom: true,\n                  optionValuePath: 'value'\n                });\n                this.model = {\n                  customField: {\n                    colors: \"Red\"\n                  }\n                };\n                _context2.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[0]['attributes']['paramvalue'].value, \"Red\", \"Check Option 'Red' is selected\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[1]['attributes']['paramvalue'].value, \"Red\", \"Check Option 'Red' is selected\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[2]['attributes']['paramvalue'].value, \"Red\", \"Check Option 'Red' is selected\");\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 Check the component renders as custom field with prepopulated data, optionValuePath='id'\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(3);\n                createField.radioGroup(this, {\n                  custom: true,\n                  optionValuePath: 'id'\n                });\n                this.model = {\n                  customField: {\n                    colors: \"blue_id\"\n                  }\n                };\n                _context4.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[0]['attributes']['paramvalue'].value, \"blue_id\", \"Check Option 'Blue' is selected\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[1]['attributes']['paramvalue'].value, \"blue_id\", \"Check Option 'Blue' is selected\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[2]['attributes']['paramvalue'].value, \"blue_id\", \"Check Option 'Blue' is selected\");\n\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 Check the component renders as custom field with prepopulated data, optionValuePath=''\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                createField.radioGroup(this, {\n                  custom: true,\n                  optionValuePath: ''\n                });\n                this.model = {\n                  colors: {\n                    id: \"green_id\",\n                    value: \"Green\",\n                    hexValue: \"#00FF00\",\n                    position: 2,\n                    parentChoiceIds: null\n                  }\n                };\n                _context6.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.ok(true, \"To be fixed, Refer [FSERV-259]\");\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/radio-group/default/create/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/radio group | default | create', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"#TEST1 Check the component renders as default field, optionLabelPath='value'\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(5);\n                createField.radioGroup(this);\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  var options;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          options = (0, _emberNativeDomHelpers.findAll)(\"label\");\n                          assert.equal(options.length, 4, \"Check 3 options are displayed\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), \"Red\", \"First Option is 'Red'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), \"Green\", \"Second Option is 'Green'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), \"Blue\", \"Third Option is 'Blue'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?most_favourite_color', 'Hint for the field renders properly');\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 Check the component renders as default field, optionLabelPath='hexValue'\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(4);\n                createField.radioGroup(this, {\n                  optionLabelPath: 'hexValue'\n                });\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  var options;\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          options = (0, _emberNativeDomHelpers.findAll)(\"label\");\n                          assert.equal(options.length, 4, \"Check 3 options are displayed\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[1].outerText), \"#FF0000\", \"First Option is 'Red'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[2].outerText), \"#00FF00\", \"Second Option is 'Green'\");\n                          assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(options[3].outerText), \"#0000FF\", \"Third Option is 'Blue'\");\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 Check options are updated on model, optionValuePath='value'\", /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(2);\n                createField.radioGroup(this);\n                _context6.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[0]);\n\n                        case 2:\n                          assert.equal(_this.model.colors, \"Red\", \"'Red' option is selected\");\n                          _context5.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[2]);\n\n                        case 5:\n                          assert.equal(_this.model.colors, \"Blue\", \"'Blue' option is selected\");\n\n                        case 6:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST4 Check options are updated on model, optionValuePath='hexValue'\", /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(2);\n                createField.radioGroup(this, {\n                  optionValuePath: 'hexValue'\n                });\n                _context8.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context8.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                  return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[1]);\n\n                        case 2:\n                          assert.equal(_this2.model.colors, \"#00FF00\", \"'Green' option is selected\");\n                          _context7.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[0]);\n\n                        case 5:\n                          assert.equal(_this2.model.colors, \"#FF0000\", \"'Red' option is selected\");\n\n                        case 6:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST5 Check options are updated on model, optionValuePath=''\", /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(2);\n                createField.radioGroup(this, {\n                  optionValuePath: ''\n                });\n                _context10.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                return _context10.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                  return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[1]);\n\n                        case 2:\n                          assert.deepEqual(_this3.model.colors, {\n                            id: \"green_id\",\n                            value: \"Green\",\n                            hexValue: \"#00FF00\",\n                            position: 2,\n                            parentChoiceIds: null\n                          }, \"'Green' option is selected\");\n                          _context9.next = 5;\n                          return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)(\"input[type=radio\")[2]);\n\n                        case 5:\n                          assert.deepEqual(_this3.model.colors, {\n                            id: \"blue_id\",\n                            value: \"Blue\",\n                            hexValue: \"#0000FF\",\n                            position: 3,\n                            parentChoiceIds: null\n                          }, \"'Blue' option is selected\");\n\n                        case 6:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }))));\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x5) {\n        return _ref9.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the radioGroup component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"Բարեւ Ձեզ\";\n                createField.radioGroup(this, {\n                  label: sampleLabel\n                });\n                _context11.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x6) {\n        return _ref11.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/radio-group/default/edit/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, _testHelpers, createField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/radio group | default | edit', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)(\"#TEST1 Check the component renders as default field with prepopulated data, optionValuePath='value'\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(3);\n                createField.radioGroup(this, {\n                  optionValuePath: 'value'\n                });\n                this.model = {\n                  colors: \"Red\"\n                };\n                _context.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[0]['attributes']['paramvalue'].value, \"Red\", \"Check Option 'Red' is selected\");\n                  assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[1]['attributes']['paramvalue'].value, \"Red\", \"Check Option 'Red' is selected\");\n                  assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[2]['attributes']['paramvalue'].value, \"Red\", \"Check Option 'Red' is selected\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST2 Check the component renders as default field with prepopulated data, optionValuePath='id'\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(3);\n                createField.radioGroup(this, {\n                  optionValuePath: 'id'\n                });\n                this.model = {\n                  colors: \"blue_id\"\n                };\n                _context2.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[0]['attributes']['paramvalue'].value, \"blue_id\", \"Check Option 'Blue' is selected\");\n                  assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[1]['attributes']['paramvalue'].value, \"blue_id\", \"Check Option 'Blue' is selected\");\n                  assert.equal((0, _emberNativeDomHelpers.findAll)(\"[type=radio]\")[2]['attributes']['paramvalue'].value, \"blue_id\", \"Check Option 'Blue' is selected\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)(\"#TEST3 Check the component renders as default field with prepopulated data, optionValuePath=''\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                createField.radioGroup(this, {\n                  optionValuePath: ''\n                });\n                this.model = {\n                  colors: {\n                    id: \"green_id\",\n                    value: \"Green\",\n                    hexValue: \"#00FF00\",\n                    position: 2,\n                    parentChoiceIds: null\n                  }\n                };\n                _context3.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                return _context3.abrupt(\"return\", (0, _testHelpers.settled)().then(function () {\n                  assert.ok(true, \"To be fixed, Refer [FSERV-259]\");\n                }));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/select-field/component-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | form fields/select field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n  });\n});","define(\"dummy/tests/integration/components/form-fields/static-rich-text-field/component-test\", [\"ember-qunit\", \"@ember/test-helpers\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\"], function (_emberQunit, _testHelpers, _emberNativeDomHelpers, _createField) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _emberQunit.module)('Integration | Component | form fields/static rich text field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _emberQunit.test)('#TEST1 check if the static rich text field renders the html headers and paragraph properly', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(8);\n\n                _createField.default.staticRichText(this, {\n                  label: \"<h1 class=\\\"header1\\\">Freshworks</h1><h2 class=\\\"header2\\\">Formserv</h2><h3 class=\\\"header3\\\">Guidelines</h3><h4 class=\\\"header4\\\">header4</h4><h5 class=\\\"header5\\\">header5</h5><h6 class=\\\"header6\\\">header6</h6><p class=\\\"paragraph\\\">Please refer <a href=\\\"https://www.example.com\\\" class=\\\"anchor\\\">this</a> link.</p> <ol class=\\\"orderd\\\"><li>Coffee</li><li>Tea</li><li>Milk</li></ol>\"\n                });\n\n                this.model = {};\n                _context2.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context2.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header1')[0][\"innerText\"], \"Freshworks\", 'header1 renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header2')[0][\"innerText\"], \"Formserv\", 'header2 renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header3')[0][\"innerText\"], \"Guidelines\", 'header3 renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header4')[0][\"innerText\"], \"header4\", 'header4 renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header5')[0][\"innerText\"], \"header5\", 'header5 renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.header6')[0][\"innerText\"], \"header6\", 'header6 renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.paragraph')[0][\"innerText\"], \"Please refer this link.\", 'paragraph renders properly');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.anchor')[0][\"href\"], \"https://www.example.com/\", 'anchor link renders properly');\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _emberQunit.test)('#TEST2 check if the static rich text field renders the ordered list properly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(4);\n\n                _createField.default.staticRichText(this, {\n                  label: \"<ol class=\\\"ordered_list\\\"><li>Coffee</li><li>Tea</li><li>Milk</li></ol>\"\n                });\n\n                this.model = {};\n                _context4.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context4.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0][\"childElementCount\"], 3, 'orderd list contains 3 child nodes');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0][\"children\"][0][\"textContent\"], \"Coffee\", \"orderd list first element\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0][\"children\"][1][\"textContent\"], \"Tea\", \"orderd list second element\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.ordered_list')[0][\"children\"][2][\"textContent\"], \"Milk\", \"orderd list third element\");\n\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _emberQunit.test)('#TEST3 check if the static rich text field renders the unordered list properly', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(5);\n\n                _createField.default.staticRichText(this, {\n                  label: \"<hr class=\\\"horizontal_rule\\\"><ul class=\\\"unordered_list\\\"><li>Coffee</li><li>Tea</li><li>Milk</li></ul>\"\n                });\n\n                this.model = {};\n                _context6.next = 5;\n                return _createField.default.renderForm(this);\n\n              case 5:\n                return _context6.abrupt(\"return\", (0, _testHelpers.settled)().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n                  return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.horizontal_rule').length, 1, 'A horizontal line break');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0][\"childElementCount\"], 3, 'unorderd list contains 3 child nodes');\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0][\"children\"][0][\"textContent\"], \"Coffee\", \"unorderd list first element\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0][\"children\"][1][\"textContent\"], \"Tea\", \"unorderd list second element\");\n                          assert.equal((0, _emberNativeDomHelpers.findAll)('.unordered_list')[0][\"children\"][2][\"textContent\"], \"Milk\", \"unorderd list third element\");\n\n                        case 5:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }))));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-fields/text-field/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/text field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Check the text component renders hint as default field', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                createField.text(this);\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_in_captial_letters', 'Hint for the field renders properly');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check the text component renders hint as custom field', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.text(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?enter_in_captial_letters', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check the text component renders hint with set symbol as parameter', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var formConfig, tooltipConfig;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                tooltipConfig = Ember.get(formConfig, 'tooltipDefaultConfig');\n                Ember.run(function () {\n                  formConfig.set('tooltipDefaultConfig', {\n                    symbol: '(i)',\n                    componentName: ''\n                  });\n                });\n                createField.text(this);\n                _context3.next = 7;\n                return createField.renderForm(this);\n\n              case 7:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '(i)enter_in_captial_letters', 'Hint for the field renders properly');\n                Ember.run(function () {\n                  formConfig.set('tooltipDefaultConfig', tooltipConfig);\n                });\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check if text component does not render hint when it is empty', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                createField.text(this, {\n                  hint: ''\n                });\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '', 'Hint does not render when empty');\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check the text component renders hint with dynamic component when component name is set as parameter', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var _this = this;\n\n        var formConfig, tooltipConfig;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                this.owner.register('component:custom-tooltip', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"8z2q2G+7\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"my_tooltip\\\"],[7],[0,\\\" This_is_custom_tooltip\\\"],[8]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                formConfig = this.owner.lookup('service:dynamic-form/config');\n                tooltipConfig = Ember.copy(Ember.get(formConfig, 'tooltipDefaultConfig'), true);\n                Ember.run(function () {\n                  formConfig.set('tooltipDefaultConfig', {\n                    symbol: '?',\n                    componentName: 'custom-tooltip'\n                  });\n                });\n                createField.text(this);\n                _context5.next = 8;\n                return createField.renderForm(this);\n\n              case 8:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('div.my_tooltip').text()), 'This_is_custom_tooltip', 'Hint for the field renders properly');\n                Ember.run(function () {\n                  formConfig.set('tooltipDefaultConfig', tooltipConfig);\n\n                  _this.owner.unregister('component:custom-tooltip');\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the text component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"여보세요\";\n                createField.text(this, {\n                  label: sampleLabel\n                });\n                _context6.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check if the text component follows accessibility features related to required attribute', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        var inputElement;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(2);\n                createField.text(this, {\n                  required: true\n                });\n                _context7.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];\n                assert.equal(true, inputElement[\"required\"]);\n                assert.equal(null, inputElement[\"ariaRequired\"]);\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/textarea-field/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/textarea field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Check the textarea component renders hint as default field', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                createField.textarea(this);\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?movie_review', 'Hint for the field renders properly');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check the textarea component renders hint as custom field', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.textarea(this, {\n                  custom: true\n                });\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?movie_review', 'Hint for the field renders properly');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the textarea component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"مرحبا\";\n                createField.textarea(this, {\n                  label: sampleLabel\n                });\n                _context3.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check if the textarea component follows accessibility features related to required attribute', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var inputElement;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n                createField.textarea(this, {\n                  required: true\n                });\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('textarea')[0];\n                assert.equal(true, inputElement[\"required\"]);\n                assert.equal(null, inputElement[\"ariaRequired\"]);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-fields/url-field/component-test\", [\"qunit\", \"ember-qunit\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/create-field\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _emberNativeDomHelpers, createField, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form fields/url field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Check the url component renders hint as default field', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                createField.url(this);\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?valid_url', 'Hint for the field renders properly');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check the url component renders hint as custom field', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                _context2.next = 3;\n                return createField.url(this, {\n                  custom: true\n                });\n\n              case 3:\n                this.model = {\n                  customField: {}\n                };\n                _context2.next = 6;\n                return createField.renderForm(this);\n\n              case 6:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?valid_url', 'Hint for the field renders properly');\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests begins here -----------------\n\n    (0, _qunit.test)('Check if the url component follows accessibility features related to label attribute', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var sampleLabel, inputElement;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                sampleLabel = \"مرحبا\";\n                createField.url(this, {\n                  label: sampleLabel\n                });\n                _context3.next = 5;\n                return createField.renderForm(this);\n\n              case 5:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('label')[0]; // Label must be present when provided and I18n label text is supported\n\n                assert.equal(sampleLabel, inputElement[\"innerText\"].trim());\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Check if the url component follows accessibility features related to required attribute', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var inputElement;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(2);\n                createField.url(this, {\n                  required: true\n                });\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                inputElement = (0, _emberNativeDomHelpers.findAll)('input')[0];\n                assert.equal(true, inputElement[\"required\"]);\n                assert.equal(null, inputElement[\"ariaRequired\"]);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()); // ------------ accessibility features related tests ends here -----------------\n  });\n});","define(\"dummy/tests/integration/components/form-for/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | form for', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"WLDLOIcf\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"form-for\\\"],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 2:\n                assert.equal(this.$().text().trim(), ''); // Template block usage:\n\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"qAPa2/le\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"form-for\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 5:\n                assert.equal(this.$().text().trim(), 'template block text');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/components/form-hint/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"dummy/tests/helpers/field-map\", \"dummy/tests/helpers/string-helper-methods\"], function (_qunit, _emberQunit, _testHelpers, _fieldMap, _stringHelperMethods) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('form-hint', 'Integration | Component | form hint', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('Render custom hint component depending on fieldNameToHintComponentMap', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var _this = this;\n\n        var fieldTypeMap, fieldType, fieldInputType;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(18);\n                this.owner.register('component:custom-tooltip', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"wpQ1P2uR\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"my_tooltip\\\"],[7],[0,\\\"This_is_custom_tooltip\\\"],[8]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema\n\n                delete fieldTypeMap.dependent_dropdown;\n                delete fieldTypeMap.group_field;\n                delete fieldTypeMap.static_rich_text;\n                delete fieldTypeMap.formula;\n                _context.t0 = regeneratorRuntime.keys(fieldTypeMap);\n\n              case 8:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 17;\n                  break;\n                }\n\n                fieldType = _context.t1.value;\n                fieldInputType = fieldTypeMap[fieldType]['single'];\n                Ember.setProperties(this, {\n                  model: {},\n                  schema: {\n                    fields: [{\n                      id: 1,\n                      type: fieldType,\n                      label: 'Sample',\n                      name: 'sample_name',\n                      position: 1,\n                      inputType: fieldInputType,\n                      hint: 'sample_hint',\n                      fields: []\n                    }]\n                  },\n                  fieldNameToHintComponentMap: {\n                    sample_name: 'custom-tooltip'\n                  }\n                });\n                _context.next = 14;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"lldXsPfT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldNameToHintComponentMap\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"fieldNameToHintComponentMap\\\"]]]],{\\\"statements\\\":[[0,\\\"          \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"      \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 14:\n                assert.equal(Ember.$('div.my_tooltip').text(), 'This_is_custom_tooltip', 'Hint for the field renders properly');\n                _context.next = 8;\n                break;\n\n              case 17:\n                Ember.run(function () {\n                  _this.owner.unregister('component:custom-tooltip');\n                });\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Render default hint component when hint component information is not in fieldNameToHintComponentMap', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var _this2 = this;\n\n        var fieldTypeMap, fieldType, fieldInputType;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(36);\n                this.owner.register('component:custom-tooltip', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"wpQ1P2uR\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"my_tooltip\\\"],[7],[0,\\\"This_is_custom_tooltip\\\"],[8]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema\n\n                delete fieldTypeMap.dependent_dropdown;\n                delete fieldTypeMap.group_field;\n                delete fieldTypeMap.static_rich_text;\n                delete fieldTypeMap.formula;\n                _context2.t0 = regeneratorRuntime.keys(fieldTypeMap);\n\n              case 8:\n                if ((_context2.t1 = _context2.t0()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                fieldType = _context2.t1.value;\n                fieldInputType = fieldTypeMap[fieldType]['single'];\n                Ember.setProperties(this, {\n                  model: {\n                    customField: {}\n                  },\n                  schema: {\n                    fields: [{\n                      id: 1234,\n                      type: fieldType,\n                      label: 'Sample',\n                      name: 'sample_name',\n                      position: 1,\n                      custom: true,\n                      inputType: fieldInputType,\n                      hint: 'sample_hint',\n                      fields: []\n                    }]\n                  },\n                  fieldNameToHintComponentMap: {\n                    sample: 'custom-tooltip'\n                  }\n                });\n                _context2.next = 14;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"lldXsPfT\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\",\\\"fieldNameToHintComponentMap\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]],[20,[\\\"fieldNameToHintComponentMap\\\"]]]],{\\\"statements\\\":[[0,\\\"          \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"      \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 14:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?sample_hint', 'Hint for the field renders properly');\n                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('customField.sample_name_hint'), 'Hint id for the hint component gets populated properly for a custom field');\n                _context2.next = 8;\n                break;\n\n              case 18:\n                Ember.run(function () {\n                  _this2.owner.unregister('component:custom-tooltip');\n                });\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Render default hint component when fieldNameToHintComponentMap is not passed to dynamic-form-for', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var _this3 = this;\n\n        var fieldTypeMap, fieldType, fieldInputType;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(36);\n                this.owner.register('component:custom-tooltip', Ember.Component.extend({\n                  layout: Ember.HTMLBars.template({\n                    \"id\": \"wpQ1P2uR\",\n                    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"my_tooltip\\\"],[7],[0,\\\"This_is_custom_tooltip\\\"],[8]],\\\"hasEval\\\":false}\",\n                    \"meta\": {}\n                  })\n                }));\n                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema\n\n                delete fieldTypeMap.dependent_dropdown;\n                delete fieldTypeMap.group_field;\n                delete fieldTypeMap.static_rich_text;\n                delete fieldTypeMap.formula;\n                _context3.t0 = regeneratorRuntime.keys(fieldTypeMap);\n\n              case 8:\n                if ((_context3.t1 = _context3.t0()).done) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                fieldType = _context3.t1.value;\n                fieldInputType = fieldTypeMap[fieldType]['single'];\n                Ember.setProperties(this, {\n                  model: {},\n                  schema: {\n                    fields: [{\n                      type: fieldType,\n                      label: 'Sample',\n                      name: 'sample_name',\n                      position: 1,\n                      default: true,\n                      inputType: fieldInputType,\n                      hint: 'sample_hint',\n                      fields: []\n                    }]\n                  }\n                });\n                _context3.next = 14;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"rI7ooH6v\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"          \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"      \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 14:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '?sample_hint', 'Hint for the field renders properly');\n                assert.ok(Ember.$('button.formserv-tooltip')[0]['id'].includes('sampleName_hint'), 'Hint id for the hint component gets populated properly for a default field');\n                _context3.next = 8;\n                break;\n\n              case 18:\n                Ember.run(function () {\n                  _this3.owner.unregister('component:custom-tooltip');\n                });\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('Should not render hint component when hint is not given', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var fieldTypeMap, fieldType, fieldInputType;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(18);\n                fieldTypeMap = (0, _fieldMap.default)(); // removing the folowing keys from fieldMap as these field types requires a different field schema\n\n                delete fieldTypeMap.dependent_dropdown;\n                delete fieldTypeMap.group_field;\n                delete fieldTypeMap.static_rich_text;\n                delete fieldTypeMap.formula;\n                _context4.t0 = regeneratorRuntime.keys(fieldTypeMap);\n\n              case 7:\n                if ((_context4.t1 = _context4.t0()).done) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                fieldType = _context4.t1.value;\n                fieldInputType = fieldTypeMap[fieldType]['single'];\n                Ember.setProperties(this, {\n                  model: {},\n                  schema: {\n                    fields: [{\n                      type: fieldType,\n                      label: 'Sample',\n                      name: 'sample_name',\n                      position: 1,\n                      inputType: fieldInputType,\n                      fields: []\n                    }]\n                  }\n                });\n                _context4.next = 13;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"rI7ooH6v\",\n                  \"block\": \"{\\\"symbols\\\":[\\\"f\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"dynamic-form-for\\\",null,[[\\\"model\\\",\\\"schema\\\"],[[20,[\\\"model\\\"]],[20,[\\\"schema\\\"]]]],{\\\"statements\\\":[[0,\\\"          \\\"],[1,[19,1,[\\\"drawForm\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"      \\\"]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 13:\n                assert.equal((0, _stringHelperMethods.getTextWithoutSpaces)(Ember.$('button.formserv-tooltip').text()), '', 'Hint does not get rendered when empty');\n                _context4.next = 7;\n                break;\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/helpers/date-field-format-date-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Helper | date-field-format-date', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('inputValue', '1234');\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template({\n                  \"id\": \"dzyshlP4\",\n                  \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"date-field-format-date\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n                  \"meta\": {}\n                }));\n\n              case 3:\n                assert.equal(this.element.textContent.trim(), '1234');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/metadata/field/structure_related/editable/editable-test\", [\"qunit\", \"ember-qunit\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | editable', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)('#TEST1 : auto-complete : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                createField.autoComplete(this, {\n                  editable: false\n                });\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 : date-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.date(this, {\n                  editable: false\n                });\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 : date-field-split-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                createField.dateTimeSplit(this, {\n                  editable: false\n                });\n                _context3.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST4 : email-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                createField.email(this, {\n                  editable: false\n                });\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST5 : number-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this, {\n                  editable: false\n                });\n                _context5.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST6 : text-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                createField.text(this, {\n                  editable: false\n                });\n                _context6.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST7 : textarea-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(1);\n                createField.textarea(this, {\n                  editable: false\n                });\n                _context7.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('textarea')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST8 : url-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n                createField.url(this, {\n                  editable: false\n                });\n                _context8.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(1);\n                createField.dependentDropdown(this, {\n                  editable: false\n                });\n                _context9.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST10 : group-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(1);\n                createField.group(this, {\n                  editable: false\n                });\n                _context10.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok(true, \"To Checked with Mithun on what is the expected behaviour\");\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(1);\n                createField.multiSelectDropdown(this, {\n                  editable: false\n                });\n                _context11.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST12 : checkbox-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(1);\n                createField.checkbox(this, {\n                  editable: false\n                });\n                _context12.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('input')['disabled'], \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST13 : power-select-field : Check field is disabled when editable is set to false', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(1);\n                createField.dropdown(this, {\n                  editable: false\n                });\n                _context13.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.ok((0, _emberNativeDomHelpers.find)('[aria-disabled=true]'), \"Check field is disabled\");\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/metadata/field/structure_related/label/label-test\", [\"qunit\", \"ember-qunit\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers, _emberPowerSelect) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | label', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)('#TEST1 : auto-complete : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                createField.autoComplete(this);\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Area Code', \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 : date-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.date(this);\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Date of Birth', \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 : date-field-split-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                createField.dateTimeSplit(this);\n                _context3.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Date And Time of Birth', \"Check label is rendered in DOM for date-field\");\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST4 : email-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                createField.email(this);\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Email Address', \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST5 : number-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this);\n                _context5.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), \"Net Income\", \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST6 : text-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                createField.text(this);\n                _context6.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'First Name', \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST7 : textarea-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(1);\n                createField.textarea(this);\n                _context7.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Your review', \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST8 : url-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n                createField.url(this);\n                _context8.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'URL to validate', \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(2);\n                createField.dependentDropdown(this);\n                _context9.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), 'Country', \"Check label is rendered in DOM\");\n                _context9.next = 7;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"country\"] .ember-power-select-trigger'));\n\n              case 7:\n                _context9.next = 9;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"country\"] .ember-power-select-trigger'), 40);\n\n              case 9:\n                _context9.next = 11;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"country\"] .ember-power-select-trigger'), 13);\n\n              case 11:\n                //  Press Enter\n                assert.equal((0, _emberNativeDomHelpers.findAll)('label')[1].innerText.trim(), 'States', \"Check label is rendered in DOM\");\n\n              case 12:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST10 : group-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(1);\n                createField.group(this);\n                _context10.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), \"Email Address\", \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(1);\n                createField.multiSelectDropdown(this);\n                _context11.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), \"Known Programming Langugages\", \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST12 : checkbox-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(1);\n                createField.checkbox(this);\n                _context12.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), \"Male ?\", \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST13 : power-select-field : Check label is rendered correctly', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(1);\n                createField.dropdown(this);\n                _context13.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('label').innerText.trim(), \"Indian states\", \"Check label is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/metadata/field/structure_related/placeholder/placeholder-test\", [\"qunit\", \"ember-qunit\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\", \"dummy/tests/helpers/ember-power-select\"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers, _emberPowerSelect) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | placeholder', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)('#TEST1 : auto-complete : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                createField.autoComplete(this);\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), 'Search...', \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 : date-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.date(this);\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], '00/00/0000', \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 : date-field-split-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(2);\n                createField.dateTimeSplit(this);\n                _context3.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], '00/00/0000', \"Check placeholder is rendered in DOM for date-field\");\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '00:00 AM', \"Check placeholder is rendered in DOM for time-field\");\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST4 : email-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                createField.email(this);\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], 'abc@xyz.com', \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST5 : number-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this);\n                _context5.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], \"income in '₹'\", \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST6 : text-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                createField.text(this);\n                _context6.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], 'FirstName', \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST7 : textarea-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(1);\n                createField.textarea(this);\n                _context7.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('textarea')[\"placeholder\"], 'How was the movie', \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST8 : url-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n                createField.url(this);\n                _context8.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], 'http://www.domain.com', \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(2);\n                createField.dependentDropdown(this);\n                _context9.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"country\"] .ember-power-select-placeholder').innerText.trim(), 'Choose a Country', \"Check placeholder is rendered in DOM\");\n                _context9.next = 7;\n                return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"country\"] .ember-power-select-trigger'));\n\n              case 7:\n                _context9.next = 9;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"country\"] .ember-power-select-trigger'), 40);\n\n              case 9:\n                _context9.next = 11;\n                return (0, _emberPowerSelect.triggerKeydown)((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"country\"] .ember-power-select-trigger'), 13);\n\n              case 11:\n                //  Press Enter\n                assert.equal((0, _emberNativeDomHelpers.find)('[data-test-field-name=\"states\"] .ember-power-select-placeholder').innerText.trim(), 'Choose a State', \"Check placeholder is rendered in DOM\");\n\n              case 12:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST10 : group-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(1);\n                createField.group(this);\n                _context10.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                /* Change the assert once the fix from group-field branch pulled in */\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], \"\", \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(1);\n                createField.multiSelectDropdown(this);\n                _context11.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('input')[\"placeholder\"], \"select known programming langugages\", \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST12 : power-select-field : Check placeholder is rendered correctly', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(1);\n                createField.dropdown(this);\n                _context12.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), \"Select State of Residance\", \"Check placeholder is rendered in DOM\");\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/integration/metadata/field/structure_related/required/required-test\", [\"qunit\", \"ember-qunit\", \"dummy/tests/helpers/create-field\", \"ember-native-dom-helpers\"], function (_qunit, _emberQunit, createField, _emberNativeDomHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | required', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {});\n    hooks.afterEach(function () {});\n    (0, _qunit.test)('#TEST1 : auto-complete : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(1);\n                createField.autoComplete(this, {\n                  required: true\n                });\n                _context.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST2 : date-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert.expect(1);\n                createField.date(this, {\n                  required: true\n                });\n                _context2.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST3 : date-field-split-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                assert.expect(1);\n                createField.dateTimeSplit(this, {\n                  required: true\n                });\n                _context3.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST4 : email-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assert.expect(1);\n                createField.email(this, {\n                  required: true\n                });\n                _context4.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST5 : number-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assert.expect(1);\n                createField.number(this, {\n                  required: true\n                });\n                _context5.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST6 : text-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(1);\n                createField.text(this, {\n                  required: true\n                });\n                _context6.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST7 : textarea-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                assert.expect(1);\n                createField.textarea(this, {\n                  required: true\n                });\n                _context7.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST8 : url-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                assert.expect(1);\n                createField.url(this, {\n                  required: true\n                });\n                _context8.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST9 : dependent-dropdown-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                assert.expect(1);\n                createField.dependentDropdown(this, {\n                  required: true\n                });\n                _context9.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST10 : group-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                assert.expect(1);\n                createField.group(this, {\n                  required: true\n                });\n                _context10.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST11 : multi-select-dropdown-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                assert.expect(1);\n                createField.multiSelectDropdown(this, {\n                  required: true\n                });\n                _context11.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function (_x11) {\n        return _ref11.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST12 : checkbox-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {\n        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                assert.expect(1);\n                createField.checkbox(this, {\n                  required: true\n                });\n                _context12.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      return function (_x12) {\n        return _ref12.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('#TEST13 : power-select-field : Check if required attribute is set correctly for field', /*#__PURE__*/function () {\n      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {\n        return regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                assert.expect(1);\n                createField.dropdown(this, {\n                  required: true\n                });\n                _context13.next = 4;\n                return createField.renderForm(this);\n\n              case 4:\n                assert.equal((0, _emberNativeDomHelpers.find)('span').innerText.trim(), '*', \"Check field has '*' next to it\");\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      return function (_x13) {\n        return _ref13.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"dummy/tests/page-object\", [\"exports\", \"ember-cli-page-object/test-support/-private/deprecate\", \"ember-cli-page-object\"], function (_exports, _deprecate, _emberCliPageObject) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"alias\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.alias;\n    }\n  });\n  Object.defineProperty(_exports, \"attribute\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.attribute;\n    }\n  });\n  Object.defineProperty(_exports, \"clickOnText\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.clickOnText;\n    }\n  });\n  Object.defineProperty(_exports, \"clickable\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.clickable;\n    }\n  });\n  Object.defineProperty(_exports, \"collection\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.collection;\n    }\n  });\n  Object.defineProperty(_exports, \"contains\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.contains;\n    }\n  });\n  Object.defineProperty(_exports, \"count\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.count;\n    }\n  });\n  Object.defineProperty(_exports, \"create\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.create;\n    }\n  });\n  Object.defineProperty(_exports, \"fillable\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.fillable;\n    }\n  });\n  Object.defineProperty(_exports, \"selectable\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.fillable;\n    }\n  });\n  Object.defineProperty(_exports, \"focusable\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.focusable;\n    }\n  });\n  Object.defineProperty(_exports, \"hasClass\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.hasClass;\n    }\n  });\n  Object.defineProperty(_exports, \"is\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.is;\n    }\n  });\n  Object.defineProperty(_exports, \"isHidden\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.isHidden;\n    }\n  });\n  Object.defineProperty(_exports, \"isPresent\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.isPresent;\n    }\n  });\n  Object.defineProperty(_exports, \"isVisible\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.isVisible;\n    }\n  });\n  Object.defineProperty(_exports, \"notHasClass\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.notHasClass;\n    }\n  });\n  Object.defineProperty(_exports, \"property\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.property;\n    }\n  });\n  Object.defineProperty(_exports, \"text\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.text;\n    }\n  });\n  Object.defineProperty(_exports, \"triggerable\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.triggerable;\n    }\n  });\n  Object.defineProperty(_exports, \"value\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.value;\n    }\n  });\n  Object.defineProperty(_exports, \"visitable\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.visitable;\n    }\n  });\n  Object.defineProperty(_exports, \"buildSelector\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.buildSelector;\n    }\n  });\n  Object.defineProperty(_exports, \"findElementWithAssert\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.findElementWithAssert;\n    }\n  });\n  Object.defineProperty(_exports, \"findElement\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.findElement;\n    }\n  });\n  Object.defineProperty(_exports, \"getContext\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.getContext;\n    }\n  });\n  Object.defineProperty(_exports, \"fullScope\", {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.fullScope;\n    }\n  });\n  _exports.default = void 0;\n  var _default = {\n    alias: _emberCliPageObject.alias,\n    attribute: _emberCliPageObject.attribute,\n    blurrable: _emberCliPageObject.blurrable,\n    clickOnText: _emberCliPageObject.clickOnText,\n    clickable: _emberCliPageObject.clickable,\n    collection: _emberCliPageObject.collection,\n    contains: _emberCliPageObject.contains,\n    count: _emberCliPageObject.count,\n    create: _emberCliPageObject.create,\n    fillable: _emberCliPageObject.fillable,\n    focusable: _emberCliPageObject.focusable,\n    hasClass: _emberCliPageObject.hasClass,\n    is: _emberCliPageObject.is,\n    isHidden: _emberCliPageObject.isHidden,\n    isPresent: _emberCliPageObject.isPresent,\n    isVisible: _emberCliPageObject.isVisible,\n    notHasClass: _emberCliPageObject.notHasClass,\n    property: _emberCliPageObject.property,\n    selectable: _emberCliPageObject.fillable,\n    text: _emberCliPageObject.text,\n    triggerable: _emberCliPageObject.triggerable,\n    value: _emberCliPageObject.value,\n    visitable: _emberCliPageObject.visitable\n  };\n  _exports.default = _default;\n  (0, _deprecate.default)('import-from-test-support', \"Importing from \\\"test-support\\\" is now deprecated. Please import directly from the \\\"ember-cli-page-object\\\" module instead.\", '1.16.0', '2.0.0');\n});","define(\"dummy/tests/pages/components/dynamic-fields-for\", [\"exports\", \"ember-test-selectors\"], function (_exports, _emberTestSelectors) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var _default = {\n    sectionTitle: (0, _emberTestSelectors.default)('section-header')\n  };\n  _exports.default = _default;\n});","define(\"dummy/tests/pages/components/dynamic-form-for\", [\"exports\", \"ember-test-selectors\"], function (_exports, _emberTestSelectors) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var _default = {\n    nameFieldLabel: \"\".concat((0, _emberTestSelectors.default)('field-name', 'name'), \" label\"),\n    nameFieldInput: \"\".concat((0, _emberTestSelectors.default)('field-name', 'name'), \" input\"),\n    reset: 'button[type=\"reset\"]',\n    submit: 'button[type=\"submit\"]'\n  };\n  _exports.default = _default;\n});","define('dummy/tests/templates.template.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('TemplateLint');\n\n  QUnit.test('dummy/components/add-cc/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/add-cc/template.hbs should pass TemplateLint.\\n\\ndummy/components/add-cc/template.hbs\\n  2:1  error  Incorrect indentation for `<button>` beginning at L2:C1. Expected `<button>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  6:1  error  Incorrect indentation for `{{#if}}` beginning at L6:C1. Expected `{{#if}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n  10:1  error  Incorrect indentation for `{{#if}}` beginning at L10:C1. Expected `{{#if}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n  7:2  error  Incorrect indentation for `{{yield}}` beginning at L7:C2. Expected `{{yield}}` to be at an indentation of 3 but was found at 2.  block-indentation\\n  11:2  error  Incorrect indentation for `<button>` beginning at L11:C2. Expected `<button>` to be at an indentation of 3 but was found at 2.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/code-snippet/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/code-snippet/template.hbs should pass TemplateLint.\\n\\ndummy/components/code-snippet/template.hbs\\n  1:60  error  Usage of triple curly brackets is unsafe  no-triple-curlies\\n  2:0  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  3:0  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n');\n  });\n\n  QUnit.test('dummy/components/field-tooltip/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/components/field-tooltip/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/components/fields/autocomplete-multiple-with-create/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/autocomplete-multiple-with-create/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/autocomplete-multiple-with-create/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/autocomplete-multiple/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/autocomplete-multiple/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/autocomplete-multiple/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/autocomplete-single-with-create/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/autocomplete-single-with-create/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/autocomplete-single-with-create/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/autocomplete-single/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/autocomplete-single/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/autocomplete-single/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/checkbox-field/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/checkbox-field/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/checkbox-field/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/checkbox-group/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/checkbox-group/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/checkbox-group/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/component-renderer/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/component-renderer/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/component-renderer/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/date-field/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/date-field/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/date-field/template.hbs\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/date-range-field/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/date-range-field/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/date-range-field/template.hbs\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/date-time-field/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/date-time-field/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/date-time-field/template.hbs\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/dependent-field-checkbox/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/dependent-field-checkbox/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/dependent-field-checkbox/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/dependent-field-radio/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/dependent-field-radio/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/dependent-field-radio/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/dependent-field-select/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/dependent-field-select/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/dependent-field-select/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/input-field/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/input-field/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/input-field/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/nested-field/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/nested-field/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/nested-field/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/radio-group/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/radio-group/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/radio-group/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/select-multiple/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/select-multiple/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/select-multiple/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/select-single/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/select-single/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/select-single/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/fields/textarea-field/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/fields/textarea-field/template.hbs should pass TemplateLint.\\n\\ndummy/components/fields/textarea-field/template.hbs\\n  11:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  9:6  error  Incorrect indentation for `{{f.drawForm}}` beginning at L9:C6. Expected `{{f.drawForm}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  10:6  error  Incorrect indentation for `{{f.submit}}` beginning at L10:C6. Expected `{{f.submit}}` to be at an indentation of 4 but was found at 6.  block-indentation\\n  11:6  error  Incorrect indentation for `<button>` beginning at L11:C6. Expected `<button>` to be at an indentation of 4 but was found at 6.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/render-component/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/components/render-component/template.hbs should pass TemplateLint.\\n\\ndummy/components/render-component/template.hbs\\n  4:1  error  Incorrect indentation for `{{yield}}` beginning at L4:C1. Expected `{{yield}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/components/sample-form/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/components/sample-form/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/components/suggestion-button/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/components/suggestion-button/template.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/add-cc.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/add-cc.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/autocomplete-multiple-with-create.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/autocomplete-multiple-with-create.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/autocomplete-multiple.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/autocomplete-multiple.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/autocomplete-single-with-create.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/autocomplete-single-with-create.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/autocomplete-single.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/autocomplete-single.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/checkbox-field.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/checkbox-field.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/checkbox-group.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/checkbox-group.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/date-field.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/date-field.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/date-range-field.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/date-range-field.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/date-time-field.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/date-time-field.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/dependent-field-checkbox.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/dependent-field-checkbox.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/dependent-field-radio.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/dependent-field-radio.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/dependent-field-select.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/dependent-field-select.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/form.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/form.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/templates/docs/index.hbs should pass TemplateLint.\\n\\ndummy/templates/docs/index.hbs\\n  21:3  error  links with target=\"_blank\" must have rel=\"noopener noreferrer\" or rel=\"noreferrer noopener\"  link-rel-noopener\\n  2:1  error  Incorrect indentation for `<p>` beginning at L2:C1. Expected `<p>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  3:1  error  Incorrect indentation for `<br>` beginning at L3:C1. Expected `<br>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  4:1  error  Incorrect indentation for `<h2>` beginning at L4:C1. Expected `<h2>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  5:1  error  Incorrect indentation for `<p>` beginning at L5:C1. Expected `<p>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  6:1  error  Incorrect indentation for `<br>` beginning at L6:C1. Expected `<br>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  7:1  error  Incorrect indentation for `<h2>` beginning at L7:C1. Expected `<h2>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  8:1  error  Incorrect indentation for `<ul>` beginning at L8:C1. Expected `<ul>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  12:1  error  Incorrect indentation for `<h2>` beginning at L12:C1. Expected `<h2>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  13:1  error  Incorrect indentation for `<ul>` beginning at L13:C1. Expected `<ul>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  17:1  error  Incorrect indentation for `<br>` beginning at L17:C1. Expected `<br>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  18:1  error  Incorrect indentation for `<h2>` beginning at L18:C1. Expected `<h2>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  19:1  error  Incorrect indentation for `<ul>` beginning at L19:C1. Expected `<ul>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  26:1  error  Incorrect indentation for `<br>` beginning at L26:C1. Expected `<br>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  27:1  error  Incorrect indentation for `<h2>` beginning at L27:C1. Expected `<h2>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  28:1  error  Incorrect indentation for `{{docs-snippet}}` beginning at L28:C1. Expected `{{docs-snippet}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n  29:1  error  Incorrect indentation for `<h2>` beginning at L29:C1. Expected `<h2>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  30:1  error  Incorrect indentation for `{{docs-snippet}}` beginning at L30:C1. Expected `{{docs-snippet}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n  9:2  error  Incorrect indentation for `<li>` beginning at L9:C2. Expected `<li>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  10:2  error  Incorrect indentation for `<li>` beginning at L10:C2. Expected `<li>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  14:2  error  Incorrect indentation for `<li>` beginning at L14:C2. Expected `<li>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  15:2  error  Incorrect indentation for `<li>` beginning at L15:C2. Expected `<li>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  20:2  error  Incorrect indentation for `<li>` beginning at L20:C2. Expected `<li>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  21:3  error  Incorrect indentation for `<a>` beginning at L21:C3. Expected `<a>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  22:4  error  Incorrect indentation for `Ways of rendering complex forms & other common form use cases (will be moved to addon soon)\\n\\t\\t\\t` beginning at L22:C4. Expected `Ways of rendering complex forms & other common form use cases (will be moved to addon soon)\\n\\t\\t\\t` to be at an indentation of 5 but was found at 4.  block-indentation\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/input-field.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/input-field.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/nested-field.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/nested-field.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/radio-group.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/radio-group.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/select-multiple.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/select-multiple.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/select-single.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/select-single.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/docs/textarea-field.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs/textarea-field.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n\n  QUnit.test('dummy/templates/not-found.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'dummy/templates/not-found.hbs should pass TemplateLint.\\n\\ndummy/templates/not-found.hbs\\n  2:5  error  elements cannot have inline styles  no-inline-styles\\n');\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/create-auto-complete-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-auto-complete-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-checkbox-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-checkbox-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-checkbox-group-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-checkbox-group-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-date-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-date-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-date-time-split-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-date-time-split-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-dependent-dropdown-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-dependent-dropdown-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-email-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-email-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-formula-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-formula-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-group-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-group-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-multi-select-dropdown-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-multi-select-dropdown-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-number-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-number-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-power-select-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-power-select-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-radio-group-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-radio-group-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-static-rich-text-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-static-rich-text-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-text-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-text-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-textarea-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-textarea-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/create-url-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/create-url-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/field-map.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/field-map.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/render-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/render-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/string-helper-methods.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/string-helper-methods.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/dependent-dropdown/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dependent-dropdown/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/dynamic-fields-for/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dynamic-fields-for/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/dynamic-form-for/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dynamic-form-for/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/fields-for/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/fields-for/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/auto-complete-multiple-with-create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/auto-complete-multiple-with-create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/auto-complete/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/auto-complete/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/date-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/date-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/date-range-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/date-range-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/date-time-split/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/date-time-split/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/dependent-selects/power-select/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/dependent-selects/power-select/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/multi-select-dropdown/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/multi-select-dropdown/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/power-select/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/power-select/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-controls/time-picker-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-controls/time-picker-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-errors/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-errors/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-create/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-create/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-create/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete-with-multiple-no-create/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/auto-complete/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/auto-complete/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/allowClear/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/allowClear/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/custom/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/custom/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/default/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/hasDefaultChoices/default/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/auto-complete/fieldOptions/minSearchCharLength/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/auto-complete/fieldOptions/minSearchCharLength/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-field/Custom/Create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-field/Custom/Create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-field/Custom/Edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-field/Custom/Edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-field/Default/Create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-field/Default/Create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-field/Default/Edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-field/Default/Edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-group/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-group/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-group/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-group/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-group/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-group/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-group/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-group/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/checkbox-group/option/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/checkbox-group/option/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/date-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/date-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/date-range-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/date-range-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/date-time-split-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/date-time-split-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/dependent-dropdown-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/dependent-dropdown-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/dependent-select/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/dependent-select/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/dependent-selects/checkbox-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/dependent-selects/checkbox-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/dependent-selects/power-select-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/dependent-selects/power-select-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/dependent-selects/power-select-field/prevent-resetting-of-child-fields/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/dependent-selects/power-select-field/prevent-resetting-of-child-fields/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/dependent-selects/radio-group/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/dependent-selects/radio-group/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/dependent-selects/radio-group/prevent-resetting-of-child-fields/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/dependent-selects/radio-group/prevent-resetting-of-child-fields/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/email-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/email-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/checkbox-field/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/checkbox-field/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/class-name-bindings/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/class-name-bindings/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/fieldOptions/evalservRequestHeaders/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/fieldOptions/evalservRequestHeaders/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/fieldOptions/evaluateOnOperandDataUpdate/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/fieldOptions/evaluateOnOperandDataUpdate/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/number-field/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/number-field/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/number-field/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/number-field/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/number-field/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/power-select-field/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/radio-field/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/radio-field/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/selectable-fields/radio-field/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/selectable-fields/radio-field/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/text-field/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/text-field/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/text-field/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/formula-field/text-field/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/formula-field/text-field/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/group-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/group-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/group-field/custom-palette/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/group-field/custom-palette/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/group-field/field-view-toggle-button/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/group-field/field-view-toggle-button/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/group-field/field-view-toggle-button/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/group-field/field-view-toggle-button/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/multi-select-dropdown-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/multi-select-dropdown-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/number-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/number-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/power-select-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/power-select-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/radio-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/radio-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/radio-group/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/radio-group/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/radio-group/custom/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/radio-group/custom/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/radio-group/custom/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/radio-group/custom/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/radio-group/default/create/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/radio-group/default/create/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/radio-group/default/edit/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/radio-group/default/edit/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/select-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/select-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/static-rich-text-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/static-rich-text-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/text-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/text-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/textarea-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/textarea-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-fields/url-field/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-fields/url-field/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-for/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-for/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-hint/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-hint/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/date-field-format-date-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/date-field-format-date-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/metadata/field/structure_related/editable/editable-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/metadata/field/structure_related/editable/editable-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/metadata/field/structure_related/label/label-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/metadata/field/structure_related/label/label-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/metadata/field/structure_related/placeholder/placeholder-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/metadata/field/structure_related/placeholder/placeholder-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/metadata/field/structure_related/required/required-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/metadata/field/structure_related/required/required-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pages/components/dynamic-fields-for.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/components/dynamic-fields-for.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pages/components/dynamic-form-for.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/components/dynamic-form-for.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/fserv-is-none-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/fserv-is-none-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/get-object-at-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/get-object-at-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/sort-fields-by-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/sort-fields-by-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/dependent-field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dependent-field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/dependent-select-control-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dependent-select-control-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/dependent-select-field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dependent-select-field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/fetch-choices-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/fetch-choices-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/form-control-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/form-control-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/choice-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/choice-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/choice-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/choice-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/dynamic-form/config-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/dynamic-form/config-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/ember-form-for/config-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ember-form-for/config-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/date-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/date-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/date-time-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/date-time-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/field-map-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/field-map-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/field-utils-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/field-utils-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/time-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/time-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/unit/helpers/fserv-is-none-test\", [\"dummy/helpers/fserv-is-none\", \"qunit\"], function (_fservIsNone, _qunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Helper | fserv is none');\n  (0, _qunit.test)('it works for true', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = (0, _fservIsNone.fservIsNone)([true]);\n              assert.equal(result, false);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  (0, _qunit.test)('it works for false', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              result = (0, _fservIsNone.fservIsNone)([false]);\n              assert.equal(result, false);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  (0, _qunit.test)('it works for string', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              result = (0, _fservIsNone.fservIsNone)(['abc']);\n              assert.equal(result, false);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  (0, _qunit.test)('it works for blank string', /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              result = (0, _fservIsNone.fservIsNone)(['']);\n              assert.equal(result, false);\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n  (0, _qunit.test)('it works for undefined', /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              result = (0, _fservIsNone.fservIsNone)([undefined]);\n              assert.equal(result, true);\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n  (0, _qunit.test)('it works for null', /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              result = (0, _fservIsNone.fservIsNone)([null]);\n              assert.equal(result, true);\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n});","define(\"dummy/tests/unit/helpers/get-object-at-test\", [\"dummy/helpers/get-object-at\", \"qunit\"], function (_getObjectAt, _qunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Helper | get object at'); // Replace this with your real tests.\n\n  (0, _qunit.test)('it works', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var array, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              array = Ember.A([{\n                value: 'abc'\n              }, {\n                value: 'xyz'\n              }]);\n              result = (0, _getObjectAt.getObjectAt)([1, array]);\n              assert.equal(result, array[1]);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define(\"dummy/tests/unit/helpers/sort-fields-by-test\", [\"dummy/helpers/sort-fields-by\", \"qunit\"], function (_sortFieldsBy, _qunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Helper | sort fields by');\n  (0, _qunit.test)('Helper sorts by the key passed for sorting the array of objects', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = (0, _sortFieldsBy.sortFieldsBy)([[{\n                'id': 2,\n                'value': '1'\n              }, {\n                'id': 1,\n                'value': '2'\n              }]], {\n                keysToSort: 'id'\n              });\n              assert.deepEqual(result, [{\n                'id': 1,\n                'value': '2'\n              }, {\n                'id': 2,\n                'value': '1'\n              }]);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  (0, _qunit.test)('Helper sorts by the key passed for sorting the array of objects', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              result = (0, _sortFieldsBy.sortFieldsBy)([[{\n                'id': 2,\n                'value': '1'\n              }, {\n                'id': 1,\n                'value': '2'\n              }]], {});\n              assert.deepEqual(result, [{\n                'id': 2,\n                'value': '1'\n              }, {\n                'id': 1,\n                'value': '2'\n              }]);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define(\"dummy/tests/unit/mixins/dependent-field-test\", [\"ember-dynamic-form/mixins/dependent-field\", \"qunit\"], function (_dependentField, _qunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Mixin | dependent field'); // Replace this with your real tests.\n\n  (0, _qunit.test)('it works', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var DependentFieldObject;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              DependentFieldObject = Ember.Component.extend(_dependentField.default);\n              assert.ok(DependentFieldObject);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define(\"dummy/tests/unit/mixins/dependent-select-control-test\", [\"ember-dynamic-form/mixins/dependent-select-control\", \"qunit\"], function (_dependentSelectControl, _qunit) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Mixin | dependent select control'); // Replace this with your real tests.\n\n  (0, _qunit.test)('it works', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var DependentSelectControlObject;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              DependentSelectControlObject = Ember.Component.extend(_dependentSelectControl.default);\n              assert.ok(DependentSelectControlObject);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define(\"dummy/tests/unit/mixins/dependent-select-field-test\", [\"ember-dynamic-form/mixins/dependent-select-field\", \"qunit\"], function (_dependentSelectField, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Mixin | dependent select field'); // Replace this with your real tests.\n\n  (0, _qunit.test)('it works', function (assert) {\n    var DependentSelectFieldObject = Ember.Component.extend(_dependentSelectField.default);\n    assert.ok(DependentSelectFieldObject);\n  });\n});","define(\"dummy/tests/unit/mixins/fetch-choices-test\", [\"ember-dynamic-form/mixins/fetch-choices\", \"qunit\"], function (_fetchChoices, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Mixin | fetch choices'); // Replace this with your real tests.\n\n  (0, _qunit.test)('it works', function (assert) {\n    var FetchChoicesObject = Ember.Object.extend(_fetchChoices.default);\n    var subject = FetchChoicesObject.create();\n    assert.ok(subject);\n  });\n});","define(\"dummy/tests/unit/mixins/form-control-test\", [\"ember-dynamic-form/mixins/form-control\", \"qunit\"], function (_formControl, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Mixin | form control');\n  (0, _qunit.test)('it works', function (assert) {\n    var FormControlObject = Ember.Component.extend(_formControl.default);\n    assert.ok(FormControlObject);\n  });\n});","define(\"dummy/tests/unit/models/choice-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForModel)('choice', 'Unit | Model | choice', {\n    needs: ['model:field']\n  });\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject({\n      id: 1,\n      value: '1'\n    });\n    assert.ok(!!model);\n  });\n});","define(\"dummy/tests/unit/models/field-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForModel)('field', 'Unit | Model | field', {\n    needs: ['model:choice', 'service:dynamic-form/config']\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default text field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'text',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'text-field', 'Field is picked properly');\n    assert.equal(Ember.get(model, 'isNestedSection'), false, 'Field is not a nested section');\n    assert.equal(Ember.get(model, 'getChoices.length'), 0, 'Field does not have choices');\n    assert.equal(Ember.get(model, 'hidden'), undefined, 'Field is not hidden');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default paragraph field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'paragraph',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'textarea-field', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default number field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'number',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'number-field', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default radio field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'radio',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'radio-field', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default checkbox field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'checkbox',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'checkbox-field', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default date field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'date',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'datetime-field', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default date_time field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'date_time',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'datetime-field', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default dropdown field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'dropdown',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'power-select-field', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default dependent dropdown field', function (assert) {\n    var store = this.store();\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': '/dummy/1',\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'dependent_dropdown',\n      'validatable': null,\n      'visible': true\n    });\n\n    Ember.$.getJSON = function () {\n      return new Ember.RSVP.Promise(function (resolve) {\n        Ember.run.next(function () {\n          var choices = store.createRecord('choice', {\n            'id': '90',\n            'name': 'text',\n            'position': 1\n          });\n          resolve([choices]);\n        });\n      });\n    };\n\n    assert.equal(Ember.get(model, 'inputType'), 'dependent-dropdown', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model defaults for a default auto_complete field', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': '/dummy/1',\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'auto_complete',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'auto-complete', 'Field is picked properly');\n  });\n  (0, _emberQunit.test)('Verify model for a section', function (assert) {\n    var _this = this;\n\n    var store = this.store();\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'first_name',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'First name',\n      'link': null,\n      'name': 'first_name',\n      'parentId': '2',\n      'placeholder': 'Enter first name',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'section',\n      'validatable': null,\n      'visible': true\n    });\n    Ember.run.next(function () {\n      var parent = _this.subject({\n        'builder': null,\n        'choices': [],\n        'columnName': 'first_name',\n        'custom': false,\n        'dataStore': null,\n        'deleted': false,\n        'editable': true,\n        'fieldClass': 'Tom',\n        'field_options': {},\n        'fields': [],\n        'id': '2',\n        'label': 'Application Data',\n        'link': null,\n        'name': 'application_data',\n        'parentId': null,\n        'placeholder': 'Enter first name',\n        'position': 1,\n        'regex': {},\n        'required': false,\n        'type': 'dropdown',\n        'validatable': null,\n        'visible': true\n      });\n\n      var field = store.createRecord('field', {\n        'builder': null,\n        'choices': [],\n        'columnName': 'work_number',\n        'custom': false,\n        'dataStore': null,\n        'deleted': false,\n        'editable': true,\n        'fieldClass': 'Tom',\n        'field_options': {},\n        'fields': [],\n        'id': '3',\n        'label': 'Work',\n        'link': null,\n        'name': 'work_number',\n        'parentId': '1',\n        'placeholder': 'Enter first name',\n        'position': 1,\n        'regex': {},\n        'required': false,\n        'type': 'phone_number',\n        'validatable': null,\n        'visible': true\n      });\n      Ember.set(model, 'parent', parent);\n      Ember.get(model, 'fields').pushObject(field);\n      assert.equal(Ember.get(model, 'inputType'), 'nested-section', 'Field is picked properly');\n    });\n  });\n  (0, _emberQunit.test)('Verify model for a Group', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'nothins',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'nothins',\n      'link': null,\n      'name': 'nothins',\n      'parentId': null,\n      'placeholder': 'Enter nothins',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'section',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'inputType'), 'nested-section', 'Field is not a group');\n    assert.equal(Ember.get(model, 'isNestedSection'), true, 'Field is a nested group');\n  });\n  (0, _emberQunit.test)('Verify text field is hidden through visible property', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'nothins',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'field_options': {},\n      'fields': [],\n      'id': '1',\n      'label': 'nothins',\n      'link': null,\n      'name': 'nothins',\n      'parentId': null,\n      'placeholder': 'Enter nothins',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'text',\n      'validatable': null,\n      'visible': false\n    });\n    assert.equal(Ember.get(model, 'hidden'), true, 'Field is hidden');\n  });\n  (0, _emberQunit.test)('Verify text field is hidden through fieldOptions.hidden property', function (assert) {\n    var model = this.subject({\n      'builder': null,\n      'choices': [],\n      'columnName': 'nothins',\n      'custom': false,\n      'dataStore': null,\n      'deleted': false,\n      'editable': true,\n      'fieldClass': 'Tom',\n      'fieldOptions': {\n        'hidden': true\n      },\n      'fields': [],\n      'id': '1',\n      'label': 'nothins',\n      'link': null,\n      'name': 'nothins',\n      'parentId': null,\n      'placeholder': 'Enter nothins',\n      'position': 1,\n      'regex': {},\n      'required': false,\n      'type': 'text',\n      'validatable': null,\n      'visible': true\n    });\n    assert.equal(Ember.get(model, 'hidden'), true, 'Field is hidden');\n  });\n});","define(\"dummy/tests/unit/models/form-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForModel)('form', 'Unit | Model | form', {\n    needs: ['model:field', 'model:choice']\n  });\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject({\n      'id': 1,\n      'name': 'Default form',\n      'description': 'This is the default form.',\n      'active': true,\n      'fieldClass': 'Tom',\n      'fields': []\n    });\n    assert.ok(!!model);\n  });\n});","define(\"dummy/tests/unit/serializers/choice-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForModel)('choice', 'Unit | Serializer | choice', {\n    needs: ['model:field', 'serializer:choice']\n  });\n  (0, _emberQunit.test)('Choice serializer works', function (assert) {\n    var record = this.subject();\n    var serializedRecord = record.serialize();\n    assert.ok(serializedRecord);\n  });\n});","define(\"dummy/tests/unit/serializers/field-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleForModel)('field', 'Unit | Serializer | field', {\n    needs: ['model:choice', 'serializer:choice', 'serializer:field', 'service:dynamic-form/config']\n  });\n  (0, _emberQunit.test)('Serializer serializes records properly', function (assert) {\n    var record = this.subject({\n      'id': '1',\n      'parent_id': '2',\n      'name': 'cf_first_name',\n      'label': 'Custom field',\n      'placeholder': 'Enter value',\n      'type': 'text',\n      'position': 1,\n      'required': false,\n      'custom': false,\n      'editable': true,\n      'visible': true,\n      'pinned': false,\n      'link': null,\n      'choices': [],\n      'field_options': {},\n      'regex': '',\n      'fields': []\n    });\n    var serializedRecord = record.serialize();\n    assert.ok(serializedRecord);\n  });\n});","define(\"dummy/tests/unit/services/dynamic-form/config-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleFor)('service:dynamic-form/config', 'Unit | Service | dynamic form/config', {// Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  }); // Replace this with your real tests.\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define(\"dummy/tests/unit/services/ember-form-for/config-test\", [\"ember-qunit\"], function (_emberQunit) {\n  \"use strict\";\n\n  (0, _emberQunit.moduleFor)('service:ember-form-for/config', 'Unit | Service | ember form for/config', {// Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  }); // Replace this with your real tests.\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define(\"dummy/tests/unit/utils/date-test\", [\"dummy/utils/date\", \"qunit\"], function (_date, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | date');\n  (0, _qunit.test)('toDateObject works properly', function (assert) {\n    var result = _date.default.toDateObject('2017-10-30T00:00:00.00Z');\n\n    assert.equal(result.getDate(), 30);\n    assert.equal(result.getMonth(), 9);\n    assert.equal(result.getFullYear(), 2017);\n  });\n  (0, _qunit.test)('toDateString works properly', function (assert) {\n    var result = _date.default.toDateString(new Date(2017, 9, 30));\n\n    assert.equal(result, '2017-10-30');\n  });\n});","define(\"dummy/tests/unit/utils/date-time-test\", [\"dummy/utils/date-time\", \"qunit\"], function (_dateTime, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | date time');\n  (0, _qunit.test)('padding works properly', function (assert) {\n    var result = _dateTime.default.pad(3);\n\n    assert.equal(result, '03');\n  });\n  (0, _qunit.test)('extractDate works properly', function (assert) {\n    var result = _dateTime.default.extractDate('2017-09-30T03:30:00.000Z');\n\n    assert.equal(result, '2017-09-30');\n  });\n  (0, _qunit.test)('extractTimeUptoMins works properly', function (assert) {\n    var result = _dateTime.default.extractTimeUptoMins('2017-09-30T03:30:00.000Z');\n\n    assert.equal(result, '03:30');\n  });\n  (0, _qunit.test)('getDateTimeString works properly', function (assert) {\n    var result = _dateTime.default.getDateTimeString('2017-09-30', '03:30');\n\n    assert.equal(result, '2017-09-30T03:30:00.000Z');\n  });\n});","define(\"dummy/tests/unit/utils/field-map-test\", [\"dummy/utils/field-map\", \"qunit\"], function (_fieldMap, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | field map'); // Replace this with your real tests.\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _fieldMap.default)();\n    assert.ok(result);\n  });\n});","define(\"dummy/tests/unit/utils/field-utils-test\", [\"dummy/utils/field-utils\", \"qunit\"], function (_fieldUtils, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | field utils');\n  (0, _qunit.test)('it works', function (assert) {\n    var field = Ember.Object.create({\n      name: 'first_name',\n      label: 'First Name',\n      position: 1\n    });\n    var fieldScopeMap = Ember.Object.create();\n    var object = Ember.Object.create();\n\n    var result = _fieldUtils.default.generatePropertyName([field, fieldScopeMap, object]);\n\n    assert.ok(result);\n  });\n});","define(\"dummy/tests/unit/utils/time-test\", [\"dummy/utils/time\", \"qunit\"], function (_time, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | time');\n  (0, _qunit.test)('toMinutes works properly', function (assert) {\n    var result = _time.default.toMinutes(3, 20);\n\n    assert.equal(result, 200);\n  });\n  (0, _qunit.test)('toTimeFormat works properly', function (assert) {\n    var result = _time.default.toTimeFormat('03:30');\n\n    assert.equal(result, '03:30:00.000Z');\n  });\n  (0, _qunit.test)('toAMorPMFormat works properly', function (assert) {\n    var result = _time.default.toAMorPMFormat('23:30');\n\n    assert.equal(result, '11:30 PM');\n  });\n  (0, _qunit.test)('toTwentyFourHrFormat works properly', function (assert) {\n    var result = _time.default.toTwentyFourHrFormat('11:30 PM');\n\n    assert.equal(result, '23:30');\n  });\n  (0, _qunit.test)('generateTimeSeriesInRange works properly', function (assert) {\n    var result = _time.default.generateTimeSeriesInRange(0, 120, 30, true);\n\n    assert.equal(result.length, 4);\n    assert.equal(result[0], '00:00');\n    assert.equal(result[1], '00:30');\n    assert.equal(result[2], '01:00');\n    assert.equal(result[3], '01:30');\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsjWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvrfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACruBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvcnjbzrenhlbonornotxwrvpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvxirTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvglmnkrhvlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrljhxbtrvgtrlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnvnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7PA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACluncA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}